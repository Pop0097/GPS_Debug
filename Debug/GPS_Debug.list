
GPS_Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047e8  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  080049e0  080049e0  000149e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c90  08004c90  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08004c90  08004c90  00014c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c98  08004c98  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c98  08004c98  00014c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c9c  08004c9c  00014c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e58  20000028  08004cc4  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e80  08004cc4  00020e80  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b0a  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019c0  00000000  00000000  00029b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  0002b520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002bce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024f52  00000000  00000000  0002c408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097ad  00000000  00000000  0005135a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7dd3  00000000  00000000  0005ab07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001428da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ec4  00000000  00000000  00142930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000028 	.word	0x20000028
 8000214:	00000000 	.word	0x00000000
 8000218:	080049c8 	.word	0x080049c8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000002c 	.word	0x2000002c
 8000234:	080049c8 	.word	0x080049c8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <byteToHexString>:
static uint8_t a[GPS_UART_BUFFER_SIZE];

static void parseGGA(uint8_t* data);
static void parseVTG(uint8_t* data);

static uint8_t byteToHexString(unsigned int checkSumHalf) {
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
    uint8_t uint8_tOut = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	73fb      	strb	r3, [r7, #15]

    if (checkSumHalf >= 0 && checkSumHalf <= 9){
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b09      	cmp	r3, #9
 8000540:	d804      	bhi.n	800054c <byteToHexString+0x1c>
        uint8_tOut = checkSumHalf + 0x30;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	3330      	adds	r3, #48	; 0x30
 8000548:	73fb      	strb	r3, [r7, #15]
 800054a:	e009      	b.n	8000560 <byteToHexString+0x30>
    }
    else if (checkSumHalf >= 0xA && checkSumHalf <= 0xF){
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b09      	cmp	r3, #9
 8000550:	d906      	bls.n	8000560 <byteToHexString+0x30>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b0f      	cmp	r3, #15
 8000556:	d803      	bhi.n	8000560 <byteToHexString+0x30>
        uint8_tOut = checkSumHalf + 0x37;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	b2db      	uxtb	r3, r3
 800055c:	3337      	adds	r3, #55	; 0x37
 800055e:	73fb      	strb	r3, [r7, #15]
    }
    return uint8_tOut;
 8000560:	7bfb      	ldrb	r3, [r7, #15]
}
 8000562:	4618      	mov	r0, r3
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <asciiToHex>:

static uint8_t asciiToHex(uint8_t asciiSymbol) {
 800056e:	b480      	push	{r7}
 8000570:	b085      	sub	sp, #20
 8000572:	af00      	add	r7, sp, #0
 8000574:	4603      	mov	r3, r0
 8000576:	71fb      	strb	r3, [r7, #7]
    uint8_t hexOut = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	73fb      	strb	r3, [r7, #15]
    if (asciiSymbol == 0x2E)
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	2b2e      	cmp	r3, #46	; 0x2e
 8000580:	d102      	bne.n	8000588 <asciiToHex+0x1a>
        hexOut = 0x10;
 8000582:	2310      	movs	r3, #16
 8000584:	73fb      	strb	r3, [r7, #15]
 8000586:	e012      	b.n	80005ae <asciiToHex+0x40>
    else if (asciiSymbol >= 0x30 && asciiSymbol <= 0x39){
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b2f      	cmp	r3, #47	; 0x2f
 800058c:	d906      	bls.n	800059c <asciiToHex+0x2e>
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	2b39      	cmp	r3, #57	; 0x39
 8000592:	d803      	bhi.n	800059c <asciiToHex+0x2e>
        hexOut = asciiSymbol - 0x30;
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	3b30      	subs	r3, #48	; 0x30
 8000598:	73fb      	strb	r3, [r7, #15]
 800059a:	e008      	b.n	80005ae <asciiToHex+0x40>
    }
    else if (asciiSymbol >= 0x41 && asciiSymbol <= 0x46){
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	2b40      	cmp	r3, #64	; 0x40
 80005a0:	d905      	bls.n	80005ae <asciiToHex+0x40>
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	2b46      	cmp	r3, #70	; 0x46
 80005a6:	d802      	bhi.n	80005ae <asciiToHex+0x40>
        hexOut = asciiSymbol - 0x37; //Letter "F"(ASCII 0x46) becomes 0xF
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	3b37      	subs	r3, #55	; 0x37
 80005ac:	73fb      	strb	r3, [r7, #15]
    }
    return hexOut;
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <isNMEAChecksumValid>:
 * Given an NMEA string starting after the $, verifies the integrity of the stirng
 * using the checksum
 * @param string
 * @return True if string is a valid gps string, false otherwise
 */
static bool isNMEAChecksumValid(uint8_t* string){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    uint16_t i = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	81fb      	strh	r3, [r7, #14]
    uint8_t checksum = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	737b      	strb	r3, [r7, #13]

    while(string[i] != '*'){
 80005cc:	e009      	b.n	80005e2 <isNMEAChecksumValid+0x26>
        checksum ^= string[i];
 80005ce:	89fb      	ldrh	r3, [r7, #14]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	4413      	add	r3, r2
 80005d4:	781a      	ldrb	r2, [r3, #0]
 80005d6:	7b7b      	ldrb	r3, [r7, #13]
 80005d8:	4053      	eors	r3, r2
 80005da:	737b      	strb	r3, [r7, #13]
        i++;
 80005dc:	89fb      	ldrh	r3, [r7, #14]
 80005de:	3301      	adds	r3, #1
 80005e0:	81fb      	strh	r3, [r7, #14]
    while(string[i] != '*'){
 80005e2:	89fb      	ldrh	r3, [r7, #14]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	4413      	add	r3, r2
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b2a      	cmp	r3, #42	; 0x2a
 80005ec:	d1ef      	bne.n	80005ce <isNMEAChecksumValid+0x12>
    }
    i++;
 80005ee:	89fb      	ldrh	r3, [r7, #14]
 80005f0:	3301      	adds	r3, #1
 80005f2:	81fb      	strh	r3, [r7, #14]

    return byteToHexString((checksum & 0xF0) >> 4) == string[i] &&  byteToHexString(checksum & 0x0F) == string[i+1];
 80005f4:	7b7b      	ldrb	r3, [r7, #13]
 80005f6:	091b      	lsrs	r3, r3, #4
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ff98 	bl	8000530 <byteToHexString>
 8000600:	4603      	mov	r3, r0
 8000602:	4619      	mov	r1, r3
 8000604:	89fb      	ldrh	r3, [r7, #14]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4299      	cmp	r1, r3
 800060e:	d110      	bne.n	8000632 <isNMEAChecksumValid+0x76>
 8000610:	7b7b      	ldrb	r3, [r7, #13]
 8000612:	f003 030f 	and.w	r3, r3, #15
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ff8a 	bl	8000530 <byteToHexString>
 800061c:	4603      	mov	r3, r0
 800061e:	4619      	mov	r1, r3
 8000620:	89fb      	ldrh	r3, [r7, #14]
 8000622:	3301      	adds	r3, #1
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	4413      	add	r3, r2
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4299      	cmp	r1, r3
 800062c:	d101      	bne.n	8000632 <isNMEAChecksumValid+0x76>
 800062e:	2301      	movs	r3, #1
 8000630:	e000      	b.n	8000634 <isNMEAChecksumValid+0x78>
 8000632:	2300      	movs	r3, #0
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
}
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <getData>:

GPSData getData() {
 8000644:	b4b0      	push	{r4, r5, r7}
 8000646:	b08d      	sub	sp, #52	; 0x34
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

	GPSData toReturn = gps_data;
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <getData+0x64>)
 800064e:	f107 0408 	add.w	r4, r7, #8
 8000652:	461d      	mov	r5, r3
 8000654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000660:	e884 0003 	stmia.w	r4, {r0, r1}
	gps_data.ggaDataIsNew = false;
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <getData+0x64>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	gps_data.vtgDataIsNew = false;
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <getData+0x64>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	gps_data.dataIsNew = false;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <getData+0x64>)
 8000676:	2200      	movs	r2, #0
 8000678:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	gps_data.timeIsNew = false;
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <getData+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	return toReturn;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	461d      	mov	r5, r3
 8000688:	f107 0408 	add.w	r4, r7, #8
 800068c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800068e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000694:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000698:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	3734      	adds	r7, #52	; 0x34
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bcb0      	pop	{r4, r5, r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000d10 	.word	0x20000d10

080006ac <parseIncomingGPSData>:

void parseIncomingGPSData(){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0

	static bool currently_parsing = false;
	static uint16_t buffer_index = 0;
	int b = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
	int c = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < GPS_UART_BUFFER_SIZE; i++) {
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	e06a      	b.n	8000796 <parseIncomingGPSData+0xea>
		if (a[i] == '$') { //Beginning of Packet
 80006c0:	4a69      	ldr	r2, [pc, #420]	; (8000868 <parseIncomingGPSData+0x1bc>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b24      	cmp	r3, #36	; 0x24
 80006ca:	d106      	bne.n	80006da <parseIncomingGPSData+0x2e>
			currently_parsing = true;
 80006cc:	4b67      	ldr	r3, [pc, #412]	; (800086c <parseIncomingGPSData+0x1c0>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
			buffer_index = 0;
 80006d2:	4b67      	ldr	r3, [pc, #412]	; (8000870 <parseIncomingGPSData+0x1c4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	801a      	strh	r2, [r3, #0]
 80006d8:	e05a      	b.n	8000790 <parseIncomingGPSData+0xe4>
		} else if (a[i] == '\r') { //End of Packet
 80006da:	4a63      	ldr	r2, [pc, #396]	; (8000868 <parseIncomingGPSData+0x1bc>)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4413      	add	r3, r2
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b0d      	cmp	r3, #13
 80006e4:	d136      	bne.n	8000754 <parseIncomingGPSData+0xa8>
			 if (strncmp(GPS_GGA_MESSAGE, uart_buffer, 5) == 0){
 80006e6:	4b63      	ldr	r3, [pc, #396]	; (8000874 <parseIncomingGPSData+0x1c8>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2205      	movs	r2, #5
 80006ec:	4962      	ldr	r1, [pc, #392]	; (8000878 <parseIncomingGPSData+0x1cc>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f004 f958 	bl	80049a4 <strncmp>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d10f      	bne.n	800071a <parseIncomingGPSData+0x6e>
				 memcpy(gga_buffer, uart_buffer, GPS_UART_BUFFER_SIZE);
 80006fa:	4a60      	ldr	r2, [pc, #384]	; (800087c <parseIncomingGPSData+0x1d0>)
 80006fc:	4b5e      	ldr	r3, [pc, #376]	; (8000878 <parseIncomingGPSData+0x1cc>)
 80006fe:	4610      	mov	r0, r2
 8000700:	4619      	mov	r1, r3
 8000702:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000706:	461a      	mov	r2, r3
 8000708:	f004 f936 	bl	8004978 <memcpy>
				 new_gga_data = true;
 800070c:	4b5c      	ldr	r3, [pc, #368]	; (8000880 <parseIncomingGPSData+0x1d4>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
				 b += 10;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	330a      	adds	r3, #10
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	e018      	b.n	800074c <parseIncomingGPSData+0xa0>
			 } else if (strncmp(GPS_VTG_MESSAGE, uart_buffer, 5) == 0){
 800071a:	4b5a      	ldr	r3, [pc, #360]	; (8000884 <parseIncomingGPSData+0x1d8>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2205      	movs	r2, #5
 8000720:	4955      	ldr	r1, [pc, #340]	; (8000878 <parseIncomingGPSData+0x1cc>)
 8000722:	4618      	mov	r0, r3
 8000724:	f004 f93e 	bl	80049a4 <strncmp>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d10e      	bne.n	800074c <parseIncomingGPSData+0xa0>
				memcpy(vtg_buffer, uart_buffer, GPS_UART_BUFFER_SIZE);
 800072e:	4a56      	ldr	r2, [pc, #344]	; (8000888 <parseIncomingGPSData+0x1dc>)
 8000730:	4b51      	ldr	r3, [pc, #324]	; (8000878 <parseIncomingGPSData+0x1cc>)
 8000732:	4610      	mov	r0, r2
 8000734:	4619      	mov	r1, r3
 8000736:	f44f 7348 	mov.w	r3, #800	; 0x320
 800073a:	461a      	mov	r2, r3
 800073c:	f004 f91c 	bl	8004978 <memcpy>
				new_vtg_data = true;
 8000740:	4b52      	ldr	r3, [pc, #328]	; (800088c <parseIncomingGPSData+0x1e0>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
				c += 20;
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	3314      	adds	r3, #20
 800074a:	60bb      	str	r3, [r7, #8]
			 } else {
//				 debug("Received NMEA that was neither GPVTG or GPGGA!");
			 }
			 currently_parsing = false;
 800074c:	4b47      	ldr	r3, [pc, #284]	; (800086c <parseIncomingGPSData+0x1c0>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
 8000752:	e01d      	b.n	8000790 <parseIncomingGPSData+0xe4>
		} else if (currently_parsing){
 8000754:	4b45      	ldr	r3, [pc, #276]	; (800086c <parseIncomingGPSData+0x1c0>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d019      	beq.n	8000790 <parseIncomingGPSData+0xe4>
			uart_buffer[buffer_index] = a[i];
 800075c:	4b44      	ldr	r3, [pc, #272]	; (8000870 <parseIncomingGPSData+0x1c4>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	4619      	mov	r1, r3
 8000762:	4a41      	ldr	r2, [pc, #260]	; (8000868 <parseIncomingGPSData+0x1bc>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4413      	add	r3, r2
 8000768:	781a      	ldrb	r2, [r3, #0]
 800076a:	4b43      	ldr	r3, [pc, #268]	; (8000878 <parseIncomingGPSData+0x1cc>)
 800076c:	545a      	strb	r2, [r3, r1]
			buffer_index = (buffer_index + 1) % GPS_UART_BUFFER_SIZE; //make sure we dont cause a memory fault here
 800076e:	4b40      	ldr	r3, [pc, #256]	; (8000870 <parseIncomingGPSData+0x1c4>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	3301      	adds	r3, #1
 8000774:	4a46      	ldr	r2, [pc, #280]	; (8000890 <parseIncomingGPSData+0x1e4>)
 8000776:	fb82 1203 	smull	r1, r2, r2, r3
 800077a:	1211      	asrs	r1, r2, #8
 800077c:	17da      	asrs	r2, r3, #31
 800077e:	1a8a      	subs	r2, r1, r2
 8000780:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000784:	fb01 f202 	mul.w	r2, r1, r2
 8000788:	1a9a      	subs	r2, r3, r2
 800078a:	b292      	uxth	r2, r2
 800078c:	4b38      	ldr	r3, [pc, #224]	; (8000870 <parseIncomingGPSData+0x1c4>)
 800078e:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < GPS_UART_BUFFER_SIZE; i++) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3301      	adds	r3, #1
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800079c:	db90      	blt.n	80006c0 <parseIncomingGPSData+0x14>
		}
	}

    if (!new_gga_data && !new_vtg_data){ //if no data has been copied over
 800079e:	4b38      	ldr	r3, [pc, #224]	; (8000880 <parseIncomingGPSData+0x1d4>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	f083 0301 	eor.w	r3, r3, #1
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d006      	beq.n	80007ba <parseIncomingGPSData+0x10e>
 80007ac:	4b37      	ldr	r3, [pc, #220]	; (800088c <parseIncomingGPSData+0x1e0>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	f083 0301 	eor.w	r3, r3, #1
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d152      	bne.n	8000860 <parseIncomingGPSData+0x1b4>
        return;
    }

    if (new_gga_data){
 80007ba:	4b31      	ldr	r3, [pc, #196]	; (8000880 <parseIncomingGPSData+0x1d4>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d026      	beq.n	8000810 <parseIncomingGPSData+0x164>
        new_gga_data = false;
 80007c2:	4b2f      	ldr	r3, [pc, #188]	; (8000880 <parseIncomingGPSData+0x1d4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
        if (isNMEAChecksumValid(gga_buffer)){
 80007c8:	482c      	ldr	r0, [pc, #176]	; (800087c <parseIncomingGPSData+0x1d0>)
 80007ca:	f7ff fef7 	bl	80005bc <isNMEAChecksumValid>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d019      	beq.n	8000808 <parseIncomingGPSData+0x15c>
            data_available = false;
 80007d4:	4b2f      	ldr	r3, [pc, #188]	; (8000894 <parseIncomingGPSData+0x1e8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
            parseGGA(gga_buffer);
 80007da:	4828      	ldr	r0, [pc, #160]	; (800087c <parseIncomingGPSData+0x1d0>)
 80007dc:	f000 f9d0 	bl	8000b80 <parseGGA>
            data_available = true;
 80007e0:	4b2c      	ldr	r3, [pc, #176]	; (8000894 <parseIncomingGPSData+0x1e8>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]
            gps_data.dataIsNew = true;
 80007e6:	4b2c      	ldr	r3, [pc, #176]	; (8000898 <parseIncomingGPSData+0x1ec>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            gps_data.timeIsNew = true;
 80007ee:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <parseIncomingGPSData+0x1ec>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            gps_data.ggaDataIsNew = true;
 80007f6:	4b28      	ldr	r3, [pc, #160]	; (8000898 <parseIncomingGPSData+0x1ec>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
            gps_data.sensorStatus = 0;
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <parseIncomingGPSData+0x1ec>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2020 	strb.w	r2, [r3, #32]
 8000806:	e003      	b.n	8000810 <parseIncomingGPSData+0x164>
        } else {
        	gps_data.sensorStatus = 1;
 8000808:	4b23      	ldr	r3, [pc, #140]	; (8000898 <parseIncomingGPSData+0x1ec>)
 800080a:	2201      	movs	r2, #1
 800080c:	f883 2020 	strb.w	r2, [r3, #32]
//            debug("Failed checksum when parsing a GPGGA (positional) packet!");
//            debug(gga_buffer);
        }
    }

    if (new_vtg_data){
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <parseIncomingGPSData+0x1e0>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d024      	beq.n	8000862 <parseIncomingGPSData+0x1b6>
        new_vtg_data = false;
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <parseIncomingGPSData+0x1e0>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
        if (isNMEAChecksumValid(vtg_buffer)){
 800081e:	481a      	ldr	r0, [pc, #104]	; (8000888 <parseIncomingGPSData+0x1dc>)
 8000820:	f7ff fecc 	bl	80005bc <isNMEAChecksumValid>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d015      	beq.n	8000856 <parseIncomingGPSData+0x1aa>
            data_available = false;
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <parseIncomingGPSData+0x1e8>)
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
            parseVTG(vtg_buffer);
 8000830:	4815      	ldr	r0, [pc, #84]	; (8000888 <parseIncomingGPSData+0x1dc>)
 8000832:	f000 f899 	bl	8000968 <parseVTG>
            data_available = true;
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <parseIncomingGPSData+0x1e8>)
 8000838:	2201      	movs	r2, #1
 800083a:	701a      	strb	r2, [r3, #0]
            gps_data.dataIsNew = true;
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <parseIncomingGPSData+0x1ec>)
 800083e:	2201      	movs	r2, #1
 8000840:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            gps_data.sensorStatus = 0;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <parseIncomingGPSData+0x1ec>)
 8000846:	2200      	movs	r2, #0
 8000848:	f883 2020 	strb.w	r2, [r3, #32]
            gps_data.vtgDataIsNew = true;
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <parseIncomingGPSData+0x1ec>)
 800084e:	2201      	movs	r2, #1
 8000850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000854:	e005      	b.n	8000862 <parseIncomingGPSData+0x1b6>
        } else {
        	gps_data.sensorStatus = 1;
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <parseIncomingGPSData+0x1ec>)
 8000858:	2201      	movs	r2, #1
 800085a:	f883 2020 	strb.w	r2, [r3, #32]
 800085e:	e000      	b.n	8000862 <parseIncomingGPSData+0x1b6>
        return;
 8000860:	bf00      	nop
//            debug("Failed checksum when parsing a GPVTG (velocity) packet!");
//            debug(vtg_buffer);
        }
    }
}
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200009a8 	.word	0x200009a8
 800086c:	20000cc8 	.word	0x20000cc8
 8000870:	20000cca 	.word	0x20000cca
 8000874:	2000000c 	.word	0x2000000c
 8000878:	20000688 	.word	0x20000688
 800087c:	20000048 	.word	0x20000048
 8000880:	20000046 	.word	0x20000046
 8000884:	20000010 	.word	0x20000010
 8000888:	20000368 	.word	0x20000368
 800088c:	20000045 	.word	0x20000045
 8000890:	51eb851f 	.word	0x51eb851f
 8000894:	20000044 	.word	0x20000044
 8000898:	20000d10 	.word	0x20000d10

0800089c <init>:

void init() {
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0

	const uint8_t CFG_NMEA[16] = { 0x17, 0x20, 0b00011000, 0x40, 0x08, 0x01, 0x00, 0x00, 0x00, 0b01110110, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00 };
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <init+0x60>)
 80008a4:	463c      	mov	r4, r7
 80008a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit_DMA(&huart4, CFG_NMEA, sizeof(CFG_NMEA));
 80008ac:	463b      	mov	r3, r7
 80008ae:	2210      	movs	r2, #16
 80008b0:	4619      	mov	r1, r3
 80008b2:	4813      	ldr	r0, [pc, #76]	; (8000900 <init+0x64>)
 80008b4:	f002 ffbe 	bl	8003834 <HAL_UART_Transmit_DMA>
//	HAL_UART_Transmit_DMA(&huart4, PUBX_CONFIG_NMEA, sizeof(PUBX_CONFIG_NMEA));

//	const uint8_t CFG_UART[21] = { 0x06, 0x00, 0x01, 0x00, 0b00000000, 0b00000000, 0x00, 0x00, 0b11000000, 0b00001000, 0x00, 0x01, 0b11000010, 0x00, 0x00, 0b00000010, 0x00, 0b00000010, 0x00, 0x00, 0x00 };
//	HAL_UART_Transmit_DMA(&huart4, CFG_UART, sizeof(CFG_UART));

	HAL_UART_Transmit_DMA(&huart4, PMTK_SET_NMEA_UPDATE_10HZ, sizeof(PMTK_SET_NMEA_UPDATE_10HZ));
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <init+0x68>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2204      	movs	r2, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	480f      	ldr	r0, [pc, #60]	; (8000900 <init+0x64>)
 80008c2:	f002 ffb7 	bl	8003834 <HAL_UART_Transmit_DMA>

	HAL_UART_Transmit_DMA(&huart4, PMTK_API_SET_FIX_CTL_5HZ, sizeof(PMTK_API_SET_FIX_CTL_5HZ));
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <init+0x6c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2204      	movs	r2, #4
 80008cc:	4619      	mov	r1, r3
 80008ce:	480c      	ldr	r0, [pc, #48]	; (8000900 <init+0x64>)
 80008d0:	f002 ffb0 	bl	8003834 <HAL_UART_Transmit_DMA>

	HAL_UART_Transmit_DMA(&huart4, PMTK_ENABLE_WAAS, sizeof(PMTK_ENABLE_WAAS));
 80008d4:	4b0d      	ldr	r3, [pc, #52]	; (800090c <init+0x70>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2204      	movs	r2, #4
 80008da:	4619      	mov	r1, r3
 80008dc:	4808      	ldr	r0, [pc, #32]	; (8000900 <init+0x64>)
 80008de:	f002 ffa9 	bl	8003834 <HAL_UART_Transmit_DMA>

	configured = true;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <init+0x74>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart4, a, GPS_UART_BUFFER_SIZE);
 80008e8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80008ec:	4909      	ldr	r1, [pc, #36]	; (8000914 <init+0x78>)
 80008ee:	4804      	ldr	r0, [pc, #16]	; (8000900 <init+0x64>)
 80008f0:	f003 f81e 	bl	8003930 <HAL_UART_Receive_DMA>
}
 80008f4:	bf00      	nop
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd90      	pop	{r4, r7, pc}
 80008fc:	08004c60 	.word	0x08004c60
 8000900:	20000d98 	.word	0x20000d98
 8000904:	20000000 	.word	0x20000000
 8000908:	20000004 	.word	0x20000004
 800090c:	20000008 	.word	0x20000008
 8000910:	20000047 	.word	0x20000047
 8000914:	200009a8 	.word	0x200009a8

08000918 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

	parseIncomingGPSData();
 8000920:	f7ff fec4 	bl	80006ac <parseIncomingGPSData>

	HAL_UART_Receive_DMA(&huart4, a, GPS_UART_BUFFER_SIZE);
 8000924:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000928:	4903      	ldr	r1, [pc, #12]	; (8000938 <HAL_UART_RxCpltCallback+0x20>)
 800092a:	4804      	ldr	r0, [pc, #16]	; (800093c <HAL_UART_RxCpltCallback+0x24>)
 800092c:	f003 f800 	bl	8003930 <HAL_UART_Receive_DMA>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200009a8 	.word	0x200009a8
 800093c:	20000d98 	.word	0x20000d98

08000940 <isNewDataAvailable>:

bool isNewDataAvailable(){
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
    if (data_available){
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <isNewDataAvailable+0x24>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d004      	beq.n	8000956 <isNewDataAvailable+0x16>
        data_available = false;
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <isNewDataAvailable+0x24>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
        return true;
 8000952:	2301      	movs	r3, #1
 8000954:	e000      	b.n	8000958 <isNewDataAvailable+0x18>
    }
    return false;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20000044 	.word	0x20000044

08000968 <parseVTG>:

static void parseVTG(uint8_t* data){
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

    //static so that we dont allocate these variables every time
    static uint8_t rawHeading[6] = {0, 0, 0, 0, 0, 0};
    static uint8_t rawGroundSpeed[8] = {0, 0, 0, 0, 0, 0, 0, 0};

    int comma = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
    int i = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
    int j = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]

    while (data[j] != '*') {
 800097c:	e030      	b.n	80009e0 <parseVTG+0x78>
        uint8_t numData = asciiToHex(data[j]);
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	4413      	add	r3, r2
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fdf1 	bl	800056e <asciiToHex>
 800098c:	4603      	mov	r3, r0
 800098e:	73fb      	strb	r3, [r7, #15]
        if (data[j] == ',') {
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b2c      	cmp	r3, #44	; 0x2c
 800099a:	d104      	bne.n	80009a6 <parseVTG+0x3e>
            comma++;
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	3301      	adds	r3, #1
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
            i = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
        }

        if (comma == 1 && (i != 0)) {
 80009a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d108      	bne.n	80009be <parseVTG+0x56>
 80009ac:	6a3b      	ldr	r3, [r7, #32]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d005      	beq.n	80009be <parseVTG+0x56>
            rawHeading[i] = numData;
 80009b2:	4a6c      	ldr	r2, [pc, #432]	; (8000b64 <parseVTG+0x1fc>)
 80009b4:	6a3b      	ldr	r3, [r7, #32]
 80009b6:	4413      	add	r3, r2
 80009b8:	7bfa      	ldrb	r2, [r7, #15]
 80009ba:	701a      	strb	r2, [r3, #0]
 80009bc:	e00a      	b.n	80009d4 <parseVTG+0x6c>
        } else if (comma == 7 && (i != 0)) {
 80009be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c0:	2b07      	cmp	r3, #7
 80009c2:	d107      	bne.n	80009d4 <parseVTG+0x6c>
 80009c4:	6a3b      	ldr	r3, [r7, #32]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d004      	beq.n	80009d4 <parseVTG+0x6c>
            rawGroundSpeed[i] = numData;
 80009ca:	4a67      	ldr	r2, [pc, #412]	; (8000b68 <parseVTG+0x200>)
 80009cc:	6a3b      	ldr	r3, [r7, #32]
 80009ce:	4413      	add	r3, r2
 80009d0:	7bfa      	ldrb	r2, [r7, #15]
 80009d2:	701a      	strb	r2, [r3, #0]
        }

        i++;
 80009d4:	6a3b      	ldr	r3, [r7, #32]
 80009d6:	3301      	adds	r3, #1
 80009d8:	623b      	str	r3, [r7, #32]
        j++;
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3301      	adds	r3, #1
 80009de:	61fb      	str	r3, [r7, #28]
    while (data[j] != '*') {
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b2a      	cmp	r3, #42	; 0x2a
 80009ea:	d1c8      	bne.n	800097e <parseVTG+0x16>
    }

    i = 1;
 80009ec:	2301      	movs	r3, #1
 80009ee:	623b      	str	r3, [r7, #32]
    long int multiplier = 10;
 80009f0:	230a      	movs	r3, #10
 80009f2:	61bb      	str	r3, [r7, #24]
    int decimalPoint = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]

    gps_data.heading = 0;
 80009f8:	4b5c      	ldr	r3, [pc, #368]	; (8000b6c <parseVTG+0x204>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	839a      	strh	r2, [r3, #28]
    float tHeading = 0;
 80009fe:	f04f 0300 	mov.w	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
    for (i = 1; i < 6; i++) //this code first generates an 5 digit decimal number
 8000a04:	2301      	movs	r3, #1
 8000a06:	623b      	str	r3, [r7, #32]
 8000a08:	e026      	b.n	8000a58 <parseVTG+0xf0>
    {
        if (rawHeading[i] == 0x10)//check for decimal point
 8000a0a:	4a56      	ldr	r2, [pc, #344]	; (8000b64 <parseVTG+0x1fc>)
 8000a0c:	6a3b      	ldr	r3, [r7, #32]
 8000a0e:	4413      	add	r3, r2
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b10      	cmp	r3, #16
 8000a14:	d102      	bne.n	8000a1c <parseVTG+0xb4>
        {
            decimalPoint = i;
 8000a16:	6a3b      	ldr	r3, [r7, #32]
 8000a18:	617b      	str	r3, [r7, #20]
 8000a1a:	e01a      	b.n	8000a52 <parseVTG+0xea>
        } else {
            tHeading += (float) (rawHeading[i]*100000 / multiplier);
 8000a1c:	4a51      	ldr	r2, [pc, #324]	; (8000b64 <parseVTG+0x1fc>)
 8000a1e:	6a3b      	ldr	r3, [r7, #32]
 8000a20:	4413      	add	r3, r2
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b52      	ldr	r3, [pc, #328]	; (8000b70 <parseVTG+0x208>)
 8000a28:	fb03 f202 	mul.w	r2, r3, r2
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a32:	ee07 3a90 	vmov	s15, r3
 8000a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a3a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a42:	edc7 7a04 	vstr	s15, [r7, #16]
            multiplier *= 10;
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4413      	add	r3, r2
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	61bb      	str	r3, [r7, #24]
    for (i = 1; i < 6; i++) //this code first generates an 5 digit decimal number
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	3301      	adds	r3, #1
 8000a56:	623b      	str	r3, [r7, #32]
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	2b05      	cmp	r3, #5
 8000a5c:	ddd5      	ble.n	8000a0a <parseVTG+0xa2>
        }
    }
    decimalPoint = decimalPoint - 2;
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3b02      	subs	r3, #2
 8000a62:	617b      	str	r3, [r7, #20]
    multiplier = 10000;
 8000a64:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a68:	61bb      	str	r3, [r7, #24]
    while (decimalPoint > 0) //then divdes it according to the placement of the decimal
 8000a6a:	e00a      	b.n	8000a82 <parseVTG+0x11a>
    {
        multiplier = multiplier / 10;
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	4a41      	ldr	r2, [pc, #260]	; (8000b74 <parseVTG+0x20c>)
 8000a70:	fb82 1203 	smull	r1, r2, r2, r3
 8000a74:	1092      	asrs	r2, r2, #2
 8000a76:	17db      	asrs	r3, r3, #31
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	61bb      	str	r3, [r7, #24]
        decimalPoint--;
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
    while (decimalPoint > 0) //then divdes it according to the placement of the decimal
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	dcf1      	bgt.n	8000a6c <parseVTG+0x104>
    }
    gps_data.heading = (int)(tHeading / multiplier);
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	ee07 3a90 	vmov	s15, r3
 8000a8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a92:	edd7 6a04 	vldr	s13, [r7, #16]
 8000a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a9e:	ee17 3a90 	vmov	r3, s15
 8000aa2:	b21a      	sxth	r2, r3
 8000aa4:	4b31      	ldr	r3, [pc, #196]	; (8000b6c <parseVTG+0x204>)
 8000aa6:	839a      	strh	r2, [r3, #28]

    //	//calculate speed - tricky because of unknown 1-3 digits preceeding the decimal
    i = 1;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	623b      	str	r3, [r7, #32]
    multiplier = 10;
 8000aac:	230a      	movs	r3, #10
 8000aae:	61bb      	str	r3, [r7, #24]
    decimalPoint = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
    gps_data.groundSpeed = 0;
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <parseVTG+0x204>)
 8000ab6:	f04f 0200 	mov.w	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
    for (i = 1; i < 7; i++) //this code first generates an 6 digit decimal number
 8000abc:	2301      	movs	r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
 8000ac0:	e028      	b.n	8000b14 <parseVTG+0x1ac>
    {
        if (rawGroundSpeed[i] == 0x10)//check for decimal point
 8000ac2:	4a29      	ldr	r2, [pc, #164]	; (8000b68 <parseVTG+0x200>)
 8000ac4:	6a3b      	ldr	r3, [r7, #32]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b10      	cmp	r3, #16
 8000acc:	d102      	bne.n	8000ad4 <parseVTG+0x16c>
        {
            decimalPoint = i;
 8000ace:	6a3b      	ldr	r3, [r7, #32]
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	e01c      	b.n	8000b0e <parseVTG+0x1a6>
        } else {
            gps_data.groundSpeed += (float) (rawGroundSpeed[i]*1000000 / multiplier);
 8000ad4:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <parseVTG+0x204>)
 8000ad6:	ed93 7a05 	vldr	s14, [r3, #20]
 8000ada:	4a23      	ldr	r2, [pc, #140]	; (8000b68 <parseVTG+0x200>)
 8000adc:	6a3b      	ldr	r3, [r7, #32]
 8000ade:	4413      	add	r3, r2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <parseVTG+0x210>)
 8000ae6:	fb03 f202 	mul.w	r2, r3, r2
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	fb92 f3f3 	sdiv	r3, r2, r3
 8000af0:	ee07 3a90 	vmov	s15, r3
 8000af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <parseVTG+0x204>)
 8000afe:	edc3 7a05 	vstr	s15, [r3, #20]
            multiplier = multiplier * 10;
 8000b02:	69ba      	ldr	r2, [r7, #24]
 8000b04:	4613      	mov	r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	4413      	add	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	61bb      	str	r3, [r7, #24]
    for (i = 1; i < 7; i++) //this code first generates an 6 digit decimal number
 8000b0e:	6a3b      	ldr	r3, [r7, #32]
 8000b10:	3301      	adds	r3, #1
 8000b12:	623b      	str	r3, [r7, #32]
 8000b14:	6a3b      	ldr	r3, [r7, #32]
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	ddd3      	ble.n	8000ac2 <parseVTG+0x15a>
        }
    }
    decimalPoint = decimalPoint - 2;
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3b02      	subs	r3, #2
 8000b1e:	617b      	str	r3, [r7, #20]
    multiplier = 100000;
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <parseVTG+0x208>)
 8000b22:	61bb      	str	r3, [r7, #24]
    while (decimalPoint > 0) //then divdes it according to the placement of the decimal
 8000b24:	e00a      	b.n	8000b3c <parseVTG+0x1d4>
    {
        multiplier = multiplier / 10;
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <parseVTG+0x20c>)
 8000b2a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b2e:	1092      	asrs	r2, r2, #2
 8000b30:	17db      	asrs	r3, r3, #31
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	61bb      	str	r3, [r7, #24]
        decimalPoint--;
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	617b      	str	r3, [r7, #20]
    while (decimalPoint > 0) //then divdes it according to the placement of the decimal
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	dcf1      	bgt.n	8000b26 <parseVTG+0x1be>
    }
    gps_data.groundSpeed = gps_data.groundSpeed / multiplier;
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <parseVTG+0x204>)
 8000b44:	edd3 6a05 	vldr	s13, [r3, #20]
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	ee07 3a90 	vmov	s15, r3
 8000b4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <parseVTG+0x204>)
 8000b58:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	; 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000ccc 	.word	0x20000ccc
 8000b68:	20000cd4 	.word	0x20000cd4
 8000b6c:	20000d10 	.word	0x20000d10
 8000b70:	000186a0 	.word	0x000186a0
 8000b74:	66666667 	.word	0x66666667
 8000b78:	000f4240 	.word	0x000f4240
 8000b7c:	00000000 	.word	0x00000000

08000b80 <parseGGA>:
/**
 * Parses a GGA type NEMA string and modifies the GPS data struct with the applicable
 * fields
 * @param data
 */
static void parseGGA(uint8_t* data){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

    int comma = 0; //comma counting so that we know what header we're parsing for
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
    int i = 0; //index for the current position of the field value
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
    int j = 0; //7th uint8_tacter is where data will start. index for the byte index in the counter
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
    static uint8_t rawAltitude[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    static uint8_t latitudeNS = 0;
    static uint8_t longitudeEW = 0;
    static uint8_t positionFix = 0;

    while (data[j] != '*') {
 8000b94:	e087      	b.n	8000ca6 <parseGGA+0x126>
        uint8_t numData = asciiToHex(data[j]);
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fce5 	bl	800056e <asciiToHex>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	73fb      	strb	r3, [r7, #15]

        if (data[j] == ',') {
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b2c      	cmp	r3, #44	; 0x2c
 8000bb2:	d104      	bne.n	8000bbe <parseGGA+0x3e>
            comma++;
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
            i = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
        }

        if ((comma == 1) && (i != 0)) {
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d108      	bne.n	8000bd6 <parseGGA+0x56>
 8000bc4:	6a3b      	ldr	r3, [r7, #32]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d005      	beq.n	8000bd6 <parseGGA+0x56>
            rawTime[i] = numData;
 8000bca:	4a27      	ldr	r2, [pc, #156]	; (8000c68 <parseGGA+0xe8>)
 8000bcc:	6a3b      	ldr	r3, [r7, #32]
 8000bce:	4413      	add	r3, r2
 8000bd0:	7bfa      	ldrb	r2, [r7, #15]
 8000bd2:	701a      	strb	r2, [r3, #0]
 8000bd4:	e061      	b.n	8000c9a <parseGGA+0x11a>
        } else if ((comma == 2) && (i != 0)) {
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d108      	bne.n	8000bee <parseGGA+0x6e>
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d005      	beq.n	8000bee <parseGGA+0x6e>
            rawLatitude[i] = numData;
 8000be2:	4a22      	ldr	r2, [pc, #136]	; (8000c6c <parseGGA+0xec>)
 8000be4:	6a3b      	ldr	r3, [r7, #32]
 8000be6:	4413      	add	r3, r2
 8000be8:	7bfa      	ldrb	r2, [r7, #15]
 8000bea:	701a      	strb	r2, [r3, #0]
 8000bec:	e055      	b.n	8000c9a <parseGGA+0x11a>

        } else if ((comma == 3) && (i != 0)) {
 8000bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf0:	2b03      	cmp	r3, #3
 8000bf2:	d109      	bne.n	8000c08 <parseGGA+0x88>
 8000bf4:	6a3b      	ldr	r3, [r7, #32]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d006      	beq.n	8000c08 <parseGGA+0x88>
            latitudeNS = data[j];
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	4413      	add	r3, r2
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <parseGGA+0xf0>)
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e048      	b.n	8000c9a <parseGGA+0x11a>

        } else if ((comma == 4) && (i != 0)) {
 8000c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	d108      	bne.n	8000c20 <parseGGA+0xa0>
 8000c0e:	6a3b      	ldr	r3, [r7, #32]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d005      	beq.n	8000c20 <parseGGA+0xa0>
            rawLongitude[i] = numData;
 8000c14:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <parseGGA+0xf4>)
 8000c16:	6a3b      	ldr	r3, [r7, #32]
 8000c18:	4413      	add	r3, r2
 8000c1a:	7bfa      	ldrb	r2, [r7, #15]
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	e03c      	b.n	8000c9a <parseGGA+0x11a>

        } else if ((comma == 5) && (i != 0)) {
 8000c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c22:	2b05      	cmp	r3, #5
 8000c24:	d109      	bne.n	8000c3a <parseGGA+0xba>
 8000c26:	6a3b      	ldr	r3, [r7, #32]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d006      	beq.n	8000c3a <parseGGA+0xba>
            longitudeEW = data[j];
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	781a      	ldrb	r2, [r3, #0]
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <parseGGA+0xf8>)
 8000c36:	701a      	strb	r2, [r3, #0]
 8000c38:	e02f      	b.n	8000c9a <parseGGA+0x11a>

        } else if ((comma == 6) && (i != 0)) {
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3c:	2b06      	cmp	r3, #6
 8000c3e:	d106      	bne.n	8000c4e <parseGGA+0xce>
 8000c40:	6a3b      	ldr	r3, [r7, #32]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d003      	beq.n	8000c4e <parseGGA+0xce>
            positionFix = numData;
 8000c46:	4a0d      	ldr	r2, [pc, #52]	; (8000c7c <parseGGA+0xfc>)
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	7013      	strb	r3, [r2, #0]
 8000c4c:	e025      	b.n	8000c9a <parseGGA+0x11a>

        } else if ((comma == 7) && (i != 0)) {
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	2b07      	cmp	r3, #7
 8000c52:	d117      	bne.n	8000c84 <parseGGA+0x104>
 8000c54:	6a3b      	ldr	r3, [r7, #32]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d014      	beq.n	8000c84 <parseGGA+0x104>
            rawSatellites[i] = numData;
 8000c5a:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <parseGGA+0x100>)
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
 8000c5e:	4413      	add	r3, r2
 8000c60:	7bfa      	ldrb	r2, [r7, #15]
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	e019      	b.n	8000c9a <parseGGA+0x11a>
 8000c66:	bf00      	nop
 8000c68:	20000cdc 	.word	0x20000cdc
 8000c6c:	20000ce8 	.word	0x20000ce8
 8000c70:	20000cf2 	.word	0x20000cf2
 8000c74:	20000cf4 	.word	0x20000cf4
 8000c78:	20000cff 	.word	0x20000cff
 8000c7c:	20000d00 	.word	0x20000d00
 8000c80:	20000014 	.word	0x20000014
        } else  if ((comma == 9) && (i != 0)) {
 8000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c86:	2b09      	cmp	r3, #9
 8000c88:	d107      	bne.n	8000c9a <parseGGA+0x11a>
 8000c8a:	6a3b      	ldr	r3, [r7, #32]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d004      	beq.n	8000c9a <parseGGA+0x11a>
            rawAltitude[i] = numData;
 8000c90:	4acd      	ldr	r2, [pc, #820]	; (8000fc8 <parseGGA+0x448>)
 8000c92:	6a3b      	ldr	r3, [r7, #32]
 8000c94:	4413      	add	r3, r2
 8000c96:	7bfa      	ldrb	r2, [r7, #15]
 8000c98:	701a      	strb	r2, [r3, #0]
        }

        i++;
 8000c9a:	6a3b      	ldr	r3, [r7, #32]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	623b      	str	r3, [r7, #32]
        j++;
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	61fb      	str	r3, [r7, #28]
    while (data[j] != '*') {
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	4413      	add	r3, r2
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b2a      	cmp	r3, #42	; 0x2a
 8000cb0:	f47f af71 	bne.w	8000b96 <parseGGA+0x16>
    }

    //now we've got all the valid data placed in our buffers. Modify gps data struct to match

    //calculate time
    gps_data.utcTime = (float) rawTime[1] * 100000;
 8000cb4:	4bc5      	ldr	r3, [pc, #788]	; (8000fcc <parseGGA+0x44c>)
 8000cb6:	785b      	ldrb	r3, [r3, #1]
 8000cb8:	ee07 3a90 	vmov	s15, r3
 8000cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cc0:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8000fd0 <parseGGA+0x450>
 8000cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cc8:	4bc2      	ldr	r3, [pc, #776]	; (8000fd4 <parseGGA+0x454>)
 8000cca:	edc3 7a04 	vstr	s15, [r3, #16]
    gps_data.utcTime += (float) rawTime[2] * 10000;
 8000cce:	4bc1      	ldr	r3, [pc, #772]	; (8000fd4 <parseGGA+0x454>)
 8000cd0:	ed93 7a04 	vldr	s14, [r3, #16]
 8000cd4:	4bbd      	ldr	r3, [pc, #756]	; (8000fcc <parseGGA+0x44c>)
 8000cd6:	789b      	ldrb	r3, [r3, #2]
 8000cd8:	ee07 3a90 	vmov	s15, r3
 8000cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ce0:	eddf 6abd 	vldr	s13, [pc, #756]	; 8000fd8 <parseGGA+0x458>
 8000ce4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cec:	4bb9      	ldr	r3, [pc, #740]	; (8000fd4 <parseGGA+0x454>)
 8000cee:	edc3 7a04 	vstr	s15, [r3, #16]
    gps_data.utcTime += (float) rawTime[3] * 1000;
 8000cf2:	4bb8      	ldr	r3, [pc, #736]	; (8000fd4 <parseGGA+0x454>)
 8000cf4:	ed93 7a04 	vldr	s14, [r3, #16]
 8000cf8:	4bb4      	ldr	r3, [pc, #720]	; (8000fcc <parseGGA+0x44c>)
 8000cfa:	78db      	ldrb	r3, [r3, #3]
 8000cfc:	ee07 3a90 	vmov	s15, r3
 8000d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d04:	eddf 6ab5 	vldr	s13, [pc, #724]	; 8000fdc <parseGGA+0x45c>
 8000d08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d10:	4bb0      	ldr	r3, [pc, #704]	; (8000fd4 <parseGGA+0x454>)
 8000d12:	edc3 7a04 	vstr	s15, [r3, #16]
    gps_data.utcTime += (float) rawTime[4] * 100;
 8000d16:	4baf      	ldr	r3, [pc, #700]	; (8000fd4 <parseGGA+0x454>)
 8000d18:	ed93 7a04 	vldr	s14, [r3, #16]
 8000d1c:	4bab      	ldr	r3, [pc, #684]	; (8000fcc <parseGGA+0x44c>)
 8000d1e:	791b      	ldrb	r3, [r3, #4]
 8000d20:	ee07 3a90 	vmov	s15, r3
 8000d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d28:	eddf 6aad 	vldr	s13, [pc, #692]	; 8000fe0 <parseGGA+0x460>
 8000d2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d34:	4ba7      	ldr	r3, [pc, #668]	; (8000fd4 <parseGGA+0x454>)
 8000d36:	edc3 7a04 	vstr	s15, [r3, #16]
    gps_data.utcTime += (float) rawTime[5] * 10;
 8000d3a:	4ba6      	ldr	r3, [pc, #664]	; (8000fd4 <parseGGA+0x454>)
 8000d3c:	ed93 7a04 	vldr	s14, [r3, #16]
 8000d40:	4ba2      	ldr	r3, [pc, #648]	; (8000fcc <parseGGA+0x44c>)
 8000d42:	795b      	ldrb	r3, [r3, #5]
 8000d44:	ee07 3a90 	vmov	s15, r3
 8000d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d4c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000d50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d58:	4b9e      	ldr	r3, [pc, #632]	; (8000fd4 <parseGGA+0x454>)
 8000d5a:	edc3 7a04 	vstr	s15, [r3, #16]
    gps_data.utcTime += (float) rawTime[6] * 1;
 8000d5e:	4b9d      	ldr	r3, [pc, #628]	; (8000fd4 <parseGGA+0x454>)
 8000d60:	ed93 7a04 	vldr	s14, [r3, #16]
 8000d64:	4b99      	ldr	r3, [pc, #612]	; (8000fcc <parseGGA+0x44c>)
 8000d66:	799b      	ldrb	r3, [r3, #6]
 8000d68:	ee07 3a90 	vmov	s15, r3
 8000d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d74:	4b97      	ldr	r3, [pc, #604]	; (8000fd4 <parseGGA+0x454>)
 8000d76:	edc3 7a04 	vstr	s15, [r3, #16]
    //Decimal Point
    gps_data.utcTime += (float) rawTime[8] * 0.1;
 8000d7a:	4b96      	ldr	r3, [pc, #600]	; (8000fd4 <parseGGA+0x454>)
 8000d7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d80:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000d84:	4b91      	ldr	r3, [pc, #580]	; (8000fcc <parseGGA+0x44c>)
 8000d86:	7a1b      	ldrb	r3, [r3, #8]
 8000d88:	ee07 3a90 	vmov	s15, r3
 8000d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d94:	ed9f 5b82 	vldr	d5, [pc, #520]	; 8000fa0 <parseGGA+0x420>
 8000d98:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000d9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000da0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000da4:	4b8b      	ldr	r3, [pc, #556]	; (8000fd4 <parseGGA+0x454>)
 8000da6:	edc3 7a04 	vstr	s15, [r3, #16]
    gps_data.utcTime += (float) rawTime[9] * 0.01;
 8000daa:	4b8a      	ldr	r3, [pc, #552]	; (8000fd4 <parseGGA+0x454>)
 8000dac:	edd3 7a04 	vldr	s15, [r3, #16]
 8000db0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000db4:	4b85      	ldr	r3, [pc, #532]	; (8000fcc <parseGGA+0x44c>)
 8000db6:	7a5b      	ldrb	r3, [r3, #9]
 8000db8:	ee07 3a90 	vmov	s15, r3
 8000dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dc0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dc4:	ed9f 5b78 	vldr	d5, [pc, #480]	; 8000fa8 <parseGGA+0x428>
 8000dc8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000dcc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000dd0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000dd4:	4b7f      	ldr	r3, [pc, #508]	; (8000fd4 <parseGGA+0x454>)
 8000dd6:	edc3 7a04 	vstr	s15, [r3, #16]
    gps_data.utcTime += (float) rawTime[10] * 0.001;
 8000dda:	4b7e      	ldr	r3, [pc, #504]	; (8000fd4 <parseGGA+0x454>)
 8000ddc:	edd3 7a04 	vldr	s15, [r3, #16]
 8000de0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000de4:	4b79      	ldr	r3, [pc, #484]	; (8000fcc <parseGGA+0x44c>)
 8000de6:	7a9b      	ldrb	r3, [r3, #10]
 8000de8:	ee07 3a90 	vmov	s15, r3
 8000dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000df4:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 8000fb0 <parseGGA+0x430>
 8000df8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000dfc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e00:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e04:	4b73      	ldr	r3, [pc, #460]	; (8000fd4 <parseGGA+0x454>)
 8000e06:	edc3 7a04 	vstr	s15, [r3, #16]

    //calculate latitude
    gps_data.latitude = rawLatitude[3]*10.0;
 8000e0a:	4b76      	ldr	r3, [pc, #472]	; (8000fe4 <parseGGA+0x464>)
 8000e0c:	78db      	ldrb	r3, [r3, #3]
 8000e0e:	ee07 3a90 	vmov	s15, r3
 8000e12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e16:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000e1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e1e:	4b6d      	ldr	r3, [pc, #436]	; (8000fd4 <parseGGA+0x454>)
 8000e20:	ed83 7b00 	vstr	d7, [r3]
    gps_data.latitude += rawLatitude[4]*1.0;
 8000e24:	4b6b      	ldr	r3, [pc, #428]	; (8000fd4 <parseGGA+0x454>)
 8000e26:	ed93 6b00 	vldr	d6, [r3]
 8000e2a:	4b6e      	ldr	r3, [pc, #440]	; (8000fe4 <parseGGA+0x464>)
 8000e2c:	791b      	ldrb	r3, [r3, #4]
 8000e2e:	ee07 3a90 	vmov	s15, r3
 8000e32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e36:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e3a:	4b66      	ldr	r3, [pc, #408]	; (8000fd4 <parseGGA+0x454>)
 8000e3c:	ed83 7b00 	vstr	d7, [r3]
    gps_data.latitude += rawLatitude[6]*0.1;
 8000e40:	4b64      	ldr	r3, [pc, #400]	; (8000fd4 <parseGGA+0x454>)
 8000e42:	ed93 6b00 	vldr	d6, [r3]
 8000e46:	4b67      	ldr	r3, [pc, #412]	; (8000fe4 <parseGGA+0x464>)
 8000e48:	799b      	ldrb	r3, [r3, #6]
 8000e4a:	ee07 3a90 	vmov	s15, r3
 8000e4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e52:	ed9f 5b53 	vldr	d5, [pc, #332]	; 8000fa0 <parseGGA+0x420>
 8000e56:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e5a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e5e:	4b5d      	ldr	r3, [pc, #372]	; (8000fd4 <parseGGA+0x454>)
 8000e60:	ed83 7b00 	vstr	d7, [r3]
    gps_data.latitude += rawLatitude[7]*0.01;
 8000e64:	4b5b      	ldr	r3, [pc, #364]	; (8000fd4 <parseGGA+0x454>)
 8000e66:	ed93 6b00 	vldr	d6, [r3]
 8000e6a:	4b5e      	ldr	r3, [pc, #376]	; (8000fe4 <parseGGA+0x464>)
 8000e6c:	79db      	ldrb	r3, [r3, #7]
 8000e6e:	ee07 3a90 	vmov	s15, r3
 8000e72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e76:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8000fa8 <parseGGA+0x428>
 8000e7a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e7e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e82:	4b54      	ldr	r3, [pc, #336]	; (8000fd4 <parseGGA+0x454>)
 8000e84:	ed83 7b00 	vstr	d7, [r3]
    gps_data.latitude += rawLatitude[8]*0.001;
 8000e88:	4b52      	ldr	r3, [pc, #328]	; (8000fd4 <parseGGA+0x454>)
 8000e8a:	ed93 6b00 	vldr	d6, [r3]
 8000e8e:	4b55      	ldr	r3, [pc, #340]	; (8000fe4 <parseGGA+0x464>)
 8000e90:	7a1b      	ldrb	r3, [r3, #8]
 8000e92:	ee07 3a90 	vmov	s15, r3
 8000e96:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e9a:	ed9f 5b45 	vldr	d5, [pc, #276]	; 8000fb0 <parseGGA+0x430>
 8000e9e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000ea2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ea6:	4b4b      	ldr	r3, [pc, #300]	; (8000fd4 <parseGGA+0x454>)
 8000ea8:	ed83 7b00 	vstr	d7, [r3]
    gps_data.latitude += rawLatitude[9]*0.0001;
 8000eac:	4b49      	ldr	r3, [pc, #292]	; (8000fd4 <parseGGA+0x454>)
 8000eae:	ed93 6b00 	vldr	d6, [r3]
 8000eb2:	4b4c      	ldr	r3, [pc, #304]	; (8000fe4 <parseGGA+0x464>)
 8000eb4:	7a5b      	ldrb	r3, [r3, #9]
 8000eb6:	ee07 3a90 	vmov	s15, r3
 8000eba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ebe:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8000fb8 <parseGGA+0x438>
 8000ec2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000ec6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000eca:	4b42      	ldr	r3, [pc, #264]	; (8000fd4 <parseGGA+0x454>)
 8000ecc:	ed83 7b00 	vstr	d7, [r3]
    gps_data.latitude /= 60;  //Converts from dd.mmmmmm to decimal degrees. (60 minutes in a degree)
 8000ed0:	4b40      	ldr	r3, [pc, #256]	; (8000fd4 <parseGGA+0x454>)
 8000ed2:	ed93 6b00 	vldr	d6, [r3]
 8000ed6:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8000fc0 <parseGGA+0x440>
 8000eda:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ede:	4b3d      	ldr	r3, [pc, #244]	; (8000fd4 <parseGGA+0x454>)
 8000ee0:	ed83 7b00 	vstr	d7, [r3]
    //Then add the degrees (ranges from -90 to +90)
    gps_data.latitude += rawLatitude[1]*10.0;
 8000ee4:	4b3b      	ldr	r3, [pc, #236]	; (8000fd4 <parseGGA+0x454>)
 8000ee6:	ed93 6b00 	vldr	d6, [r3]
 8000eea:	4b3e      	ldr	r3, [pc, #248]	; (8000fe4 <parseGGA+0x464>)
 8000eec:	785b      	ldrb	r3, [r3, #1]
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ef6:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000efa:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000efe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f02:	4b34      	ldr	r3, [pc, #208]	; (8000fd4 <parseGGA+0x454>)
 8000f04:	ed83 7b00 	vstr	d7, [r3]
    gps_data.latitude += rawLatitude[2]*1.0;
 8000f08:	4b32      	ldr	r3, [pc, #200]	; (8000fd4 <parseGGA+0x454>)
 8000f0a:	ed93 6b00 	vldr	d6, [r3]
 8000f0e:	4b35      	ldr	r3, [pc, #212]	; (8000fe4 <parseGGA+0x464>)
 8000f10:	789b      	ldrb	r3, [r3, #2]
 8000f12:	ee07 3a90 	vmov	s15, r3
 8000f16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f1a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <parseGGA+0x454>)
 8000f20:	ed83 7b00 	vstr	d7, [r3]

    if (latitudeNS == 'S'){
 8000f24:	4b30      	ldr	r3, [pc, #192]	; (8000fe8 <parseGGA+0x468>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b53      	cmp	r3, #83	; 0x53
 8000f2a:	d107      	bne.n	8000f3c <parseGGA+0x3bc>
        gps_data.latitude *= -1;
 8000f2c:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <parseGGA+0x454>)
 8000f2e:	ed93 7b00 	vldr	d7, [r3]
 8000f32:	eeb1 7b47 	vneg.f64	d7, d7
 8000f36:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <parseGGA+0x454>)
 8000f38:	ed83 7b00 	vstr	d7, [r3]
    }

    //calculate longitude
    gps_data.longitude = rawLongitude[4]*10.0;
 8000f3c:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <parseGGA+0x46c>)
 8000f3e:	791b      	ldrb	r3, [r3, #4]
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f48:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000f4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f50:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <parseGGA+0x454>)
 8000f52:	ed83 7b02 	vstr	d7, [r3, #8]
    gps_data.longitude += rawLongitude[5]*1.0;
 8000f56:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <parseGGA+0x454>)
 8000f58:	ed93 6b02 	vldr	d6, [r3, #8]
 8000f5c:	4b23      	ldr	r3, [pc, #140]	; (8000fec <parseGGA+0x46c>)
 8000f5e:	795b      	ldrb	r3, [r3, #5]
 8000f60:	ee07 3a90 	vmov	s15, r3
 8000f64:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f68:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <parseGGA+0x454>)
 8000f6e:	ed83 7b02 	vstr	d7, [r3, #8]
    gps_data.longitude += rawLongitude[7]*0.1;
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <parseGGA+0x454>)
 8000f74:	ed93 6b02 	vldr	d6, [r3, #8]
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <parseGGA+0x46c>)
 8000f7a:	79db      	ldrb	r3, [r3, #7]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f84:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8000fa0 <parseGGA+0x420>
 8000f88:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f8c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f90:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <parseGGA+0x454>)
 8000f92:	ed83 7b02 	vstr	d7, [r3, #8]
    gps_data.longitude += rawLongitude[8]*0.01;
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <parseGGA+0x454>)
 8000f98:	ed93 6b02 	vldr	d6, [r3, #8]
 8000f9c:	e028      	b.n	8000ff0 <parseGGA+0x470>
 8000f9e:	bf00      	nop
 8000fa0:	9999999a 	.word	0x9999999a
 8000fa4:	3fb99999 	.word	0x3fb99999
 8000fa8:	47ae147b 	.word	0x47ae147b
 8000fac:	3f847ae1 	.word	0x3f847ae1
 8000fb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8000fb4:	3f50624d 	.word	0x3f50624d
 8000fb8:	eb1c432d 	.word	0xeb1c432d
 8000fbc:	3f1a36e2 	.word	0x3f1a36e2
 8000fc0:	00000000 	.word	0x00000000
 8000fc4:	404e0000 	.word	0x404e0000
 8000fc8:	20000d04 	.word	0x20000d04
 8000fcc:	20000cdc 	.word	0x20000cdc
 8000fd0:	47c35000 	.word	0x47c35000
 8000fd4:	20000d10 	.word	0x20000d10
 8000fd8:	461c4000 	.word	0x461c4000
 8000fdc:	447a0000 	.word	0x447a0000
 8000fe0:	42c80000 	.word	0x42c80000
 8000fe4:	20000ce8 	.word	0x20000ce8
 8000fe8:	20000cf2 	.word	0x20000cf2
 8000fec:	20000cf4 	.word	0x20000cf4
 8000ff0:	4b83      	ldr	r3, [pc, #524]	; (8001200 <parseGGA+0x680>)
 8000ff2:	7a1b      	ldrb	r3, [r3, #8]
 8000ff4:	ee07 3a90 	vmov	s15, r3
 8000ff8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ffc:	ed9f 5b76 	vldr	d5, [pc, #472]	; 80011d8 <parseGGA+0x658>
 8001000:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001004:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001008:	4b7e      	ldr	r3, [pc, #504]	; (8001204 <parseGGA+0x684>)
 800100a:	ed83 7b02 	vstr	d7, [r3, #8]
    gps_data.longitude += rawLongitude[9]*0.001;
 800100e:	4b7d      	ldr	r3, [pc, #500]	; (8001204 <parseGGA+0x684>)
 8001010:	ed93 6b02 	vldr	d6, [r3, #8]
 8001014:	4b7a      	ldr	r3, [pc, #488]	; (8001200 <parseGGA+0x680>)
 8001016:	7a5b      	ldrb	r3, [r3, #9]
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001020:	ed9f 5b6f 	vldr	d5, [pc, #444]	; 80011e0 <parseGGA+0x660>
 8001024:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001028:	ee36 7b07 	vadd.f64	d7, d6, d7
 800102c:	4b75      	ldr	r3, [pc, #468]	; (8001204 <parseGGA+0x684>)
 800102e:	ed83 7b02 	vstr	d7, [r3, #8]
    gps_data.longitude += rawLongitude[10]*0.0001;
 8001032:	4b74      	ldr	r3, [pc, #464]	; (8001204 <parseGGA+0x684>)
 8001034:	ed93 6b02 	vldr	d6, [r3, #8]
 8001038:	4b71      	ldr	r3, [pc, #452]	; (8001200 <parseGGA+0x680>)
 800103a:	7a9b      	ldrb	r3, [r3, #10]
 800103c:	ee07 3a90 	vmov	s15, r3
 8001040:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001044:	ed9f 5b68 	vldr	d5, [pc, #416]	; 80011e8 <parseGGA+0x668>
 8001048:	ee27 7b05 	vmul.f64	d7, d7, d5
 800104c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001050:	4b6c      	ldr	r3, [pc, #432]	; (8001204 <parseGGA+0x684>)
 8001052:	ed83 7b02 	vstr	d7, [r3, #8]
    gps_data.longitude /= 60;  //Converts from ddd.mmmmmm to decimal degrees. (60 minutes in a degree)
 8001056:	4b6b      	ldr	r3, [pc, #428]	; (8001204 <parseGGA+0x684>)
 8001058:	ed93 6b02 	vldr	d6, [r3, #8]
 800105c:	ed9f 5b64 	vldr	d5, [pc, #400]	; 80011f0 <parseGGA+0x670>
 8001060:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001064:	4b67      	ldr	r3, [pc, #412]	; (8001204 <parseGGA+0x684>)
 8001066:	ed83 7b02 	vstr	d7, [r3, #8]
    //Then add the degrees (ranges from -180 to +180)
    gps_data.longitude += rawLongitude[1]*100.0;
 800106a:	4b66      	ldr	r3, [pc, #408]	; (8001204 <parseGGA+0x684>)
 800106c:	ed93 6b02 	vldr	d6, [r3, #8]
 8001070:	4b63      	ldr	r3, [pc, #396]	; (8001200 <parseGGA+0x680>)
 8001072:	785b      	ldrb	r3, [r3, #1]
 8001074:	ee07 3a90 	vmov	s15, r3
 8001078:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800107c:	ed9f 5b5e 	vldr	d5, [pc, #376]	; 80011f8 <parseGGA+0x678>
 8001080:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001084:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001088:	4b5e      	ldr	r3, [pc, #376]	; (8001204 <parseGGA+0x684>)
 800108a:	ed83 7b02 	vstr	d7, [r3, #8]
    gps_data.longitude += rawLongitude[2]*10.0;
 800108e:	4b5d      	ldr	r3, [pc, #372]	; (8001204 <parseGGA+0x684>)
 8001090:	ed93 6b02 	vldr	d6, [r3, #8]
 8001094:	4b5a      	ldr	r3, [pc, #360]	; (8001200 <parseGGA+0x680>)
 8001096:	789b      	ldrb	r3, [r3, #2]
 8001098:	ee07 3a90 	vmov	s15, r3
 800109c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010a0:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80010a4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80010a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010ac:	4b55      	ldr	r3, [pc, #340]	; (8001204 <parseGGA+0x684>)
 80010ae:	ed83 7b02 	vstr	d7, [r3, #8]
    gps_data.longitude += rawLongitude[3]*1.0;
 80010b2:	4b54      	ldr	r3, [pc, #336]	; (8001204 <parseGGA+0x684>)
 80010b4:	ed93 6b02 	vldr	d6, [r3, #8]
 80010b8:	4b51      	ldr	r3, [pc, #324]	; (8001200 <parseGGA+0x680>)
 80010ba:	78db      	ldrb	r3, [r3, #3]
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010c8:	4b4e      	ldr	r3, [pc, #312]	; (8001204 <parseGGA+0x684>)
 80010ca:	ed83 7b02 	vstr	d7, [r3, #8]

    if (longitudeEW == 'W'){
 80010ce:	4b4e      	ldr	r3, [pc, #312]	; (8001208 <parseGGA+0x688>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b57      	cmp	r3, #87	; 0x57
 80010d4:	d107      	bne.n	80010e6 <parseGGA+0x566>
        gps_data.longitude *= -1;
 80010d6:	4b4b      	ldr	r3, [pc, #300]	; (8001204 <parseGGA+0x684>)
 80010d8:	ed93 7b02 	vldr	d7, [r3, #8]
 80010dc:	eeb1 7b47 	vneg.f64	d7, d7
 80010e0:	4b48      	ldr	r3, [pc, #288]	; (8001204 <parseGGA+0x684>)
 80010e2:	ed83 7b02 	vstr	d7, [r3, #8]
    }

    //calculate satellites
    if (rawSatellites[2] == 10) gps_data.numSatellites = rawSatellites[1];
 80010e6:	4b49      	ldr	r3, [pc, #292]	; (800120c <parseGGA+0x68c>)
 80010e8:	789b      	ldrb	r3, [r3, #2]
 80010ea:	2b0a      	cmp	r3, #10
 80010ec:	d104      	bne.n	80010f8 <parseGGA+0x578>
 80010ee:	4b47      	ldr	r3, [pc, #284]	; (800120c <parseGGA+0x68c>)
 80010f0:	785a      	ldrb	r2, [r3, #1]
 80010f2:	4b44      	ldr	r3, [pc, #272]	; (8001204 <parseGGA+0x684>)
 80010f4:	779a      	strb	r2, [r3, #30]
 80010f6:	e00c      	b.n	8001112 <parseGGA+0x592>
    else gps_data.numSatellites = rawSatellites[1]*10 + rawSatellites[2];
 80010f8:	4b44      	ldr	r3, [pc, #272]	; (800120c <parseGGA+0x68c>)
 80010fa:	785b      	ldrb	r3, [r3, #1]
 80010fc:	461a      	mov	r2, r3
 80010fe:	0092      	lsls	r2, r2, #2
 8001100:	4413      	add	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b41      	ldr	r3, [pc, #260]	; (800120c <parseGGA+0x68c>)
 8001108:	789b      	ldrb	r3, [r3, #2]
 800110a:	4413      	add	r3, r2
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b3d      	ldr	r3, [pc, #244]	; (8001204 <parseGGA+0x684>)
 8001110:	779a      	strb	r2, [r3, #30]

    //calculate altitude - tricky because of unknown 1-3 digits preceeding the decimal
    i = 1;
 8001112:	2301      	movs	r3, #1
 8001114:	623b      	str	r3, [r7, #32]
    long int multiplier = 10;
 8001116:	230a      	movs	r3, #10
 8001118:	61bb      	str	r3, [r7, #24]
    int decimalPoint = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
    gps_data.altitude = 0;
 800111e:	4b39      	ldr	r3, [pc, #228]	; (8001204 <parseGGA+0x684>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
    float tAltitude = 0;
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
    for (i = 1; i < 8; i++) //this code first generates an 6 digit decimal number
 800112a:	2301      	movs	r3, #1
 800112c:	623b      	str	r3, [r7, #32]
 800112e:	e026      	b.n	800117e <parseGGA+0x5fe>
    {
        if (rawAltitude[i] == 0x10) //check for decimal point
 8001130:	4a37      	ldr	r2, [pc, #220]	; (8001210 <parseGGA+0x690>)
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	4413      	add	r3, r2
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b10      	cmp	r3, #16
 800113a:	d102      	bne.n	8001142 <parseGGA+0x5c2>
        {
            decimalPoint = i;
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	e01a      	b.n	8001178 <parseGGA+0x5f8>
        } else {
            tAltitude += (float) (rawAltitude[i]*1000000 / multiplier);
 8001142:	4a33      	ldr	r2, [pc, #204]	; (8001210 <parseGGA+0x690>)
 8001144:	6a3b      	ldr	r3, [r7, #32]
 8001146:	4413      	add	r3, r2
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	4b31      	ldr	r3, [pc, #196]	; (8001214 <parseGGA+0x694>)
 800114e:	fb03 f202 	mul.w	r2, r3, r2
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	fb92 f3f3 	sdiv	r3, r2, r3
 8001158:	ee07 3a90 	vmov	s15, r3
 800115c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001160:	ed97 7a04 	vldr	s14, [r7, #16]
 8001164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001168:	edc7 7a04 	vstr	s15, [r7, #16]
            multiplier *= 10;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	61bb      	str	r3, [r7, #24]
    for (i = 1; i < 8; i++) //this code first generates an 6 digit decimal number
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	3301      	adds	r3, #1
 800117c:	623b      	str	r3, [r7, #32]
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	2b07      	cmp	r3, #7
 8001182:	ddd5      	ble.n	8001130 <parseGGA+0x5b0>
        }
    }
    decimalPoint = decimalPoint - 2;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3b02      	subs	r3, #2
 8001188:	617b      	str	r3, [r7, #20]
    multiplier = 100000;
 800118a:	4b23      	ldr	r3, [pc, #140]	; (8001218 <parseGGA+0x698>)
 800118c:	61bb      	str	r3, [r7, #24]
    while (decimalPoint > 0) //then divides it according to the placement of the decimal
 800118e:	e00a      	b.n	80011a6 <parseGGA+0x626>
    {
        multiplier = multiplier / 10;
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	4a22      	ldr	r2, [pc, #136]	; (800121c <parseGGA+0x69c>)
 8001194:	fb82 1203 	smull	r1, r2, r2, r3
 8001198:	1092      	asrs	r2, r2, #2
 800119a:	17db      	asrs	r3, r3, #31
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	61bb      	str	r3, [r7, #24]
        decimalPoint--;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
    while (decimalPoint > 0) //then divides it according to the placement of the decimal
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	dcf1      	bgt.n	8001190 <parseGGA+0x610>
    }
    gps_data.altitude = (int)(tAltitude / multiplier);
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b6:	edd7 6a04 	vldr	s13, [r7, #16]
 80011ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c2:	ee17 2a90 	vmov	r2, s15
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <parseGGA+0x684>)
 80011c8:	619a      	str	r2, [r3, #24]
}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	f3af 8000 	nop.w
 80011d8:	47ae147b 	.word	0x47ae147b
 80011dc:	3f847ae1 	.word	0x3f847ae1
 80011e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80011e4:	3f50624d 	.word	0x3f50624d
 80011e8:	eb1c432d 	.word	0xeb1c432d
 80011ec:	3f1a36e2 	.word	0x3f1a36e2
 80011f0:	00000000 	.word	0x00000000
 80011f4:	404e0000 	.word	0x404e0000
 80011f8:	00000000 	.word	0x00000000
 80011fc:	40590000 	.word	0x40590000
 8001200:	20000cf4 	.word	0x20000cf4
 8001204:	20000d10 	.word	0x20000d10
 8001208:	20000cff 	.word	0x20000cff
 800120c:	20000014 	.word	0x20000014
 8001210:	20000d04 	.word	0x20000d04
 8001214:	000f4240 	.word	0x000f4240
 8001218:	000186a0 	.word	0x000186a0
 800121c:	66666667 	.word	0x66666667

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001226:	f000 faea 	bl	80017fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800122a:	f000 f827 	bl	800127c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122e:	f000 f8fd 	bl	800142c <MX_GPIO_Init>
  MX_DMA_Init();
 8001232:	f000 f8d5 	bl	80013e0 <MX_DMA_Init>
  MX_UART4_Init();
 8001236:	f000 f89b 	bl	8001370 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  init();
 800123a:	f7ff fb2f 	bl	800089c <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (isNewDataAvailable()) {
 800123e:	f7ff fb7f 	bl	8000940 <isNewDataAvailable>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0fa      	beq.n	800123e <main+0x1e>
		  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_1);
 8001248:	2102      	movs	r1, #2
 800124a:	480a      	ldr	r0, [pc, #40]	; (8001274 <main+0x54>)
 800124c:	f001 fa15 	bl	800267a <HAL_GPIO_TogglePin>
		  gpsdata = getData();
 8001250:	463b      	mov	r3, r7
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f9f6 	bl	8000644 <getData>

		  if (gpsdata.ggaDataIsNew && gpsdata.vtgDataIsNew) {
 8001258:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0ee      	beq.n	800123e <main+0x1e>
 8001260:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0ea      	beq.n	800123e <main+0x1e>
			  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_7);
 8001268:	2180      	movs	r1, #128	; 0x80
 800126a:	4803      	ldr	r0, [pc, #12]	; (8001278 <main+0x58>)
 800126c:	f001 fa05 	bl	800267a <HAL_GPIO_TogglePin>
	  if (isNewDataAvailable()) {
 8001270:	e7e5      	b.n	800123e <main+0x1e>
 8001272:	bf00      	nop
 8001274:	40021800 	.word	0x40021800
 8001278:	40021000 	.word	0x40021000

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b0b8      	sub	sp, #224	; 0xe0
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001286:	2234      	movs	r2, #52	; 0x34
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f003 fb82 	bl	8004994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	2290      	movs	r2, #144	; 0x90
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f003 fb73 	bl	8004994 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <SystemClock_Config+0xec>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	4a2d      	ldr	r2, [pc, #180]	; (8001368 <SystemClock_Config+0xec>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ba:	4b2b      	ldr	r3, [pc, #172]	; (8001368 <SystemClock_Config+0xec>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012c6:	4b29      	ldr	r3, [pc, #164]	; (800136c <SystemClock_Config+0xf0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012ce:	4a27      	ldr	r2, [pc, #156]	; (800136c <SystemClock_Config+0xf0>)
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b25      	ldr	r3, [pc, #148]	; (800136c <SystemClock_Config+0xf0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e2:	2302      	movs	r3, #2
 80012e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e8:	2301      	movs	r3, #1
 80012ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ee:	2310      	movs	r3, #16
 80012f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012fe:	4618      	mov	r0, r3
 8001300:	f001 f9d6 	bl	80026b0 <HAL_RCC_OscConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800130a:	f000 f8fb 	bl	8001504 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130e:	230f      	movs	r3, #15
 8001310:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001314:	2300      	movs	r3, #0
 8001316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800132c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f001 fc6a 	bl	8002c0c <HAL_RCC_ClockConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800133e:	f000 f8e1 	bl	8001504 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001342:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001346:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001348:	2300      	movs	r3, #0
 800134a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800134c:	f107 0308 	add.w	r3, r7, #8
 8001350:	4618      	mov	r0, r3
 8001352:	f001 fe31 	bl	8002fb8 <HAL_RCCEx_PeriphCLKConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800135c:	f000 f8d2 	bl	8001504 <Error_Handler>
  }
}
 8001360:	bf00      	nop
 8001362:	37e0      	adds	r7, #224	; 0xe0
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40007000 	.word	0x40007000

08001370 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <MX_UART4_Init+0x68>)
 8001376:	4a19      	ldr	r2, [pc, #100]	; (80013dc <MX_UART4_Init+0x6c>)
 8001378:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <MX_UART4_Init+0x68>)
 800137c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001380:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <MX_UART4_Init+0x68>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <MX_UART4_Init+0x68>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <MX_UART4_Init+0x68>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001394:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <MX_UART4_Init+0x68>)
 8001396:	220c      	movs	r2, #12
 8001398:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_UART4_Init+0x68>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_8;
 80013a0:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <MX_UART4_Init+0x68>)
 80013a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013a6:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_UART4_Init+0x68>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <MX_UART4_Init+0x68>)
 80013b0:	2230      	movs	r2, #48	; 0x30
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_UART4_Init+0x68>)
 80013b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013ba:	639a      	str	r2, [r3, #56]	; 0x38
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_UART4_Init+0x68>)
 80013be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013c2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80013c4:	4804      	ldr	r0, [pc, #16]	; (80013d8 <MX_UART4_Init+0x68>)
 80013c6:	f002 f9e7 	bl	8003798 <HAL_UART_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_UART4_Init+0x64>
  {
    Error_Handler();
 80013d0:	f000 f898 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000d98 	.word	0x20000d98
 80013dc:	40004c00 	.word	0x40004c00

080013e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <MX_DMA_Init+0x48>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <MX_DMA_Init+0x48>)
 80013ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <MX_DMA_Init+0x48>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	200d      	movs	r0, #13
 8001404:	f000 fb33 	bl	8001a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001408:	200d      	movs	r0, #13
 800140a:	f000 fb4c 	bl	8001aa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	200f      	movs	r0, #15
 8001414:	f000 fb2b 	bl	8001a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001418:	200f      	movs	r0, #15
 800141a:	f000 fb44 	bl	8001aa6 <HAL_NVIC_EnableIRQ>

}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800

0800142c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001442:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <MX_GPIO_Init+0xcc>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a2c      	ldr	r2, [pc, #176]	; (80014f8 <MX_GPIO_Init+0xcc>)
 8001448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <MX_GPIO_Init+0xcc>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800145a:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <MX_GPIO_Init+0xcc>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a26      	ldr	r2, [pc, #152]	; (80014f8 <MX_GPIO_Init+0xcc>)
 8001460:	f043 0310 	orr.w	r3, r3, #16
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <MX_GPIO_Init+0xcc>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <MX_GPIO_Init+0xcc>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a20      	ldr	r2, [pc, #128]	; (80014f8 <MX_GPIO_Init+0xcc>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <MX_GPIO_Init+0xcc>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800148a:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <MX_GPIO_Init+0xcc>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a1a      	ldr	r2, [pc, #104]	; (80014f8 <MX_GPIO_Init+0xcc>)
 8001490:	f043 0308 	orr.w	r3, r3, #8
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <MX_GPIO_Init+0xcc>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2102      	movs	r1, #2
 80014a6:	4815      	ldr	r0, [pc, #84]	; (80014fc <MX_GPIO_Init+0xd0>)
 80014a8:	f001 f8ce 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2180      	movs	r1, #128	; 0x80
 80014b0:	4813      	ldr	r0, [pc, #76]	; (8001500 <MX_GPIO_Init+0xd4>)
 80014b2:	f001 f8c9 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014b6:	2302      	movs	r3, #2
 80014b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	480b      	ldr	r0, [pc, #44]	; (80014fc <MX_GPIO_Init+0xd0>)
 80014ce:	f000 ff0f 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_GPIO_Init+0xd4>)
 80014ea:	f000 ff01 	bl	80022f0 <HAL_GPIO_Init>

}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	; 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40021800 	.word	0x40021800
 8001500:	40021000 	.word	0x40021000

08001504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800150c:	e7fe      	b.n	800150c <Error_Handler+0x8>
	...

08001510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_MspInit+0x44>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_MspInit+0x44>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_MspInit+0x44>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_MspInit+0x44>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	4a08      	ldr	r2, [pc, #32]	; (8001554 <HAL_MspInit+0x44>)
 8001534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001538:	6453      	str	r3, [r2, #68]	; 0x44
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_MspInit+0x44>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800

08001558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a58      	ldr	r2, [pc, #352]	; (80016d8 <HAL_UART_MspInit+0x180>)
 8001576:	4293      	cmp	r3, r2
 8001578:	f040 80a9 	bne.w	80016ce <HAL_UART_MspInit+0x176>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800157c:	4b57      	ldr	r3, [pc, #348]	; (80016dc <HAL_UART_MspInit+0x184>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	4a56      	ldr	r2, [pc, #344]	; (80016dc <HAL_UART_MspInit+0x184>)
 8001582:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001586:	6413      	str	r3, [r2, #64]	; 0x40
 8001588:	4b54      	ldr	r3, [pc, #336]	; (80016dc <HAL_UART_MspInit+0x184>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001594:	4b51      	ldr	r3, [pc, #324]	; (80016dc <HAL_UART_MspInit+0x184>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	4a50      	ldr	r2, [pc, #320]	; (80016dc <HAL_UART_MspInit+0x184>)
 800159a:	f043 0302 	orr.w	r3, r3, #2
 800159e:	6313      	str	r3, [r2, #48]	; 0x30
 80015a0:	4b4e      	ldr	r3, [pc, #312]	; (80016dc <HAL_UART_MspInit+0x184>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ac:	4b4b      	ldr	r3, [pc, #300]	; (80016dc <HAL_UART_MspInit+0x184>)
 80015ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b0:	4a4a      	ldr	r2, [pc, #296]	; (80016dc <HAL_UART_MspInit+0x184>)
 80015b2:	f043 0308 	orr.w	r3, r3, #8
 80015b6:	6313      	str	r3, [r2, #48]	; 0x30
 80015b8:	4b48      	ldr	r3, [pc, #288]	; (80016dc <HAL_UART_MspInit+0x184>)
 80015ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
    PB14     ------> UART4_RTS
    PB15     ------> UART4_CTS
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80015c4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015d6:	2308      	movs	r3, #8
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	483f      	ldr	r0, [pc, #252]	; (80016e0 <HAL_UART_MspInit+0x188>)
 80015e2:	f000 fe85 	bl	80022f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015e6:	2303      	movs	r3, #3
 80015e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f2:	2303      	movs	r3, #3
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015f6:	2308      	movs	r3, #8
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	4838      	ldr	r0, [pc, #224]	; (80016e4 <HAL_UART_MspInit+0x18c>)
 8001602:	f000 fe75 	bl	80022f0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001606:	4b38      	ldr	r3, [pc, #224]	; (80016e8 <HAL_UART_MspInit+0x190>)
 8001608:	4a38      	ldr	r2, [pc, #224]	; (80016ec <HAL_UART_MspInit+0x194>)
 800160a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800160c:	4b36      	ldr	r3, [pc, #216]	; (80016e8 <HAL_UART_MspInit+0x190>)
 800160e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001612:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001614:	4b34      	ldr	r3, [pc, #208]	; (80016e8 <HAL_UART_MspInit+0x190>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800161a:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <HAL_UART_MspInit+0x190>)
 800161c:	2200      	movs	r2, #0
 800161e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001620:	4b31      	ldr	r3, [pc, #196]	; (80016e8 <HAL_UART_MspInit+0x190>)
 8001622:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001626:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001628:	4b2f      	ldr	r3, [pc, #188]	; (80016e8 <HAL_UART_MspInit+0x190>)
 800162a:	2200      	movs	r2, #0
 800162c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800162e:	4b2e      	ldr	r3, [pc, #184]	; (80016e8 <HAL_UART_MspInit+0x190>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001634:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <HAL_UART_MspInit+0x190>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800163a:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <HAL_UART_MspInit+0x190>)
 800163c:	2200      	movs	r2, #0
 800163e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001640:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <HAL_UART_MspInit+0x190>)
 8001642:	2200      	movs	r2, #0
 8001644:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001646:	4828      	ldr	r0, [pc, #160]	; (80016e8 <HAL_UART_MspInit+0x190>)
 8001648:	f000 fa48 	bl	8001adc <HAL_DMA_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8001652:	f7ff ff57 	bl	8001504 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a23      	ldr	r2, [pc, #140]	; (80016e8 <HAL_UART_MspInit+0x190>)
 800165a:	671a      	str	r2, [r3, #112]	; 0x70
 800165c:	4a22      	ldr	r2, [pc, #136]	; (80016e8 <HAL_UART_MspInit+0x190>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001662:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <HAL_UART_MspInit+0x198>)
 8001664:	4a23      	ldr	r2, [pc, #140]	; (80016f4 <HAL_UART_MspInit+0x19c>)
 8001666:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001668:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <HAL_UART_MspInit+0x198>)
 800166a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800166e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001670:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <HAL_UART_MspInit+0x198>)
 8001672:	2240      	movs	r2, #64	; 0x40
 8001674:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001676:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <HAL_UART_MspInit+0x198>)
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800167c:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <HAL_UART_MspInit+0x198>)
 800167e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001682:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <HAL_UART_MspInit+0x198>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_UART_MspInit+0x198>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <HAL_UART_MspInit+0x198>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <HAL_UART_MspInit+0x198>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <HAL_UART_MspInit+0x198>)
 800169e:	2200      	movs	r2, #0
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80016a2:	4813      	ldr	r0, [pc, #76]	; (80016f0 <HAL_UART_MspInit+0x198>)
 80016a4:	f000 fa1a 	bl	8001adc <HAL_DMA_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_UART_MspInit+0x15a>
    {
      Error_Handler();
 80016ae:	f7ff ff29 	bl	8001504 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <HAL_UART_MspInit+0x198>)
 80016b6:	66da      	str	r2, [r3, #108]	; 0x6c
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <HAL_UART_MspInit+0x198>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	2034      	movs	r0, #52	; 0x34
 80016c4:	f000 f9d3 	bl	8001a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80016c8:	2034      	movs	r0, #52	; 0x34
 80016ca:	f000 f9ec 	bl	8001aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80016ce:	bf00      	nop
 80016d0:	3728      	adds	r7, #40	; 0x28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40004c00 	.word	0x40004c00
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020400 	.word	0x40020400
 80016e4:	40020c00 	.word	0x40020c00
 80016e8:	20000d38 	.word	0x20000d38
 80016ec:	40026040 	.word	0x40026040
 80016f0:	20000e1c 	.word	0x20000e1c
 80016f4:	40026070 	.word	0x40026070

080016f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <NMI_Handler+0x4>

080016fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <HardFault_Handler+0x4>

08001704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <MemManage_Handler+0x4>

0800170a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <BusFault_Handler+0x4>

08001710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <UsageFault_Handler+0x4>

08001716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001744:	f000 f898 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}

0800174c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <DMA1_Stream2_IRQHandler+0x10>)
 8001752:	f000 fb63 	bl	8001e1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000d38 	.word	0x20000d38

08001760 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <DMA1_Stream4_IRQHandler+0x10>)
 8001766:	f000 fb59 	bl	8001e1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000e1c 	.word	0x20000e1c

08001774 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <UART4_IRQHandler+0x10>)
 800177a:	f002 f917 	bl	80039ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000d98 	.word	0x20000d98

08001788 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <SystemInit+0x20>)
 800178e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001792:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <SystemInit+0x20>)
 8001794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017b0:	480d      	ldr	r0, [pc, #52]	; (80017e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017b2:	490e      	ldr	r1, [pc, #56]	; (80017ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017b4:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b8:	e002      	b.n	80017c0 <LoopCopyDataInit>

080017ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017be:	3304      	adds	r3, #4

080017c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c4:	d3f9      	bcc.n	80017ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c6:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017c8:	4c0b      	ldr	r4, [pc, #44]	; (80017f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017cc:	e001      	b.n	80017d2 <LoopFillZerobss>

080017ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d0:	3204      	adds	r2, #4

080017d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d4:	d3fb      	bcc.n	80017ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017d6:	f7ff ffd7 	bl	8001788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017da:	f003 f8a9 	bl	8004930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017de:	f7ff fd1f 	bl	8001220 <main>
  bx  lr    
 80017e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017e4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ec:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80017f0:	08004ca0 	.word	0x08004ca0
  ldr r2, =_sbss
 80017f4:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80017f8:	20000e80 	.word	0x20000e80

080017fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC_IRQHandler>

080017fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001802:	2003      	movs	r0, #3
 8001804:	f000 f928 	bl	8001a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001808:	2000      	movs	r0, #0
 800180a:	f000 f805 	bl	8001818 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800180e:	f7ff fe7f 	bl	8001510 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_InitTick+0x54>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x58>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f943 	bl	8001ac2 <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001854:	f000 f90b 	bl	8001a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <HAL_InitTick+0x5c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000018 	.word	0x20000018
 8001870:	20000020 	.word	0x20000020
 8001874:	2000001c 	.word	0x2000001c

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000020 	.word	0x20000020
 800189c:	20000e7c 	.word	0x20000e7c

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000e7c 	.word	0x20000e7c

080018b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <__NVIC_SetPriorityGrouping+0x40>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d4:	4013      	ands	r3, r2
 80018d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e6:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <__NVIC_SetPriorityGrouping+0x40>)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	60d3      	str	r3, [r2, #12]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00
 80018fc:	05fa0000 	.word	0x05fa0000

08001900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <__NVIC_GetPriorityGrouping+0x18>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	f003 0307 	and.w	r3, r3, #7
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	2b00      	cmp	r3, #0
 800192c:	db0b      	blt.n	8001946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	f003 021f 	and.w	r2, r3, #31
 8001934:	4907      	ldr	r1, [pc, #28]	; (8001954 <__NVIC_EnableIRQ+0x38>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	2001      	movs	r0, #1
 800193e:	fa00 f202 	lsl.w	r2, r0, r2
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000e100 	.word	0xe000e100

08001958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db0a      	blt.n	8001982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	490c      	ldr	r1, [pc, #48]	; (80019a4 <__NVIC_SetPriority+0x4c>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	440b      	add	r3, r1
 800197c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001980:	e00a      	b.n	8001998 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4908      	ldr	r1, [pc, #32]	; (80019a8 <__NVIC_SetPriority+0x50>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	3b04      	subs	r3, #4
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	440b      	add	r3, r1
 8001996:	761a      	strb	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	4313      	orrs	r3, r2
         );
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a24:	d301      	bcc.n	8001a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00f      	b.n	8001a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <SysTick_Config+0x40>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a32:	210f      	movs	r1, #15
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a38:	f7ff ff8e 	bl	8001958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <SysTick_Config+0x40>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <SysTick_Config+0x40>)
 8001a44:	2207      	movs	r2, #7
 8001a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	e000e010 	.word	0xe000e010

08001a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff29 	bl	80018b8 <__NVIC_SetPriorityGrouping>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a80:	f7ff ff3e 	bl	8001900 <__NVIC_GetPriorityGrouping>
 8001a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	f7ff ff8e 	bl	80019ac <NVIC_EncodePriority>
 8001a90:	4602      	mov	r2, r0
 8001a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff5d 	bl	8001958 <__NVIC_SetPriority>
}
 8001a9e:	bf00      	nop
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff31 	bl	800191c <__NVIC_EnableIRQ>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ffa2 	bl	8001a14 <SysTick_Config>
 8001ad0:	4603      	mov	r3, r0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff feda 	bl	80018a0 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e099      	b.n	8001c2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0201 	bic.w	r2, r2, #1
 8001b16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b18:	e00f      	b.n	8001b3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b1a:	f7ff fec1 	bl	80018a0 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b05      	cmp	r3, #5
 8001b26:	d908      	bls.n	8001b3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2203      	movs	r2, #3
 8001b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e078      	b.n	8001c2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1e8      	bne.n	8001b1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	4b38      	ldr	r3, [pc, #224]	; (8001c34 <HAL_DMA_Init+0x158>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d107      	bne.n	8001ba4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f023 0307 	bic.w	r3, r3, #7
 8001bba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d117      	bne.n	8001bfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00e      	beq.n	8001bfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 fb09 	bl	80021f8 <DMA_CheckFifoParam>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d008      	beq.n	8001bfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2240      	movs	r2, #64	; 0x40
 8001bf0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e016      	b.n	8001c2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 fac0 	bl	800218c <DMA_CalcBaseAndBitshift>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c14:	223f      	movs	r2, #63	; 0x3f
 8001c16:	409a      	lsls	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	e010803f 	.word	0xe010803f

08001c38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d101      	bne.n	8001c5e <HAL_DMA_Start_IT+0x26>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e048      	b.n	8001cf0 <HAL_DMA_Start_IT+0xb8>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d137      	bne.n	8001ce2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2202      	movs	r2, #2
 8001c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 fa52 	bl	8002130 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c90:	223f      	movs	r2, #63	; 0x3f
 8001c92:	409a      	lsls	r2, r3
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0216 	orr.w	r2, r2, #22
 8001ca6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	695a      	ldr	r2, [r3, #20]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cb6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d007      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0208 	orr.w	r2, r2, #8
 8001cce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	e005      	b.n	8001cee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cea:	2302      	movs	r3, #2
 8001cec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d06:	f7ff fdcb 	bl	80018a0 <HAL_GetTick>
 8001d0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d008      	beq.n	8001d2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2280      	movs	r2, #128	; 0x80
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e052      	b.n	8001dd0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0216 	bic.w	r2, r2, #22
 8001d38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695a      	ldr	r2, [r3, #20]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d103      	bne.n	8001d5a <HAL_DMA_Abort+0x62>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d007      	beq.n	8001d6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0208 	bic.w	r2, r2, #8
 8001d68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0201 	bic.w	r2, r2, #1
 8001d78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d7a:	e013      	b.n	8001da4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d7c:	f7ff fd90 	bl	80018a0 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b05      	cmp	r3, #5
 8001d88:	d90c      	bls.n	8001da4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e015      	b.n	8001dd0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1e4      	bne.n	8001d7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db6:	223f      	movs	r2, #63	; 0x3f
 8001db8:	409a      	lsls	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d004      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2280      	movs	r2, #128	; 0x80
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00c      	b.n	8001e10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2205      	movs	r2, #5
 8001dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0201 	bic.w	r2, r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001e28:	4b92      	ldr	r3, [pc, #584]	; (8002074 <HAL_DMA_IRQHandler+0x258>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a92      	ldr	r2, [pc, #584]	; (8002078 <HAL_DMA_IRQHandler+0x25c>)
 8001e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e32:	0a9b      	lsrs	r3, r3, #10
 8001e34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e46:	2208      	movs	r2, #8
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d01a      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d013      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0204 	bic.w	r2, r2, #4
 8001e6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	2208      	movs	r2, #8
 8001e76:	409a      	lsls	r2, r3
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e80:	f043 0201 	orr.w	r2, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d012      	beq.n	8001ebe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00b      	beq.n	8001ebe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eaa:	2201      	movs	r2, #1
 8001eac:	409a      	lsls	r2, r3
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb6:	f043 0202 	orr.w	r2, r3, #2
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d012      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00b      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eec:	f043 0204 	orr.w	r2, r3, #4
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef8:	2210      	movs	r2, #16
 8001efa:	409a      	lsls	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d043      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d03c      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f16:	2210      	movs	r2, #16
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d018      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d108      	bne.n	8001f4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d024      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	4798      	blx	r3
 8001f4a:	e01f      	b.n	8001f8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d01b      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	4798      	blx	r3
 8001f5c:	e016      	b.n	8001f8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d107      	bne.n	8001f7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0208 	bic.w	r2, r2, #8
 8001f7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f90:	2220      	movs	r2, #32
 8001f92:	409a      	lsls	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 808e 	beq.w	80020ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 8086 	beq.w	80020ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b05      	cmp	r3, #5
 8001fc4:	d136      	bne.n	8002034 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0216 	bic.w	r2, r2, #22
 8001fd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	695a      	ldr	r2, [r3, #20]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d103      	bne.n	8001ff6 <HAL_DMA_IRQHandler+0x1da>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d007      	beq.n	8002006 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0208 	bic.w	r2, r2, #8
 8002004:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200a:	223f      	movs	r2, #63	; 0x3f
 800200c:	409a      	lsls	r2, r3
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002026:	2b00      	cmp	r3, #0
 8002028:	d07d      	beq.n	8002126 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	4798      	blx	r3
        }
        return;
 8002032:	e078      	b.n	8002126 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d01c      	beq.n	800207c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d108      	bne.n	8002062 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002054:	2b00      	cmp	r3, #0
 8002056:	d030      	beq.n	80020ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	4798      	blx	r3
 8002060:	e02b      	b.n	80020ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002066:	2b00      	cmp	r3, #0
 8002068:	d027      	beq.n	80020ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	4798      	blx	r3
 8002072:	e022      	b.n	80020ba <HAL_DMA_IRQHandler+0x29e>
 8002074:	20000018 	.word	0x20000018
 8002078:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10f      	bne.n	80020aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0210 	bic.w	r2, r2, #16
 8002098:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d032      	beq.n	8002128 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d022      	beq.n	8002114 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2205      	movs	r2, #5
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0201 	bic.w	r2, r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	3301      	adds	r3, #1
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d307      	bcc.n	8002102 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f2      	bne.n	80020e6 <HAL_DMA_IRQHandler+0x2ca>
 8002100:	e000      	b.n	8002104 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002102:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	4798      	blx	r3
 8002124:	e000      	b.n	8002128 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002126:	bf00      	nop
    }
  }
}
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop

08002130 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800214c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b40      	cmp	r3, #64	; 0x40
 800215c:	d108      	bne.n	8002170 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800216e:	e007      	b.n	8002180 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	60da      	str	r2, [r3, #12]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	3b10      	subs	r3, #16
 800219c:	4a13      	ldr	r2, [pc, #76]	; (80021ec <DMA_CalcBaseAndBitshift+0x60>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	091b      	lsrs	r3, r3, #4
 80021a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021a6:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <DMA_CalcBaseAndBitshift+0x64>)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4413      	add	r3, r2
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d908      	bls.n	80021cc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <DMA_CalcBaseAndBitshift+0x68>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	1d1a      	adds	r2, r3, #4
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	659a      	str	r2, [r3, #88]	; 0x58
 80021ca:	e006      	b.n	80021da <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <DMA_CalcBaseAndBitshift+0x68>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	aaaaaaab 	.word	0xaaaaaaab
 80021f0:	08004c88 	.word	0x08004c88
 80021f4:	fffffc00 	.word	0xfffffc00

080021f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d11f      	bne.n	8002252 <DMA_CheckFifoParam+0x5a>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d856      	bhi.n	80022c6 <DMA_CheckFifoParam+0xce>
 8002218:	a201      	add	r2, pc, #4	; (adr r2, 8002220 <DMA_CheckFifoParam+0x28>)
 800221a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221e:	bf00      	nop
 8002220:	08002231 	.word	0x08002231
 8002224:	08002243 	.word	0x08002243
 8002228:	08002231 	.word	0x08002231
 800222c:	080022c7 	.word	0x080022c7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d046      	beq.n	80022ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002240:	e043      	b.n	80022ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800224a:	d140      	bne.n	80022ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002250:	e03d      	b.n	80022ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800225a:	d121      	bne.n	80022a0 <DMA_CheckFifoParam+0xa8>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b03      	cmp	r3, #3
 8002260:	d837      	bhi.n	80022d2 <DMA_CheckFifoParam+0xda>
 8002262:	a201      	add	r2, pc, #4	; (adr r2, 8002268 <DMA_CheckFifoParam+0x70>)
 8002264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002268:	08002279 	.word	0x08002279
 800226c:	0800227f 	.word	0x0800227f
 8002270:	08002279 	.word	0x08002279
 8002274:	08002291 	.word	0x08002291
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
      break;
 800227c:	e030      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d025      	beq.n	80022d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800228e:	e022      	b.n	80022d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002298:	d11f      	bne.n	80022da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800229e:	e01c      	b.n	80022da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d903      	bls.n	80022ae <DMA_CheckFifoParam+0xb6>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d003      	beq.n	80022b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022ac:	e018      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	73fb      	strb	r3, [r7, #15]
      break;
 80022b2:	e015      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00e      	beq.n	80022de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
      break;
 80022c4:	e00b      	b.n	80022de <DMA_CheckFifoParam+0xe6>
      break;
 80022c6:	bf00      	nop
 80022c8:	e00a      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      break;
 80022ca:	bf00      	nop
 80022cc:	e008      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      break;
 80022ce:	bf00      	nop
 80022d0:	e006      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      break;
 80022d2:	bf00      	nop
 80022d4:	e004      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      break;
 80022d6:	bf00      	nop
 80022d8:	e002      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80022da:	bf00      	nop
 80022dc:	e000      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      break;
 80022de:	bf00      	nop
    }
  } 
  
  return status; 
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop

080022f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	; 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	e175      	b.n	80025fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002310:	2201      	movs	r2, #1
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	429a      	cmp	r2, r3
 800232a:	f040 8164 	bne.w	80025f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d00b      	beq.n	800234e <HAL_GPIO_Init+0x5e>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d007      	beq.n	800234e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002342:	2b11      	cmp	r3, #17
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b12      	cmp	r3, #18
 800234c:	d130      	bne.n	80023b0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	2203      	movs	r2, #3
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002384:	2201      	movs	r2, #1
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	f003 0201 	and.w	r2, r3, #1
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	2203      	movs	r2, #3
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x100>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b12      	cmp	r3, #18
 80023ee:	d123      	bne.n	8002438 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	08da      	lsrs	r2, r3, #3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3208      	adds	r2, #8
 80023f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	220f      	movs	r2, #15
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	08da      	lsrs	r2, r3, #3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3208      	adds	r2, #8
 8002432:	69b9      	ldr	r1, [r7, #24]
 8002434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	2203      	movs	r2, #3
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0203 	and.w	r2, r3, #3
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80be 	beq.w	80025f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247a:	4b66      	ldr	r3, [pc, #408]	; (8002614 <HAL_GPIO_Init+0x324>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	4a65      	ldr	r2, [pc, #404]	; (8002614 <HAL_GPIO_Init+0x324>)
 8002480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002484:	6453      	str	r3, [r2, #68]	; 0x44
 8002486:	4b63      	ldr	r3, [pc, #396]	; (8002614 <HAL_GPIO_Init+0x324>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002492:	4a61      	ldr	r2, [pc, #388]	; (8002618 <HAL_GPIO_Init+0x328>)
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	089b      	lsrs	r3, r3, #2
 8002498:	3302      	adds	r3, #2
 800249a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	220f      	movs	r2, #15
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a58      	ldr	r2, [pc, #352]	; (800261c <HAL_GPIO_Init+0x32c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d037      	beq.n	800252e <HAL_GPIO_Init+0x23e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a57      	ldr	r2, [pc, #348]	; (8002620 <HAL_GPIO_Init+0x330>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d031      	beq.n	800252a <HAL_GPIO_Init+0x23a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a56      	ldr	r2, [pc, #344]	; (8002624 <HAL_GPIO_Init+0x334>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d02b      	beq.n	8002526 <HAL_GPIO_Init+0x236>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a55      	ldr	r2, [pc, #340]	; (8002628 <HAL_GPIO_Init+0x338>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d025      	beq.n	8002522 <HAL_GPIO_Init+0x232>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a54      	ldr	r2, [pc, #336]	; (800262c <HAL_GPIO_Init+0x33c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d01f      	beq.n	800251e <HAL_GPIO_Init+0x22e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a53      	ldr	r2, [pc, #332]	; (8002630 <HAL_GPIO_Init+0x340>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d019      	beq.n	800251a <HAL_GPIO_Init+0x22a>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a52      	ldr	r2, [pc, #328]	; (8002634 <HAL_GPIO_Init+0x344>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d013      	beq.n	8002516 <HAL_GPIO_Init+0x226>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a51      	ldr	r2, [pc, #324]	; (8002638 <HAL_GPIO_Init+0x348>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d00d      	beq.n	8002512 <HAL_GPIO_Init+0x222>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a50      	ldr	r2, [pc, #320]	; (800263c <HAL_GPIO_Init+0x34c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d007      	beq.n	800250e <HAL_GPIO_Init+0x21e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a4f      	ldr	r2, [pc, #316]	; (8002640 <HAL_GPIO_Init+0x350>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d101      	bne.n	800250a <HAL_GPIO_Init+0x21a>
 8002506:	2309      	movs	r3, #9
 8002508:	e012      	b.n	8002530 <HAL_GPIO_Init+0x240>
 800250a:	230a      	movs	r3, #10
 800250c:	e010      	b.n	8002530 <HAL_GPIO_Init+0x240>
 800250e:	2308      	movs	r3, #8
 8002510:	e00e      	b.n	8002530 <HAL_GPIO_Init+0x240>
 8002512:	2307      	movs	r3, #7
 8002514:	e00c      	b.n	8002530 <HAL_GPIO_Init+0x240>
 8002516:	2306      	movs	r3, #6
 8002518:	e00a      	b.n	8002530 <HAL_GPIO_Init+0x240>
 800251a:	2305      	movs	r3, #5
 800251c:	e008      	b.n	8002530 <HAL_GPIO_Init+0x240>
 800251e:	2304      	movs	r3, #4
 8002520:	e006      	b.n	8002530 <HAL_GPIO_Init+0x240>
 8002522:	2303      	movs	r3, #3
 8002524:	e004      	b.n	8002530 <HAL_GPIO_Init+0x240>
 8002526:	2302      	movs	r3, #2
 8002528:	e002      	b.n	8002530 <HAL_GPIO_Init+0x240>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <HAL_GPIO_Init+0x240>
 800252e:	2300      	movs	r3, #0
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	f002 0203 	and.w	r2, r2, #3
 8002536:	0092      	lsls	r2, r2, #2
 8002538:	4093      	lsls	r3, r2
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002540:	4935      	ldr	r1, [pc, #212]	; (8002618 <HAL_GPIO_Init+0x328>)
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	089b      	lsrs	r3, r3, #2
 8002546:	3302      	adds	r3, #2
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800254e:	4b3d      	ldr	r3, [pc, #244]	; (8002644 <HAL_GPIO_Init+0x354>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	43db      	mvns	r3, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4013      	ands	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002572:	4a34      	ldr	r2, [pc, #208]	; (8002644 <HAL_GPIO_Init+0x354>)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002578:	4b32      	ldr	r3, [pc, #200]	; (8002644 <HAL_GPIO_Init+0x354>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800259c:	4a29      	ldr	r2, [pc, #164]	; (8002644 <HAL_GPIO_Init+0x354>)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025a2:	4b28      	ldr	r3, [pc, #160]	; (8002644 <HAL_GPIO_Init+0x354>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025c6:	4a1f      	ldr	r2, [pc, #124]	; (8002644 <HAL_GPIO_Init+0x354>)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025cc:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <HAL_GPIO_Init+0x354>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025f0:	4a14      	ldr	r2, [pc, #80]	; (8002644 <HAL_GPIO_Init+0x354>)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3301      	adds	r3, #1
 80025fa:	61fb      	str	r3, [r7, #28]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	2b0f      	cmp	r3, #15
 8002600:	f67f ae86 	bls.w	8002310 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	3724      	adds	r7, #36	; 0x24
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40023800 	.word	0x40023800
 8002618:	40013800 	.word	0x40013800
 800261c:	40020000 	.word	0x40020000
 8002620:	40020400 	.word	0x40020400
 8002624:	40020800 	.word	0x40020800
 8002628:	40020c00 	.word	0x40020c00
 800262c:	40021000 	.word	0x40021000
 8002630:	40021400 	.word	0x40021400
 8002634:	40021800 	.word	0x40021800
 8002638:	40021c00 	.word	0x40021c00
 800263c:	40022000 	.word	0x40022000
 8002640:	40022400 	.word	0x40022400
 8002644:	40013c00 	.word	0x40013c00

08002648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	807b      	strh	r3, [r7, #2]
 8002654:	4613      	mov	r3, r2
 8002656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002658:	787b      	ldrb	r3, [r7, #1]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800265e:	887a      	ldrh	r2, [r7, #2]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002664:	e003      	b.n	800266e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002666:	887b      	ldrh	r3, [r7, #2]
 8002668:	041a      	lsls	r2, r3, #16
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	619a      	str	r2, [r3, #24]
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800267a:	b480      	push	{r7}
 800267c:	b085      	sub	sp, #20
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	460b      	mov	r3, r1
 8002684:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800268c:	887a      	ldrh	r2, [r7, #2]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4013      	ands	r3, r2
 8002692:	041a      	lsls	r2, r3, #16
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	43d9      	mvns	r1, r3
 8002698:	887b      	ldrh	r3, [r7, #2]
 800269a:	400b      	ands	r3, r1
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	619a      	str	r2, [r3, #24]
}
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80026b8:	2300      	movs	r3, #0
 80026ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e29b      	b.n	8002bfe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 8087 	beq.w	80027e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026d4:	4b96      	ldr	r3, [pc, #600]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 030c 	and.w	r3, r3, #12
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d00c      	beq.n	80026fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e0:	4b93      	ldr	r3, [pc, #588]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d112      	bne.n	8002712 <HAL_RCC_OscConfig+0x62>
 80026ec:	4b90      	ldr	r3, [pc, #576]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f8:	d10b      	bne.n	8002712 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fa:	4b8d      	ldr	r3, [pc, #564]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d06c      	beq.n	80027e0 <HAL_RCC_OscConfig+0x130>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d168      	bne.n	80027e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e275      	b.n	8002bfe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800271a:	d106      	bne.n	800272a <HAL_RCC_OscConfig+0x7a>
 800271c:	4b84      	ldr	r3, [pc, #528]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a83      	ldr	r2, [pc, #524]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 8002722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	e02e      	b.n	8002788 <HAL_RCC_OscConfig+0xd8>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0x9c>
 8002732:	4b7f      	ldr	r3, [pc, #508]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a7e      	ldr	r2, [pc, #504]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 8002738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b7c      	ldr	r3, [pc, #496]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a7b      	ldr	r2, [pc, #492]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 8002744:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e01d      	b.n	8002788 <HAL_RCC_OscConfig+0xd8>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002754:	d10c      	bne.n	8002770 <HAL_RCC_OscConfig+0xc0>
 8002756:	4b76      	ldr	r3, [pc, #472]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a75      	ldr	r2, [pc, #468]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 800275c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	4b73      	ldr	r3, [pc, #460]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a72      	ldr	r2, [pc, #456]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 8002768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	e00b      	b.n	8002788 <HAL_RCC_OscConfig+0xd8>
 8002770:	4b6f      	ldr	r3, [pc, #444]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a6e      	ldr	r2, [pc, #440]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 8002776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	4b6c      	ldr	r3, [pc, #432]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a6b      	ldr	r2, [pc, #428]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 8002782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d013      	beq.n	80027b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7ff f886 	bl	80018a0 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002798:	f7ff f882 	bl	80018a0 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b64      	cmp	r3, #100	; 0x64
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e229      	b.n	8002bfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	4b61      	ldr	r3, [pc, #388]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0xe8>
 80027b6:	e014      	b.n	80027e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7ff f872 	bl	80018a0 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c0:	f7ff f86e 	bl	80018a0 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b64      	cmp	r3, #100	; 0x64
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e215      	b.n	8002bfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d2:	4b57      	ldr	r3, [pc, #348]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x110>
 80027de:	e000      	b.n	80027e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d069      	beq.n	80028c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ee:	4b50      	ldr	r3, [pc, #320]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00b      	beq.n	8002812 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027fa:	4b4d      	ldr	r3, [pc, #308]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b08      	cmp	r3, #8
 8002804:	d11c      	bne.n	8002840 <HAL_RCC_OscConfig+0x190>
 8002806:	4b4a      	ldr	r3, [pc, #296]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d116      	bne.n	8002840 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002812:	4b47      	ldr	r3, [pc, #284]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d005      	beq.n	800282a <HAL_RCC_OscConfig+0x17a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d001      	beq.n	800282a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e1e9      	b.n	8002bfe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282a:	4b41      	ldr	r3, [pc, #260]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	493d      	ldr	r1, [pc, #244]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283e:	e040      	b.n	80028c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d023      	beq.n	8002890 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002848:	4b39      	ldr	r3, [pc, #228]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a38      	ldr	r2, [pc, #224]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002854:	f7ff f824 	bl	80018a0 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285c:	f7ff f820 	bl	80018a0 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e1c7      	b.n	8002bfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286e:	4b30      	ldr	r3, [pc, #192]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287a:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4929      	ldr	r1, [pc, #164]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]
 800288e:	e018      	b.n	80028c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002890:	4b27      	ldr	r3, [pc, #156]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a26      	ldr	r2, [pc, #152]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7ff f800 	bl	80018a0 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a4:	f7fe fffc 	bl	80018a0 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e1a3      	b.n	8002bfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028b6:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d038      	beq.n	8002940 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d019      	beq.n	800290a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d6:	4b16      	ldr	r3, [pc, #88]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 80028d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028da:	4a15      	ldr	r2, [pc, #84]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e2:	f7fe ffdd 	bl	80018a0 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ea:	f7fe ffd9 	bl	80018a0 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e180      	b.n	8002bfe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 80028fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x23a>
 8002908:	e01a      	b.n	8002940 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800290a:	4b09      	ldr	r3, [pc, #36]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 800290c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800290e:	4a08      	ldr	r2, [pc, #32]	; (8002930 <HAL_RCC_OscConfig+0x280>)
 8002910:	f023 0301 	bic.w	r3, r3, #1
 8002914:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002916:	f7fe ffc3 	bl	80018a0 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800291c:	e00a      	b.n	8002934 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800291e:	f7fe ffbf 	bl	80018a0 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d903      	bls.n	8002934 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e166      	b.n	8002bfe <HAL_RCC_OscConfig+0x54e>
 8002930:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002934:	4b92      	ldr	r3, [pc, #584]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1ee      	bne.n	800291e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80a4 	beq.w	8002a96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800294e:	4b8c      	ldr	r3, [pc, #560]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10d      	bne.n	8002976 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800295a:	4b89      	ldr	r3, [pc, #548]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4a88      	ldr	r2, [pc, #544]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002964:	6413      	str	r3, [r2, #64]	; 0x40
 8002966:	4b86      	ldr	r3, [pc, #536]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002972:	2301      	movs	r3, #1
 8002974:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002976:	4b83      	ldr	r3, [pc, #524]	; (8002b84 <HAL_RCC_OscConfig+0x4d4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d118      	bne.n	80029b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002982:	4b80      	ldr	r3, [pc, #512]	; (8002b84 <HAL_RCC_OscConfig+0x4d4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a7f      	ldr	r2, [pc, #508]	; (8002b84 <HAL_RCC_OscConfig+0x4d4>)
 8002988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298e:	f7fe ff87 	bl	80018a0 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002996:	f7fe ff83 	bl	80018a0 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b64      	cmp	r3, #100	; 0x64
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e12a      	b.n	8002bfe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a8:	4b76      	ldr	r3, [pc, #472]	; (8002b84 <HAL_RCC_OscConfig+0x4d4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0f0      	beq.n	8002996 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d106      	bne.n	80029ca <HAL_RCC_OscConfig+0x31a>
 80029bc:	4b70      	ldr	r3, [pc, #448]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	4a6f      	ldr	r2, [pc, #444]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6713      	str	r3, [r2, #112]	; 0x70
 80029c8:	e02d      	b.n	8002a26 <HAL_RCC_OscConfig+0x376>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10c      	bne.n	80029ec <HAL_RCC_OscConfig+0x33c>
 80029d2:	4b6b      	ldr	r3, [pc, #428]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	4a6a      	ldr	r2, [pc, #424]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	6713      	str	r3, [r2, #112]	; 0x70
 80029de:	4b68      	ldr	r3, [pc, #416]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e2:	4a67      	ldr	r2, [pc, #412]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 80029e4:	f023 0304 	bic.w	r3, r3, #4
 80029e8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ea:	e01c      	b.n	8002a26 <HAL_RCC_OscConfig+0x376>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b05      	cmp	r3, #5
 80029f2:	d10c      	bne.n	8002a0e <HAL_RCC_OscConfig+0x35e>
 80029f4:	4b62      	ldr	r3, [pc, #392]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	4a61      	ldr	r2, [pc, #388]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 80029fa:	f043 0304 	orr.w	r3, r3, #4
 80029fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002a00:	4b5f      	ldr	r3, [pc, #380]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a04:	4a5e      	ldr	r2, [pc, #376]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0c:	e00b      	b.n	8002a26 <HAL_RCC_OscConfig+0x376>
 8002a0e:	4b5c      	ldr	r3, [pc, #368]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a12:	4a5b      	ldr	r2, [pc, #364]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1a:	4b59      	ldr	r3, [pc, #356]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1e:	4a58      	ldr	r2, [pc, #352]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002a20:	f023 0304 	bic.w	r3, r3, #4
 8002a24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d015      	beq.n	8002a5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2e:	f7fe ff37 	bl	80018a0 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a34:	e00a      	b.n	8002a4c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a36:	f7fe ff33 	bl	80018a0 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e0d8      	b.n	8002bfe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4c:	4b4c      	ldr	r3, [pc, #304]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0ee      	beq.n	8002a36 <HAL_RCC_OscConfig+0x386>
 8002a58:	e014      	b.n	8002a84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5a:	f7fe ff21 	bl	80018a0 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7fe ff1d 	bl	80018a0 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e0c2      	b.n	8002bfe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a78:	4b41      	ldr	r3, [pc, #260]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1ee      	bne.n	8002a62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a84:	7dfb      	ldrb	r3, [r7, #23]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d105      	bne.n	8002a96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a8a:	4b3d      	ldr	r3, [pc, #244]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	4a3c      	ldr	r2, [pc, #240]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 80ae 	beq.w	8002bfc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aa0:	4b37      	ldr	r3, [pc, #220]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 030c 	and.w	r3, r3, #12
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d06d      	beq.n	8002b88 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d14b      	bne.n	8002b4c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab4:	4b32      	ldr	r3, [pc, #200]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a31      	ldr	r2, [pc, #196]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002aba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7fe feee 	bl	80018a0 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac8:	f7fe feea 	bl	80018a0 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e091      	b.n	8002bfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ada:	4b29      	ldr	r3, [pc, #164]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69da      	ldr	r2, [r3, #28]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	019b      	lsls	r3, r3, #6
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afc:	085b      	lsrs	r3, r3, #1
 8002afe:	3b01      	subs	r3, #1
 8002b00:	041b      	lsls	r3, r3, #16
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	061b      	lsls	r3, r3, #24
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	071b      	lsls	r3, r3, #28
 8002b12:	491b      	ldr	r1, [pc, #108]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b18:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a18      	ldr	r2, [pc, #96]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe febc 	bl	80018a0 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fe feb8 	bl	80018a0 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e05f      	b.n	8002bfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3e:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0x47c>
 8002b4a:	e057      	b.n	8002bfc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0b      	ldr	r2, [pc, #44]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe fea2 	bl	80018a0 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b60:	f7fe fe9e 	bl	80018a0 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e045      	b.n	8002bfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b72:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <HAL_RCC_OscConfig+0x4d0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x4b0>
 8002b7e:	e03d      	b.n	8002bfc <HAL_RCC_OscConfig+0x54c>
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b88:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <HAL_RCC_OscConfig+0x558>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d030      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d129      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d122      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bb8:	4013      	ands	r3, r2
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bbe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d119      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	085b      	lsrs	r3, r3, #1
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d10f      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d107      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e000      	b.n	8002bfe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40023800 	.word	0x40023800

08002c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0d0      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c24:	4b6a      	ldr	r3, [pc, #424]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d910      	bls.n	8002c54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b67      	ldr	r3, [pc, #412]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 020f 	bic.w	r2, r3, #15
 8002c3a:	4965      	ldr	r1, [pc, #404]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b63      	ldr	r3, [pc, #396]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0b8      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d020      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c6c:	4b59      	ldr	r3, [pc, #356]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	4a58      	ldr	r2, [pc, #352]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c84:	4b53      	ldr	r3, [pc, #332]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4a52      	ldr	r2, [pc, #328]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c90:	4b50      	ldr	r3, [pc, #320]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	494d      	ldr	r1, [pc, #308]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d040      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d107      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d115      	bne.n	8002cee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e07f      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cce:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e073      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cde:	4b3d      	ldr	r3, [pc, #244]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e06b      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cee:	4b39      	ldr	r3, [pc, #228]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f023 0203 	bic.w	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4936      	ldr	r1, [pc, #216]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d00:	f7fe fdce 	bl	80018a0 <HAL_GetTick>
 8002d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d08:	f7fe fdca 	bl	80018a0 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e053      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1e:	4b2d      	ldr	r3, [pc, #180]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 020c 	and.w	r2, r3, #12
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d1eb      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d30:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d210      	bcs.n	8002d60 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b24      	ldr	r3, [pc, #144]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 020f 	bic.w	r2, r3, #15
 8002d46:	4922      	ldr	r1, [pc, #136]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e032      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d6c:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4916      	ldr	r1, [pc, #88]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d009      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d8a:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	490e      	ldr	r1, [pc, #56]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d9e:	f000 f821 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8002da2:	4602      	mov	r2, r0
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	490a      	ldr	r1, [pc, #40]	; (8002dd8 <HAL_RCC_ClockConfig+0x1cc>)
 8002db0:	5ccb      	ldrb	r3, [r1, r3]
 8002db2:	fa22 f303 	lsr.w	r3, r2, r3
 8002db6:	4a09      	ldr	r2, [pc, #36]	; (8002ddc <HAL_RCC_ClockConfig+0x1d0>)
 8002db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dba:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <HAL_RCC_ClockConfig+0x1d4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe fd2a 	bl	8001818 <HAL_InitTick>

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40023c00 	.word	0x40023c00
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	08004c70 	.word	0x08004c70
 8002ddc:	20000018 	.word	0x20000018
 8002de0:	2000001c 	.word	0x2000001c

08002de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de4:	b5b0      	push	{r4, r5, r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002dea:	2100      	movs	r1, #0
 8002dec:	6079      	str	r1, [r7, #4]
 8002dee:	2100      	movs	r1, #0
 8002df0:	60f9      	str	r1, [r7, #12]
 8002df2:	2100      	movs	r1, #0
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002df6:	2100      	movs	r1, #0
 8002df8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dfa:	4952      	ldr	r1, [pc, #328]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x160>)
 8002dfc:	6889      	ldr	r1, [r1, #8]
 8002dfe:	f001 010c 	and.w	r1, r1, #12
 8002e02:	2908      	cmp	r1, #8
 8002e04:	d00d      	beq.n	8002e22 <HAL_RCC_GetSysClockFreq+0x3e>
 8002e06:	2908      	cmp	r1, #8
 8002e08:	f200 8094 	bhi.w	8002f34 <HAL_RCC_GetSysClockFreq+0x150>
 8002e0c:	2900      	cmp	r1, #0
 8002e0e:	d002      	beq.n	8002e16 <HAL_RCC_GetSysClockFreq+0x32>
 8002e10:	2904      	cmp	r1, #4
 8002e12:	d003      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0x38>
 8002e14:	e08e      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e16:	4b4c      	ldr	r3, [pc, #304]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x164>)
 8002e18:	60bb      	str	r3, [r7, #8]
      break;
 8002e1a:	e08e      	b.n	8002f3a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e1c:	4b4b      	ldr	r3, [pc, #300]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x168>)
 8002e1e:	60bb      	str	r3, [r7, #8]
      break;
 8002e20:	e08b      	b.n	8002f3a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e22:	4948      	ldr	r1, [pc, #288]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e24:	6849      	ldr	r1, [r1, #4]
 8002e26:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002e2a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e2c:	4945      	ldr	r1, [pc, #276]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e2e:	6849      	ldr	r1, [r1, #4]
 8002e30:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002e34:	2900      	cmp	r1, #0
 8002e36:	d024      	beq.n	8002e82 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e38:	4942      	ldr	r1, [pc, #264]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e3a:	6849      	ldr	r1, [r1, #4]
 8002e3c:	0989      	lsrs	r1, r1, #6
 8002e3e:	4608      	mov	r0, r1
 8002e40:	f04f 0100 	mov.w	r1, #0
 8002e44:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002e48:	f04f 0500 	mov.w	r5, #0
 8002e4c:	ea00 0204 	and.w	r2, r0, r4
 8002e50:	ea01 0305 	and.w	r3, r1, r5
 8002e54:	493d      	ldr	r1, [pc, #244]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x168>)
 8002e56:	fb01 f003 	mul.w	r0, r1, r3
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	fb01 f102 	mul.w	r1, r1, r2
 8002e60:	1844      	adds	r4, r0, r1
 8002e62:	493a      	ldr	r1, [pc, #232]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x168>)
 8002e64:	fba2 0101 	umull	r0, r1, r2, r1
 8002e68:	1863      	adds	r3, r4, r1
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	f7fd f9e0 	bl	8000238 <__aeabi_uldivmod>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	e04a      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e82:	4b30      	ldr	r3, [pc, #192]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	099b      	lsrs	r3, r3, #6
 8002e88:	461a      	mov	r2, r3
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e92:	f04f 0100 	mov.w	r1, #0
 8002e96:	ea02 0400 	and.w	r4, r2, r0
 8002e9a:	ea03 0501 	and.w	r5, r3, r1
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	f04f 0300 	mov.w	r3, #0
 8002eaa:	014b      	lsls	r3, r1, #5
 8002eac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002eb0:	0142      	lsls	r2, r0, #5
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	1b00      	subs	r0, r0, r4
 8002eb8:	eb61 0105 	sbc.w	r1, r1, r5
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	018b      	lsls	r3, r1, #6
 8002ec6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002eca:	0182      	lsls	r2, r0, #6
 8002ecc:	1a12      	subs	r2, r2, r0
 8002ece:	eb63 0301 	sbc.w	r3, r3, r1
 8002ed2:	f04f 0000 	mov.w	r0, #0
 8002ed6:	f04f 0100 	mov.w	r1, #0
 8002eda:	00d9      	lsls	r1, r3, #3
 8002edc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ee0:	00d0      	lsls	r0, r2, #3
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	1912      	adds	r2, r2, r4
 8002ee8:	eb45 0303 	adc.w	r3, r5, r3
 8002eec:	f04f 0000 	mov.w	r0, #0
 8002ef0:	f04f 0100 	mov.w	r1, #0
 8002ef4:	0299      	lsls	r1, r3, #10
 8002ef6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002efa:	0290      	lsls	r0, r2, #10
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4610      	mov	r0, r2
 8002f02:	4619      	mov	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	461a      	mov	r2, r3
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	f7fd f994 	bl	8000238 <__aeabi_uldivmod>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4613      	mov	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f18:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	0c1b      	lsrs	r3, r3, #16
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	3301      	adds	r3, #1
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f30:	60bb      	str	r3, [r7, #8]
      break;
 8002f32:	e002      	b.n	8002f3a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f34:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x164>)
 8002f36:	60bb      	str	r3, [r7, #8]
      break;
 8002f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bdb0      	pop	{r4, r5, r7, pc}
 8002f44:	40023800 	.word	0x40023800
 8002f48:	00f42400 	.word	0x00f42400
 8002f4c:	017d7840 	.word	0x017d7840

08002f50 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f54:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f56:	681b      	ldr	r3, [r3, #0]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	20000018 	.word	0x20000018

08002f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f6c:	f7ff fff0 	bl	8002f50 <HAL_RCC_GetHCLKFreq>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	0a9b      	lsrs	r3, r3, #10
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	4903      	ldr	r1, [pc, #12]	; (8002f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f7e:	5ccb      	ldrb	r3, [r1, r3]
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	08004c80 	.word	0x08004c80

08002f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f94:	f7ff ffdc 	bl	8002f50 <HAL_RCC_GetHCLKFreq>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	0b5b      	lsrs	r3, r3, #13
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	4903      	ldr	r1, [pc, #12]	; (8002fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa6:	5ccb      	ldrb	r3, [r1, r3]
 8002fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	08004c80 	.word	0x08004c80

08002fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d012      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fe0:	4b69      	ldr	r3, [pc, #420]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4a68      	ldr	r2, [pc, #416]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002fea:	6093      	str	r3, [r2, #8]
 8002fec:	4b66      	ldr	r3, [pc, #408]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff4:	4964      	ldr	r1, [pc, #400]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003002:	2301      	movs	r3, #1
 8003004:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d017      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003012:	4b5d      	ldr	r3, [pc, #372]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003018:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003020:	4959      	ldr	r1, [pc, #356]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003030:	d101      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003032:	2301      	movs	r3, #1
 8003034:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800303e:	2301      	movs	r3, #1
 8003040:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d017      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800304e:	4b4e      	ldr	r3, [pc, #312]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003054:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	494a      	ldr	r1, [pc, #296]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800306c:	d101      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800306e:	2301      	movs	r3, #1
 8003070:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800307a:	2301      	movs	r3, #1
 800307c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800308a:	2301      	movs	r3, #1
 800308c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 808b 	beq.w	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800309c:	4b3a      	ldr	r3, [pc, #232]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	4a39      	ldr	r2, [pc, #228]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a6:	6413      	str	r3, [r2, #64]	; 0x40
 80030a8:	4b37      	ldr	r3, [pc, #220]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030b4:	4b35      	ldr	r3, [pc, #212]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a34      	ldr	r2, [pc, #208]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c0:	f7fe fbee 	bl	80018a0 <HAL_GetTick>
 80030c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c8:	f7fe fbea 	bl	80018a0 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	; 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e358      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030da:	4b2c      	ldr	r3, [pc, #176]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030e6:	4b28      	ldr	r3, [pc, #160]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d035      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	429a      	cmp	r2, r3
 8003102:	d02e      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003104:	4b20      	ldr	r3, [pc, #128]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800310c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800310e:	4b1e      	ldr	r3, [pc, #120]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003112:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003118:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800311a:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	4a1a      	ldr	r2, [pc, #104]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003124:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003126:	4a18      	ldr	r2, [pc, #96]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800312c:	4b16      	ldr	r3, [pc, #88]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b01      	cmp	r3, #1
 8003136:	d114      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fe fbb2 	bl	80018a0 <HAL_GetTick>
 800313c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313e:	e00a      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003140:	f7fe fbae 	bl	80018a0 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	; 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e31a      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003156:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0ee      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800316e:	d111      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003170:	4b05      	ldr	r3, [pc, #20]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800317c:	4b04      	ldr	r3, [pc, #16]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800317e:	400b      	ands	r3, r1
 8003180:	4901      	ldr	r1, [pc, #4]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
 8003186:	e00b      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003188:	40023800 	.word	0x40023800
 800318c:	40007000 	.word	0x40007000
 8003190:	0ffffcff 	.word	0x0ffffcff
 8003194:	4bb1      	ldr	r3, [pc, #708]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4ab0      	ldr	r2, [pc, #704]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800319a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800319e:	6093      	str	r3, [r2, #8]
 80031a0:	4bae      	ldr	r3, [pc, #696]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ac:	49ab      	ldr	r1, [pc, #684]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d010      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031be:	4ba7      	ldr	r3, [pc, #668]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031c4:	4aa5      	ldr	r2, [pc, #660]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80031ce:	4ba3      	ldr	r3, [pc, #652]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	49a0      	ldr	r1, [pc, #640]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00a      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031ec:	4b9b      	ldr	r3, [pc, #620]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031fa:	4998      	ldr	r1, [pc, #608]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800320e:	4b93      	ldr	r3, [pc, #588]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003214:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800321c:	498f      	ldr	r1, [pc, #572]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003230:	4b8a      	ldr	r3, [pc, #552]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003236:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800323e:	4987      	ldr	r1, [pc, #540]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003252:	4b82      	ldr	r3, [pc, #520]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003258:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	497e      	ldr	r1, [pc, #504]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003274:	4b79      	ldr	r3, [pc, #484]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327a:	f023 0203 	bic.w	r2, r3, #3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	4976      	ldr	r1, [pc, #472]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003296:	4b71      	ldr	r3, [pc, #452]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329c:	f023 020c 	bic.w	r2, r3, #12
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a4:	496d      	ldr	r1, [pc, #436]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032b8:	4b68      	ldr	r3, [pc, #416]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c6:	4965      	ldr	r1, [pc, #404]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032da:	4b60      	ldr	r3, [pc, #384]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e8:	495c      	ldr	r1, [pc, #368]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032fc:	4b57      	ldr	r3, [pc, #348]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330a:	4954      	ldr	r1, [pc, #336]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800331e:	4b4f      	ldr	r3, [pc, #316]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003324:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332c:	494b      	ldr	r1, [pc, #300]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003340:	4b46      	ldr	r3, [pc, #280]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003346:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334e:	4943      	ldr	r1, [pc, #268]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003362:	4b3e      	ldr	r3, [pc, #248]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003368:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003370:	493a      	ldr	r1, [pc, #232]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003384:	4b35      	ldr	r3, [pc, #212]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003392:	4932      	ldr	r1, [pc, #200]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d011      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80033a6:	4b2d      	ldr	r3, [pc, #180]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b4:	4929      	ldr	r1, [pc, #164]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033c4:	d101      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80033c6:	2301      	movs	r3, #1
 80033c8:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033d6:	4b21      	ldr	r3, [pc, #132]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e4:	491d      	ldr	r1, [pc, #116]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00b      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033f8:	4b18      	ldr	r3, [pc, #96]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003408:	4914      	ldr	r1, [pc, #80]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00b      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800341c:	4b0f      	ldr	r3, [pc, #60]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003422:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800342c:	490b      	ldr	r1, [pc, #44]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00f      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003440:	4b06      	ldr	r3, [pc, #24]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003446:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003450:	4902      	ldr	r1, [pc, #8]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8003458:	e002      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800345a:	bf00      	nop
 800345c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00b      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800346c:	4b81      	ldr	r3, [pc, #516]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800346e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003472:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800347c:	497d      	ldr	r1, [pc, #500]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d006      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80d6 	beq.w	8003644 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003498:	4b76      	ldr	r3, [pc, #472]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a75      	ldr	r2, [pc, #468]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800349e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a4:	f7fe f9fc 	bl	80018a0 <HAL_GetTick>
 80034a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x506>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034ac:	f7fe f9f8 	bl	80018a0 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	; 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x506>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e166      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034be:	4b6d      	ldr	r3, [pc, #436]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x4f4>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d021      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x562>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d11d      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034de:	4b65      	ldr	r3, [pc, #404]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80034e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e4:	0c1b      	lsrs	r3, r3, #16
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034ec:	4b61      	ldr	r3, [pc, #388]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80034ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f2:	0e1b      	lsrs	r3, r3, #24
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	019a      	lsls	r2, r3, #6
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	041b      	lsls	r3, r3, #16
 8003504:	431a      	orrs	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	061b      	lsls	r3, r3, #24
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	071b      	lsls	r3, r3, #28
 8003512:	4958      	ldr	r1, [pc, #352]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d004      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x578>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x58e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003538:	2b00      	cmp	r3, #0
 800353a:	d02e      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x5e2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003544:	d129      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x5e2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003546:	4b4b      	ldr	r3, [pc, #300]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003554:	4b47      	ldr	r3, [pc, #284]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800355a:	0f1b      	lsrs	r3, r3, #28
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	019a      	lsls	r2, r3, #6
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	041b      	lsls	r3, r3, #16
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	061b      	lsls	r3, r3, #24
 8003574:	431a      	orrs	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	071b      	lsls	r3, r3, #28
 800357a:	493e      	ldr	r1, [pc, #248]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003582:	4b3c      	ldr	r3, [pc, #240]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003588:	f023 021f 	bic.w	r2, r3, #31
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	3b01      	subs	r3, #1
 8003592:	4938      	ldr	r1, [pc, #224]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d01d      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035a6:	4b33      	ldr	r3, [pc, #204]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80035a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ac:	0e1b      	lsrs	r3, r3, #24
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035b4:	4b2f      	ldr	r3, [pc, #188]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80035b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ba:	0f1b      	lsrs	r3, r3, #28
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	019a      	lsls	r2, r3, #6
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	041b      	lsls	r3, r3, #16
 80035ce:	431a      	orrs	r2, r3
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	061b      	lsls	r3, r3, #24
 80035d4:	431a      	orrs	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	071b      	lsls	r3, r3, #28
 80035da:	4926      	ldr	r1, [pc, #152]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d011      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x65a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	019a      	lsls	r2, r3, #6
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	041b      	lsls	r3, r3, #16
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	061b      	lsls	r3, r3, #24
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	071b      	lsls	r3, r3, #28
 800360a:	491a      	ldr	r1, [pc, #104]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003612:	4b18      	ldr	r3, [pc, #96]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a17      	ldr	r2, [pc, #92]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003618:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800361c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800361e:	f7fe f93f 	bl	80018a0 <HAL_GetTick>
 8003622:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003624:	e008      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003626:	f7fe f93b 	bl	80018a0 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b64      	cmp	r3, #100	; 0x64
 8003632:	d901      	bls.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e0a9      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003638:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f0      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	2b01      	cmp	r3, #1
 8003648:	f040 809f 	bne.w	800378a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800364c:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a08      	ldr	r2, [pc, #32]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003656:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003658:	f7fe f922 	bl	80018a0 <HAL_GetTick>
 800365c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800365e:	e00b      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003660:	f7fe f91e 	bl	80018a0 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	; 0x64
 800366c:	d904      	bls.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e08c      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003678:	4b46      	ldr	r3, [pc, #280]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003684:	d0ec      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x6a8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003696:	2b00      	cmp	r3, #0
 8003698:	d009      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x6f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d02e      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x74c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d12a      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036ae:	4b39      	ldr	r3, [pc, #228]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036bc:	4b35      	ldr	r3, [pc, #212]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c2:	0f1b      	lsrs	r3, r3, #28
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	019a      	lsls	r2, r3, #6
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	041b      	lsls	r3, r3, #16
 80036d4:	431a      	orrs	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	061b      	lsls	r3, r3, #24
 80036dc:	431a      	orrs	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	071b      	lsls	r3, r3, #28
 80036e2:	492c      	ldr	r1, [pc, #176]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80036ea:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f8:	3b01      	subs	r3, #1
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	4925      	ldr	r1, [pc, #148]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d022      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x79e>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003714:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003718:	d11d      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800371a:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003720:	0e1b      	lsrs	r3, r3, #24
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003728:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372e:	0f1b      	lsrs	r3, r3, #28
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	019a      	lsls	r2, r3, #6
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	041b      	lsls	r3, r3, #16
 8003742:	431a      	orrs	r2, r3
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	061b      	lsls	r3, r3, #24
 8003748:	431a      	orrs	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	071b      	lsls	r3, r3, #28
 800374e:	4911      	ldr	r1, [pc, #68]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003756:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a0e      	ldr	r2, [pc, #56]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003760:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003762:	f7fe f89d 	bl	80018a0 <HAL_GetTick>
 8003766:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003768:	e008      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800376a:	f7fe f899 	bl	80018a0 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b64      	cmp	r3, #100	; 0x64
 8003776:	d901      	bls.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e007      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003788:	d1ef      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x7b2>
      }
    }
  }
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3720      	adds	r7, #32
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40023800 	.word	0x40023800

08003798 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e040      	b.n	800382c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fd fecc 	bl	8001558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2224      	movs	r2, #36	; 0x24
 80037c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0201 	bic.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fb26 	bl	8003e28 <UART_SetConfig>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d101      	bne.n	80037e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e022      	b.n	800382c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fd7c 	bl	80042ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003802:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003812:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fe03 	bl	8004430 <UART_CheckIdleState>
 800382a:	4603      	mov	r3, r0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	4613      	mov	r3, r2
 8003840:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003846:	2b20      	cmp	r3, #32
 8003848:	d166      	bne.n	8003918 <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <HAL_UART_Transmit_DMA+0x22>
 8003850:	88fb      	ldrh	r3, [r7, #6]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e05f      	b.n	800391a <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_UART_Transmit_DMA+0x34>
 8003864:	2302      	movs	r3, #2
 8003866:	e058      	b.n	800391a <HAL_UART_Transmit_DMA+0xe6>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	88fa      	ldrh	r2, [r7, #6]
 800387a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	88fa      	ldrh	r2, [r7, #6]
 8003882:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2221      	movs	r2, #33	; 0x21
 8003892:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d02b      	beq.n	80038f4 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038a0:	4a20      	ldr	r2, [pc, #128]	; (8003924 <HAL_UART_Transmit_DMA+0xf0>)
 80038a2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038a8:	4a1f      	ldr	r2, [pc, #124]	; (8003928 <HAL_UART_Transmit_DMA+0xf4>)
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038b0:	4a1e      	ldr	r2, [pc, #120]	; (800392c <HAL_UART_Transmit_DMA+0xf8>)
 80038b2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038b8:	2200      	movs	r2, #0
 80038ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c4:	4619      	mov	r1, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3328      	adds	r3, #40	; 0x28
 80038cc:	461a      	mov	r2, r3
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	f7fe f9b2 	bl	8001c38 <HAL_DMA_Start_IT>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00c      	beq.n	80038f4 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2210      	movs	r2, #16
 80038de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2220      	movs	r2, #32
 80038ee:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e012      	b.n	800391a <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2240      	movs	r2, #64	; 0x40
 80038fa:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003912:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	e000      	b.n	800391a <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 8003918:	2302      	movs	r3, #2
  }
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	0800471d 	.word	0x0800471d
 8003928:	0800476d 	.word	0x0800476d
 800392c:	08004855 	.word	0x08004855

08003930 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	4613      	mov	r3, r2
 800393c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003942:	2b20      	cmp	r3, #32
 8003944:	d12c      	bne.n	80039a0 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_UART_Receive_DMA+0x22>
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e025      	b.n	80039a2 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_UART_Receive_DMA+0x34>
 8003960:	2302      	movs	r3, #2
 8003962:	e01e      	b.n	80039a2 <HAL_UART_Receive_DMA+0x72>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d007      	beq.n	8003990 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800398e:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003990:	88fb      	ldrh	r3, [r7, #6]
 8003992:	461a      	mov	r2, r3
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 fe10 	bl	80045bc <UART_Start_Receive_DMA>
 800399c:	4603      	mov	r3, r0
 800399e:	e000      	b.n	80039a2 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 80039a0:	2302      	movs	r3, #2
  }
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80039d2:	4013      	ands	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d113      	bne.n	8003a04 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f003 0320 	and.w	r3, r3, #32
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00e      	beq.n	8003a04 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d009      	beq.n	8003a04 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 81cc 	beq.w	8003d92 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	4798      	blx	r3
      }
      return;
 8003a02:	e1c6      	b.n	8003d92 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80e3 	beq.w	8003bd2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d105      	bne.n	8003a22 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4ba5      	ldr	r3, [pc, #660]	; (8003cb0 <HAL_UART_IRQHandler+0x304>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 80d8 	beq.w	8003bd2 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d010      	beq.n	8003a4e <HAL_UART_IRQHandler+0xa2>
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00b      	beq.n	8003a4e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a44:	f043 0201 	orr.w	r2, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d010      	beq.n	8003a7a <HAL_UART_IRQHandler+0xce>
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00b      	beq.n	8003a7a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2202      	movs	r2, #2
 8003a68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a70:	f043 0204 	orr.w	r2, r3, #4
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d010      	beq.n	8003aa6 <HAL_UART_IRQHandler+0xfa>
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00b      	beq.n	8003aa6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2204      	movs	r2, #4
 8003a94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a9c:	f043 0202 	orr.w	r2, r3, #2
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d015      	beq.n	8003adc <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d104      	bne.n	8003ac4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00b      	beq.n	8003adc <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2208      	movs	r2, #8
 8003aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ad2:	f043 0208 	orr.w	r2, r3, #8
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d011      	beq.n	8003b0a <HAL_UART_IRQHandler+0x15e>
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00c      	beq.n	8003b0a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003af8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b00:	f043 0220 	orr.w	r2, r3, #32
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 8140 	beq.w	8003d96 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00c      	beq.n	8003b3a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d007      	beq.n	8003b3a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b40:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4c:	2b40      	cmp	r3, #64	; 0x40
 8003b4e:	d004      	beq.n	8003b5a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d031      	beq.n	8003bbe <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fdaf 	bl	80046be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6a:	2b40      	cmp	r3, #64	; 0x40
 8003b6c:	d123      	bne.n	8003bb6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b7c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d013      	beq.n	8003bae <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8a:	4a4a      	ldr	r2, [pc, #296]	; (8003cb4 <HAL_UART_IRQHandler+0x308>)
 8003b8c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe f920 	bl	8001dd8 <HAL_DMA_Abort_IT>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d017      	beq.n	8003bce <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003ba8:	4610      	mov	r0, r2
 8003baa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bac:	e00f      	b.n	8003bce <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f91a 	bl	8003de8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb4:	e00b      	b.n	8003bce <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f916 	bl	8003de8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bbc:	e007      	b.n	8003bce <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f912 	bl	8003de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003bcc:	e0e3      	b.n	8003d96 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bce:	bf00      	nop
    return;
 8003bd0:	e0e1      	b.n	8003d96 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	f040 80a7 	bne.w	8003d2a <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 80a1 	beq.w	8003d2a <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	f003 0310 	and.w	r3, r3, #16
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 809b 	beq.w	8003d2a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2210      	movs	r2, #16
 8003bfa:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c06:	2b40      	cmp	r3, #64	; 0x40
 8003c08:	d156      	bne.n	8003cb8 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8003c14:	893b      	ldrh	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 80bf 	beq.w	8003d9a <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c22:	893a      	ldrh	r2, [r7, #8]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	f080 80b8 	bcs.w	8003d9a <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	893a      	ldrh	r2, [r7, #8]
 8003c2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c3c:	d02a      	beq.n	8003c94 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c4c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0201 	bic.w	r2, r2, #1
 8003c5c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c6c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0210 	bic.w	r2, r2, #16
 8003c88:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe f832 	bl	8001cf8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f8a7 	bl	8003dfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003cae:	e074      	b.n	8003d9a <HAL_UART_IRQHandler+0x3ee>
 8003cb0:	04000120 	.word	0x04000120
 8003cb4:	080048d1 	.word	0x080048d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d063      	beq.n	8003d9e <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8003cd6:	897b      	ldrh	r3, [r7, #10]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d060      	beq.n	8003d9e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cea:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0201 	bic.w	r2, r2, #1
 8003cfa:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0210 	bic.w	r2, r2, #16
 8003d1c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d1e:	897b      	ldrh	r3, [r7, #10]
 8003d20:	4619      	mov	r1, r3
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f86a 	bl	8003dfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d28:	e039      	b.n	8003d9e <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00d      	beq.n	8003d50 <HAL_UART_IRQHandler+0x3a4>
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d008      	beq.n	8003d50 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f863 	bl	8003e14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d4e:	e029      	b.n	8003da4 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00d      	beq.n	8003d76 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01a      	beq.n	8003da2 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	4798      	blx	r3
    }
    return;
 8003d74:	e015      	b.n	8003da2 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d011      	beq.n	8003da4 <HAL_UART_IRQHandler+0x3f8>
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00c      	beq.n	8003da4 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fdb6 	bl	80048fc <UART_EndTransmit_IT>
    return;
 8003d90:	e008      	b.n	8003da4 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003d92:	bf00      	nop
 8003d94:	e006      	b.n	8003da4 <HAL_UART_IRQHandler+0x3f8>
    return;
 8003d96:	bf00      	nop
 8003d98:	e004      	b.n	8003da4 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003d9a:	bf00      	nop
 8003d9c:	e002      	b.n	8003da4 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003d9e:	bf00      	nop
 8003da0:	e000      	b.n	8003da4 <HAL_UART_IRQHandler+0x3f8>
    return;
 8003da2:	bf00      	nop
  }

}
 8003da4:	3720      	adds	r7, #32
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop

08003dac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4ba7      	ldr	r3, [pc, #668]	; (80040f0 <UART_SetConfig+0x2c8>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6812      	ldr	r2, [r2, #0]
 8003e5a:	6979      	ldr	r1, [r7, #20]
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a95      	ldr	r2, [pc, #596]	; (80040f4 <UART_SetConfig+0x2cc>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d120      	bne.n	8003ee6 <UART_SetConfig+0xbe>
 8003ea4:	4b94      	ldr	r3, [pc, #592]	; (80040f8 <UART_SetConfig+0x2d0>)
 8003ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d816      	bhi.n	8003ee0 <UART_SetConfig+0xb8>
 8003eb2:	a201      	add	r2, pc, #4	; (adr r2, 8003eb8 <UART_SetConfig+0x90>)
 8003eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb8:	08003ec9 	.word	0x08003ec9
 8003ebc:	08003ed5 	.word	0x08003ed5
 8003ec0:	08003ecf 	.word	0x08003ecf
 8003ec4:	08003edb 	.word	0x08003edb
 8003ec8:	2301      	movs	r3, #1
 8003eca:	77fb      	strb	r3, [r7, #31]
 8003ecc:	e14f      	b.n	800416e <UART_SetConfig+0x346>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	77fb      	strb	r3, [r7, #31]
 8003ed2:	e14c      	b.n	800416e <UART_SetConfig+0x346>
 8003ed4:	2304      	movs	r3, #4
 8003ed6:	77fb      	strb	r3, [r7, #31]
 8003ed8:	e149      	b.n	800416e <UART_SetConfig+0x346>
 8003eda:	2308      	movs	r3, #8
 8003edc:	77fb      	strb	r3, [r7, #31]
 8003ede:	e146      	b.n	800416e <UART_SetConfig+0x346>
 8003ee0:	2310      	movs	r3, #16
 8003ee2:	77fb      	strb	r3, [r7, #31]
 8003ee4:	e143      	b.n	800416e <UART_SetConfig+0x346>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a84      	ldr	r2, [pc, #528]	; (80040fc <UART_SetConfig+0x2d4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d132      	bne.n	8003f56 <UART_SetConfig+0x12e>
 8003ef0:	4b81      	ldr	r3, [pc, #516]	; (80040f8 <UART_SetConfig+0x2d0>)
 8003ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b0c      	cmp	r3, #12
 8003efc:	d828      	bhi.n	8003f50 <UART_SetConfig+0x128>
 8003efe:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <UART_SetConfig+0xdc>)
 8003f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f04:	08003f39 	.word	0x08003f39
 8003f08:	08003f51 	.word	0x08003f51
 8003f0c:	08003f51 	.word	0x08003f51
 8003f10:	08003f51 	.word	0x08003f51
 8003f14:	08003f45 	.word	0x08003f45
 8003f18:	08003f51 	.word	0x08003f51
 8003f1c:	08003f51 	.word	0x08003f51
 8003f20:	08003f51 	.word	0x08003f51
 8003f24:	08003f3f 	.word	0x08003f3f
 8003f28:	08003f51 	.word	0x08003f51
 8003f2c:	08003f51 	.word	0x08003f51
 8003f30:	08003f51 	.word	0x08003f51
 8003f34:	08003f4b 	.word	0x08003f4b
 8003f38:	2300      	movs	r3, #0
 8003f3a:	77fb      	strb	r3, [r7, #31]
 8003f3c:	e117      	b.n	800416e <UART_SetConfig+0x346>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	77fb      	strb	r3, [r7, #31]
 8003f42:	e114      	b.n	800416e <UART_SetConfig+0x346>
 8003f44:	2304      	movs	r3, #4
 8003f46:	77fb      	strb	r3, [r7, #31]
 8003f48:	e111      	b.n	800416e <UART_SetConfig+0x346>
 8003f4a:	2308      	movs	r3, #8
 8003f4c:	77fb      	strb	r3, [r7, #31]
 8003f4e:	e10e      	b.n	800416e <UART_SetConfig+0x346>
 8003f50:	2310      	movs	r3, #16
 8003f52:	77fb      	strb	r3, [r7, #31]
 8003f54:	e10b      	b.n	800416e <UART_SetConfig+0x346>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a69      	ldr	r2, [pc, #420]	; (8004100 <UART_SetConfig+0x2d8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d120      	bne.n	8003fa2 <UART_SetConfig+0x17a>
 8003f60:	4b65      	ldr	r3, [pc, #404]	; (80040f8 <UART_SetConfig+0x2d0>)
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f6a:	2b30      	cmp	r3, #48	; 0x30
 8003f6c:	d013      	beq.n	8003f96 <UART_SetConfig+0x16e>
 8003f6e:	2b30      	cmp	r3, #48	; 0x30
 8003f70:	d814      	bhi.n	8003f9c <UART_SetConfig+0x174>
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	d009      	beq.n	8003f8a <UART_SetConfig+0x162>
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d810      	bhi.n	8003f9c <UART_SetConfig+0x174>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <UART_SetConfig+0x15c>
 8003f7e:	2b10      	cmp	r3, #16
 8003f80:	d006      	beq.n	8003f90 <UART_SetConfig+0x168>
 8003f82:	e00b      	b.n	8003f9c <UART_SetConfig+0x174>
 8003f84:	2300      	movs	r3, #0
 8003f86:	77fb      	strb	r3, [r7, #31]
 8003f88:	e0f1      	b.n	800416e <UART_SetConfig+0x346>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	77fb      	strb	r3, [r7, #31]
 8003f8e:	e0ee      	b.n	800416e <UART_SetConfig+0x346>
 8003f90:	2304      	movs	r3, #4
 8003f92:	77fb      	strb	r3, [r7, #31]
 8003f94:	e0eb      	b.n	800416e <UART_SetConfig+0x346>
 8003f96:	2308      	movs	r3, #8
 8003f98:	77fb      	strb	r3, [r7, #31]
 8003f9a:	e0e8      	b.n	800416e <UART_SetConfig+0x346>
 8003f9c:	2310      	movs	r3, #16
 8003f9e:	77fb      	strb	r3, [r7, #31]
 8003fa0:	e0e5      	b.n	800416e <UART_SetConfig+0x346>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a57      	ldr	r2, [pc, #348]	; (8004104 <UART_SetConfig+0x2dc>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d120      	bne.n	8003fee <UART_SetConfig+0x1c6>
 8003fac:	4b52      	ldr	r3, [pc, #328]	; (80040f8 <UART_SetConfig+0x2d0>)
 8003fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003fb6:	2bc0      	cmp	r3, #192	; 0xc0
 8003fb8:	d013      	beq.n	8003fe2 <UART_SetConfig+0x1ba>
 8003fba:	2bc0      	cmp	r3, #192	; 0xc0
 8003fbc:	d814      	bhi.n	8003fe8 <UART_SetConfig+0x1c0>
 8003fbe:	2b80      	cmp	r3, #128	; 0x80
 8003fc0:	d009      	beq.n	8003fd6 <UART_SetConfig+0x1ae>
 8003fc2:	2b80      	cmp	r3, #128	; 0x80
 8003fc4:	d810      	bhi.n	8003fe8 <UART_SetConfig+0x1c0>
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <UART_SetConfig+0x1a8>
 8003fca:	2b40      	cmp	r3, #64	; 0x40
 8003fcc:	d006      	beq.n	8003fdc <UART_SetConfig+0x1b4>
 8003fce:	e00b      	b.n	8003fe8 <UART_SetConfig+0x1c0>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	77fb      	strb	r3, [r7, #31]
 8003fd4:	e0cb      	b.n	800416e <UART_SetConfig+0x346>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	77fb      	strb	r3, [r7, #31]
 8003fda:	e0c8      	b.n	800416e <UART_SetConfig+0x346>
 8003fdc:	2304      	movs	r3, #4
 8003fde:	77fb      	strb	r3, [r7, #31]
 8003fe0:	e0c5      	b.n	800416e <UART_SetConfig+0x346>
 8003fe2:	2308      	movs	r3, #8
 8003fe4:	77fb      	strb	r3, [r7, #31]
 8003fe6:	e0c2      	b.n	800416e <UART_SetConfig+0x346>
 8003fe8:	2310      	movs	r3, #16
 8003fea:	77fb      	strb	r3, [r7, #31]
 8003fec:	e0bf      	b.n	800416e <UART_SetConfig+0x346>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a45      	ldr	r2, [pc, #276]	; (8004108 <UART_SetConfig+0x2e0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d125      	bne.n	8004044 <UART_SetConfig+0x21c>
 8003ff8:	4b3f      	ldr	r3, [pc, #252]	; (80040f8 <UART_SetConfig+0x2d0>)
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004002:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004006:	d017      	beq.n	8004038 <UART_SetConfig+0x210>
 8004008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800400c:	d817      	bhi.n	800403e <UART_SetConfig+0x216>
 800400e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004012:	d00b      	beq.n	800402c <UART_SetConfig+0x204>
 8004014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004018:	d811      	bhi.n	800403e <UART_SetConfig+0x216>
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <UART_SetConfig+0x1fe>
 800401e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004022:	d006      	beq.n	8004032 <UART_SetConfig+0x20a>
 8004024:	e00b      	b.n	800403e <UART_SetConfig+0x216>
 8004026:	2300      	movs	r3, #0
 8004028:	77fb      	strb	r3, [r7, #31]
 800402a:	e0a0      	b.n	800416e <UART_SetConfig+0x346>
 800402c:	2302      	movs	r3, #2
 800402e:	77fb      	strb	r3, [r7, #31]
 8004030:	e09d      	b.n	800416e <UART_SetConfig+0x346>
 8004032:	2304      	movs	r3, #4
 8004034:	77fb      	strb	r3, [r7, #31]
 8004036:	e09a      	b.n	800416e <UART_SetConfig+0x346>
 8004038:	2308      	movs	r3, #8
 800403a:	77fb      	strb	r3, [r7, #31]
 800403c:	e097      	b.n	800416e <UART_SetConfig+0x346>
 800403e:	2310      	movs	r3, #16
 8004040:	77fb      	strb	r3, [r7, #31]
 8004042:	e094      	b.n	800416e <UART_SetConfig+0x346>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a30      	ldr	r2, [pc, #192]	; (800410c <UART_SetConfig+0x2e4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d125      	bne.n	800409a <UART_SetConfig+0x272>
 800404e:	4b2a      	ldr	r3, [pc, #168]	; (80040f8 <UART_SetConfig+0x2d0>)
 8004050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004054:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004058:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800405c:	d017      	beq.n	800408e <UART_SetConfig+0x266>
 800405e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004062:	d817      	bhi.n	8004094 <UART_SetConfig+0x26c>
 8004064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004068:	d00b      	beq.n	8004082 <UART_SetConfig+0x25a>
 800406a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800406e:	d811      	bhi.n	8004094 <UART_SetConfig+0x26c>
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <UART_SetConfig+0x254>
 8004074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004078:	d006      	beq.n	8004088 <UART_SetConfig+0x260>
 800407a:	e00b      	b.n	8004094 <UART_SetConfig+0x26c>
 800407c:	2301      	movs	r3, #1
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e075      	b.n	800416e <UART_SetConfig+0x346>
 8004082:	2302      	movs	r3, #2
 8004084:	77fb      	strb	r3, [r7, #31]
 8004086:	e072      	b.n	800416e <UART_SetConfig+0x346>
 8004088:	2304      	movs	r3, #4
 800408a:	77fb      	strb	r3, [r7, #31]
 800408c:	e06f      	b.n	800416e <UART_SetConfig+0x346>
 800408e:	2308      	movs	r3, #8
 8004090:	77fb      	strb	r3, [r7, #31]
 8004092:	e06c      	b.n	800416e <UART_SetConfig+0x346>
 8004094:	2310      	movs	r3, #16
 8004096:	77fb      	strb	r3, [r7, #31]
 8004098:	e069      	b.n	800416e <UART_SetConfig+0x346>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a1c      	ldr	r2, [pc, #112]	; (8004110 <UART_SetConfig+0x2e8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d137      	bne.n	8004114 <UART_SetConfig+0x2ec>
 80040a4:	4b14      	ldr	r3, [pc, #80]	; (80040f8 <UART_SetConfig+0x2d0>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80040ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040b2:	d017      	beq.n	80040e4 <UART_SetConfig+0x2bc>
 80040b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040b8:	d817      	bhi.n	80040ea <UART_SetConfig+0x2c2>
 80040ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040be:	d00b      	beq.n	80040d8 <UART_SetConfig+0x2b0>
 80040c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c4:	d811      	bhi.n	80040ea <UART_SetConfig+0x2c2>
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <UART_SetConfig+0x2aa>
 80040ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ce:	d006      	beq.n	80040de <UART_SetConfig+0x2b6>
 80040d0:	e00b      	b.n	80040ea <UART_SetConfig+0x2c2>
 80040d2:	2300      	movs	r3, #0
 80040d4:	77fb      	strb	r3, [r7, #31]
 80040d6:	e04a      	b.n	800416e <UART_SetConfig+0x346>
 80040d8:	2302      	movs	r3, #2
 80040da:	77fb      	strb	r3, [r7, #31]
 80040dc:	e047      	b.n	800416e <UART_SetConfig+0x346>
 80040de:	2304      	movs	r3, #4
 80040e0:	77fb      	strb	r3, [r7, #31]
 80040e2:	e044      	b.n	800416e <UART_SetConfig+0x346>
 80040e4:	2308      	movs	r3, #8
 80040e6:	77fb      	strb	r3, [r7, #31]
 80040e8:	e041      	b.n	800416e <UART_SetConfig+0x346>
 80040ea:	2310      	movs	r3, #16
 80040ec:	77fb      	strb	r3, [r7, #31]
 80040ee:	e03e      	b.n	800416e <UART_SetConfig+0x346>
 80040f0:	efff69f3 	.word	0xefff69f3
 80040f4:	40011000 	.word	0x40011000
 80040f8:	40023800 	.word	0x40023800
 80040fc:	40004400 	.word	0x40004400
 8004100:	40004800 	.word	0x40004800
 8004104:	40004c00 	.word	0x40004c00
 8004108:	40005000 	.word	0x40005000
 800410c:	40011400 	.word	0x40011400
 8004110:	40007800 	.word	0x40007800
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a71      	ldr	r2, [pc, #452]	; (80042e0 <UART_SetConfig+0x4b8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d125      	bne.n	800416a <UART_SetConfig+0x342>
 800411e:	4b71      	ldr	r3, [pc, #452]	; (80042e4 <UART_SetConfig+0x4bc>)
 8004120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004124:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004128:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800412c:	d017      	beq.n	800415e <UART_SetConfig+0x336>
 800412e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004132:	d817      	bhi.n	8004164 <UART_SetConfig+0x33c>
 8004134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004138:	d00b      	beq.n	8004152 <UART_SetConfig+0x32a>
 800413a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800413e:	d811      	bhi.n	8004164 <UART_SetConfig+0x33c>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <UART_SetConfig+0x324>
 8004144:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004148:	d006      	beq.n	8004158 <UART_SetConfig+0x330>
 800414a:	e00b      	b.n	8004164 <UART_SetConfig+0x33c>
 800414c:	2300      	movs	r3, #0
 800414e:	77fb      	strb	r3, [r7, #31]
 8004150:	e00d      	b.n	800416e <UART_SetConfig+0x346>
 8004152:	2302      	movs	r3, #2
 8004154:	77fb      	strb	r3, [r7, #31]
 8004156:	e00a      	b.n	800416e <UART_SetConfig+0x346>
 8004158:	2304      	movs	r3, #4
 800415a:	77fb      	strb	r3, [r7, #31]
 800415c:	e007      	b.n	800416e <UART_SetConfig+0x346>
 800415e:	2308      	movs	r3, #8
 8004160:	77fb      	strb	r3, [r7, #31]
 8004162:	e004      	b.n	800416e <UART_SetConfig+0x346>
 8004164:	2310      	movs	r3, #16
 8004166:	77fb      	strb	r3, [r7, #31]
 8004168:	e001      	b.n	800416e <UART_SetConfig+0x346>
 800416a:	2310      	movs	r3, #16
 800416c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004176:	d15b      	bne.n	8004230 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004178:	7ffb      	ldrb	r3, [r7, #31]
 800417a:	2b08      	cmp	r3, #8
 800417c:	d827      	bhi.n	80041ce <UART_SetConfig+0x3a6>
 800417e:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <UART_SetConfig+0x35c>)
 8004180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004184:	080041a9 	.word	0x080041a9
 8004188:	080041b1 	.word	0x080041b1
 800418c:	080041b9 	.word	0x080041b9
 8004190:	080041cf 	.word	0x080041cf
 8004194:	080041bf 	.word	0x080041bf
 8004198:	080041cf 	.word	0x080041cf
 800419c:	080041cf 	.word	0x080041cf
 80041a0:	080041cf 	.word	0x080041cf
 80041a4:	080041c7 	.word	0x080041c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041a8:	f7fe fede 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 80041ac:	61b8      	str	r0, [r7, #24]
        break;
 80041ae:	e013      	b.n	80041d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041b0:	f7fe feee 	bl	8002f90 <HAL_RCC_GetPCLK2Freq>
 80041b4:	61b8      	str	r0, [r7, #24]
        break;
 80041b6:	e00f      	b.n	80041d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041b8:	4b4b      	ldr	r3, [pc, #300]	; (80042e8 <UART_SetConfig+0x4c0>)
 80041ba:	61bb      	str	r3, [r7, #24]
        break;
 80041bc:	e00c      	b.n	80041d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041be:	f7fe fe11 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 80041c2:	61b8      	str	r0, [r7, #24]
        break;
 80041c4:	e008      	b.n	80041d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ca:	61bb      	str	r3, [r7, #24]
        break;
 80041cc:	e004      	b.n	80041d8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	77bb      	strb	r3, [r7, #30]
        break;
 80041d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d074      	beq.n	80042c8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	005a      	lsls	r2, r3, #1
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	085b      	lsrs	r3, r3, #1
 80041e8:	441a      	add	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b0f      	cmp	r3, #15
 80041fa:	d916      	bls.n	800422a <UART_SetConfig+0x402>
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004202:	d212      	bcs.n	800422a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	b29b      	uxth	r3, r3
 8004208:	f023 030f 	bic.w	r3, r3, #15
 800420c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	085b      	lsrs	r3, r3, #1
 8004212:	b29b      	uxth	r3, r3
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	b29a      	uxth	r2, r3
 800421a:	89fb      	ldrh	r3, [r7, #14]
 800421c:	4313      	orrs	r3, r2
 800421e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	89fa      	ldrh	r2, [r7, #14]
 8004226:	60da      	str	r2, [r3, #12]
 8004228:	e04e      	b.n	80042c8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	77bb      	strb	r3, [r7, #30]
 800422e:	e04b      	b.n	80042c8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004230:	7ffb      	ldrb	r3, [r7, #31]
 8004232:	2b08      	cmp	r3, #8
 8004234:	d827      	bhi.n	8004286 <UART_SetConfig+0x45e>
 8004236:	a201      	add	r2, pc, #4	; (adr r2, 800423c <UART_SetConfig+0x414>)
 8004238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423c:	08004261 	.word	0x08004261
 8004240:	08004269 	.word	0x08004269
 8004244:	08004271 	.word	0x08004271
 8004248:	08004287 	.word	0x08004287
 800424c:	08004277 	.word	0x08004277
 8004250:	08004287 	.word	0x08004287
 8004254:	08004287 	.word	0x08004287
 8004258:	08004287 	.word	0x08004287
 800425c:	0800427f 	.word	0x0800427f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004260:	f7fe fe82 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 8004264:	61b8      	str	r0, [r7, #24]
        break;
 8004266:	e013      	b.n	8004290 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004268:	f7fe fe92 	bl	8002f90 <HAL_RCC_GetPCLK2Freq>
 800426c:	61b8      	str	r0, [r7, #24]
        break;
 800426e:	e00f      	b.n	8004290 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004270:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <UART_SetConfig+0x4c0>)
 8004272:	61bb      	str	r3, [r7, #24]
        break;
 8004274:	e00c      	b.n	8004290 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004276:	f7fe fdb5 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 800427a:	61b8      	str	r0, [r7, #24]
        break;
 800427c:	e008      	b.n	8004290 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800427e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004282:	61bb      	str	r3, [r7, #24]
        break;
 8004284:	e004      	b.n	8004290 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004286:	2300      	movs	r3, #0
 8004288:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	77bb      	strb	r3, [r7, #30]
        break;
 800428e:	bf00      	nop
    }

    if (pclk != 0U)
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d018      	beq.n	80042c8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	085a      	lsrs	r2, r3, #1
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	441a      	add	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	2b0f      	cmp	r3, #15
 80042b0:	d908      	bls.n	80042c4 <UART_SetConfig+0x49c>
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b8:	d204      	bcs.n	80042c4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	60da      	str	r2, [r3, #12]
 80042c2:	e001      	b.n	80042c8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80042d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3720      	adds	r7, #32
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40007c00 	.word	0x40007c00
 80042e4:	40023800 	.word	0x40023800
 80042e8:	00f42400 	.word	0x00f42400

080042ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01a      	beq.n	8004402 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ea:	d10a      	bne.n	8004402 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	605a      	str	r2, [r3, #4]
  }
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af02      	add	r7, sp, #8
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004440:	f7fd fa2e 	bl	80018a0 <HAL_GetTick>
 8004444:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b08      	cmp	r3, #8
 8004452:	d10e      	bne.n	8004472 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004454:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f82d 	bl	80044c2 <UART_WaitOnFlagUntilTimeout>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e023      	b.n	80044ba <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b04      	cmp	r3, #4
 800447e:	d10e      	bne.n	800449e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004480:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f817 	bl	80044c2 <UART_WaitOnFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e00d      	b.n	80044ba <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	603b      	str	r3, [r7, #0]
 80044ce:	4613      	mov	r3, r2
 80044d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044d2:	e05e      	b.n	8004592 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044da:	d05a      	beq.n	8004592 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044dc:	f7fd f9e0 	bl	80018a0 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d302      	bcc.n	80044f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d11b      	bne.n	800452a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004500:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0201 	bic.w	r2, r2, #1
 8004510:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2220      	movs	r2, #32
 8004516:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e043      	b.n	80045b2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d02c      	beq.n	8004592 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004546:	d124      	bne.n	8004592 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004550:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004560:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0201 	bic.w	r2, r2, #1
 8004570:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2220      	movs	r2, #32
 8004576:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2220      	movs	r2, #32
 800457c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2220      	movs	r2, #32
 8004582:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e00f      	b.n	80045b2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69da      	ldr	r2, [r3, #28]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	4013      	ands	r3, r2
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	429a      	cmp	r2, r3
 80045a0:	bf0c      	ite	eq
 80045a2:	2301      	moveq	r3, #1
 80045a4:	2300      	movne	r3, #0
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	461a      	mov	r2, r3
 80045aa:	79fb      	ldrb	r3, [r7, #7]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d091      	beq.n	80044d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	4613      	mov	r3, r2
 80045c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	88fa      	ldrh	r2, [r7, #6]
 80045d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2222      	movs	r2, #34	; 0x22
 80045e4:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d02b      	beq.n	8004646 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f2:	4a25      	ldr	r2, [pc, #148]	; (8004688 <UART_Start_Receive_DMA+0xcc>)
 80045f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fa:	4a24      	ldr	r2, [pc, #144]	; (800468c <UART_Start_Receive_DMA+0xd0>)
 80045fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004602:	4a23      	ldr	r2, [pc, #140]	; (8004690 <UART_Start_Receive_DMA+0xd4>)
 8004604:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	2200      	movs	r2, #0
 800460c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3324      	adds	r3, #36	; 0x24
 8004618:	4619      	mov	r1, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461e:	461a      	mov	r2, r3
 8004620:	88fb      	ldrh	r3, [r7, #6]
 8004622:	f7fd fb09 	bl	8001c38 <HAL_DMA_Start_IT>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00c      	beq.n	8004646 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2210      	movs	r2, #16
 8004630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e01c      	b.n	8004680 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800465c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0201 	orr.w	r2, r2, #1
 800466c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800467c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	08004789 	.word	0x08004789
 800468c:	0800481d 	.word	0x0800481d
 8004690:	08004855 	.word	0x08004855

08004694 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80046aa:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2220      	movs	r2, #32
 80046b0:	679a      	str	r2, [r3, #120]	; 0x78
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046d4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0201 	bic.w	r2, r2, #1
 80046e4:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d107      	bne.n	80046fe <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0210 	bic.w	r2, r2, #16
 80046fc:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2220      	movs	r2, #32
 8004702:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004732:	d014      	beq.n	800475e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800474a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800475a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800475c:	e002      	b.n	8004764 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f7ff fb24 	bl	8003dac <HAL_UART_TxCpltCallback>
}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004778:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f7ff fb20 	bl	8003dc0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004780:	bf00      	nop
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800479e:	d02a      	beq.n	80047f6 <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047b6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0201 	bic.w	r2, r2, #1
 80047c6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047d6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2220      	movs	r2, #32
 80047dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d107      	bne.n	80047f6 <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0210 	bic.w	r2, r2, #16
 80047f4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d107      	bne.n	800480e <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004804:	4619      	mov	r1, r3
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f7ff faf8 	bl	8003dfc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800480c:	e002      	b.n	8004814 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f7fc f882 	bl	8000918 <HAL_UART_RxCpltCallback>
}
 8004814:	bf00      	nop
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004828:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800482e:	2b01      	cmp	r3, #1
 8004830:	d109      	bne.n	8004846 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004838:	085b      	lsrs	r3, r3, #1
 800483a:	b29b      	uxth	r3, r3
 800483c:	4619      	mov	r1, r3
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f7ff fadc 	bl	8003dfc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004844:	e002      	b.n	800484c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f7ff fac4 	bl	8003dd4 <HAL_UART_RxHalfCpltCallback>
}
 800484c:	bf00      	nop
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004866:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800486c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004878:	2b80      	cmp	r3, #128	; 0x80
 800487a:	d109      	bne.n	8004890 <UART_DMAError+0x3c>
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	2b21      	cmp	r3, #33	; 0x21
 8004880:	d106      	bne.n	8004890 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2200      	movs	r2, #0
 8004886:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800488a:	6978      	ldr	r0, [r7, #20]
 800488c:	f7ff ff02 	bl	8004694 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489a:	2b40      	cmp	r3, #64	; 0x40
 800489c:	d109      	bne.n	80048b2 <UART_DMAError+0x5e>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b22      	cmp	r3, #34	; 0x22
 80048a2:	d106      	bne.n	80048b2 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80048ac:	6978      	ldr	r0, [r7, #20]
 80048ae:	f7ff ff06 	bl	80046be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048b8:	f043 0210 	orr.w	r2, r3, #16
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048c2:	6978      	ldr	r0, [r7, #20]
 80048c4:	f7ff fa90 	bl	8003de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048c8:	bf00      	nop
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f7ff fa7a 	bl	8003de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048f4:	bf00      	nop
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004912:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2220      	movs	r2, #32
 8004918:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff fa43 	bl	8003dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004926:	bf00      	nop
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <__libc_init_array>:
 8004930:	b570      	push	{r4, r5, r6, lr}
 8004932:	4d0d      	ldr	r5, [pc, #52]	; (8004968 <__libc_init_array+0x38>)
 8004934:	4c0d      	ldr	r4, [pc, #52]	; (800496c <__libc_init_array+0x3c>)
 8004936:	1b64      	subs	r4, r4, r5
 8004938:	10a4      	asrs	r4, r4, #2
 800493a:	2600      	movs	r6, #0
 800493c:	42a6      	cmp	r6, r4
 800493e:	d109      	bne.n	8004954 <__libc_init_array+0x24>
 8004940:	4d0b      	ldr	r5, [pc, #44]	; (8004970 <__libc_init_array+0x40>)
 8004942:	4c0c      	ldr	r4, [pc, #48]	; (8004974 <__libc_init_array+0x44>)
 8004944:	f000 f840 	bl	80049c8 <_init>
 8004948:	1b64      	subs	r4, r4, r5
 800494a:	10a4      	asrs	r4, r4, #2
 800494c:	2600      	movs	r6, #0
 800494e:	42a6      	cmp	r6, r4
 8004950:	d105      	bne.n	800495e <__libc_init_array+0x2e>
 8004952:	bd70      	pop	{r4, r5, r6, pc}
 8004954:	f855 3b04 	ldr.w	r3, [r5], #4
 8004958:	4798      	blx	r3
 800495a:	3601      	adds	r6, #1
 800495c:	e7ee      	b.n	800493c <__libc_init_array+0xc>
 800495e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004962:	4798      	blx	r3
 8004964:	3601      	adds	r6, #1
 8004966:	e7f2      	b.n	800494e <__libc_init_array+0x1e>
 8004968:	08004c98 	.word	0x08004c98
 800496c:	08004c98 	.word	0x08004c98
 8004970:	08004c98 	.word	0x08004c98
 8004974:	08004c9c 	.word	0x08004c9c

08004978 <memcpy>:
 8004978:	440a      	add	r2, r1
 800497a:	4291      	cmp	r1, r2
 800497c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004980:	d100      	bne.n	8004984 <memcpy+0xc>
 8004982:	4770      	bx	lr
 8004984:	b510      	push	{r4, lr}
 8004986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800498a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800498e:	4291      	cmp	r1, r2
 8004990:	d1f9      	bne.n	8004986 <memcpy+0xe>
 8004992:	bd10      	pop	{r4, pc}

08004994 <memset>:
 8004994:	4402      	add	r2, r0
 8004996:	4603      	mov	r3, r0
 8004998:	4293      	cmp	r3, r2
 800499a:	d100      	bne.n	800499e <memset+0xa>
 800499c:	4770      	bx	lr
 800499e:	f803 1b01 	strb.w	r1, [r3], #1
 80049a2:	e7f9      	b.n	8004998 <memset+0x4>

080049a4 <strncmp>:
 80049a4:	b510      	push	{r4, lr}
 80049a6:	b16a      	cbz	r2, 80049c4 <strncmp+0x20>
 80049a8:	3901      	subs	r1, #1
 80049aa:	1884      	adds	r4, r0, r2
 80049ac:	f810 3b01 	ldrb.w	r3, [r0], #1
 80049b0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d103      	bne.n	80049c0 <strncmp+0x1c>
 80049b8:	42a0      	cmp	r0, r4
 80049ba:	d001      	beq.n	80049c0 <strncmp+0x1c>
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1f5      	bne.n	80049ac <strncmp+0x8>
 80049c0:	1a98      	subs	r0, r3, r2
 80049c2:	bd10      	pop	{r4, pc}
 80049c4:	4610      	mov	r0, r2
 80049c6:	e7fc      	b.n	80049c2 <strncmp+0x1e>

080049c8 <_init>:
 80049c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ca:	bf00      	nop
 80049cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ce:	bc08      	pop	{r3}
 80049d0:	469e      	mov	lr, r3
 80049d2:	4770      	bx	lr

080049d4 <_fini>:
 80049d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d6:	bf00      	nop
 80049d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049da:	bc08      	pop	{r3}
 80049dc:	469e      	mov	lr, r3
 80049de:	4770      	bx	lr
