
GPS_Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037d0  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  080039c8  080039c8  000139c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c70  08003c70  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  08003c70  08003c70  00013c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c78  08003c78  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c78  08003c78  00013c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c7c  08003c7c  00013c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08003c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f0  20000038  08003cb8  00020038  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  08003cb8  00020728  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000849d  00000000  00000000  00020066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000168c  00000000  00000000  00028503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  00029b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000680  00000000  00000000  0002a298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d89  00000000  00000000  0002a918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000875e  00000000  00000000  0004f6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7a41  00000000  00000000  00057dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013f840  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bdc  00000000  00000000  0013f894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000038 	.word	0x20000038
 8000214:	00000000 	.word	0x00000000
 8000218:	080039b0 	.word	0x080039b0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000003c 	.word	0x2000003c
 8000234:	080039b0 	.word	0x080039b0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <byteToHexString>:
static char uart_buffer[GPS_UART_BUFFER_SIZE]; //buffer for parsing vtg packets (velocity packets)

static void parseGGA(char* data);
static void parseVTG(char* data);

static char byteToHexString(unsigned int checkSumHalf) {
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
    char charOut = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	73fb      	strb	r3, [r7, #15]

    if (checkSumHalf >= 0 && checkSumHalf <= 9){
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b09      	cmp	r3, #9
 8000540:	d804      	bhi.n	800054c <byteToHexString+0x1c>
        charOut = checkSumHalf + 0x30;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	3330      	adds	r3, #48	; 0x30
 8000548:	73fb      	strb	r3, [r7, #15]
 800054a:	e009      	b.n	8000560 <byteToHexString+0x30>
    }
    else if (checkSumHalf >= 0xA && checkSumHalf <= 0xF){
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b09      	cmp	r3, #9
 8000550:	d906      	bls.n	8000560 <byteToHexString+0x30>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b0f      	cmp	r3, #15
 8000556:	d803      	bhi.n	8000560 <byteToHexString+0x30>
        charOut = checkSumHalf + 0x37;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	b2db      	uxtb	r3, r3
 800055c:	3337      	adds	r3, #55	; 0x37
 800055e:	73fb      	strb	r3, [r7, #15]
    }
    return charOut;
 8000560:	7bfb      	ldrb	r3, [r7, #15]
}
 8000562:	4618      	mov	r0, r3
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <asciiToHex>:

static char asciiToHex(unsigned char asciiSymbol) {
 800056e:	b480      	push	{r7}
 8000570:	b085      	sub	sp, #20
 8000572:	af00      	add	r7, sp, #0
 8000574:	4603      	mov	r3, r0
 8000576:	71fb      	strb	r3, [r7, #7]
    char hexOut = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	73fb      	strb	r3, [r7, #15]
    if (asciiSymbol == 0x2E)
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	2b2e      	cmp	r3, #46	; 0x2e
 8000580:	d102      	bne.n	8000588 <asciiToHex+0x1a>
        hexOut = 0x10;
 8000582:	2310      	movs	r3, #16
 8000584:	73fb      	strb	r3, [r7, #15]
 8000586:	e012      	b.n	80005ae <asciiToHex+0x40>
    else if (asciiSymbol >= 0x30 && asciiSymbol <= 0x39){
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b2f      	cmp	r3, #47	; 0x2f
 800058c:	d906      	bls.n	800059c <asciiToHex+0x2e>
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	2b39      	cmp	r3, #57	; 0x39
 8000592:	d803      	bhi.n	800059c <asciiToHex+0x2e>
        hexOut = asciiSymbol - 0x30;
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	3b30      	subs	r3, #48	; 0x30
 8000598:	73fb      	strb	r3, [r7, #15]
 800059a:	e008      	b.n	80005ae <asciiToHex+0x40>
    }
    else if (asciiSymbol >= 0x41 && asciiSymbol <= 0x46){
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	2b40      	cmp	r3, #64	; 0x40
 80005a0:	d905      	bls.n	80005ae <asciiToHex+0x40>
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	2b46      	cmp	r3, #70	; 0x46
 80005a6:	d802      	bhi.n	80005ae <asciiToHex+0x40>
        hexOut = asciiSymbol - 0x37; //Letter "F"(ASCII 0x46) becomes 0xF
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	3b37      	subs	r3, #55	; 0x37
 80005ac:	73fb      	strb	r3, [r7, #15]
    }
    return hexOut;
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <isNMEAChecksumValid>:
 * Given an NMEA string starting after the $, verifies the integrity of the stirng
 * using the checksum
 * @param string
 * @return True if string is a valid gps string, false otherwise
 */
static bool isNMEAChecksumValid(char* string){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    uint16_t i = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	81fb      	strh	r3, [r7, #14]
    uint8_t checksum = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	737b      	strb	r3, [r7, #13]

    while(string[i] != '*'){
 80005cc:	e009      	b.n	80005e2 <isNMEAChecksumValid+0x26>
        checksum ^= string[i];
 80005ce:	89fb      	ldrh	r3, [r7, #14]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	4413      	add	r3, r2
 80005d4:	781a      	ldrb	r2, [r3, #0]
 80005d6:	7b7b      	ldrb	r3, [r7, #13]
 80005d8:	4053      	eors	r3, r2
 80005da:	737b      	strb	r3, [r7, #13]
        i++;
 80005dc:	89fb      	ldrh	r3, [r7, #14]
 80005de:	3301      	adds	r3, #1
 80005e0:	81fb      	strh	r3, [r7, #14]
    while(string[i] != '*'){
 80005e2:	89fb      	ldrh	r3, [r7, #14]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	4413      	add	r3, r2
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b2a      	cmp	r3, #42	; 0x2a
 80005ec:	d1ef      	bne.n	80005ce <isNMEAChecksumValid+0x12>
    }
    i++;
 80005ee:	89fb      	ldrh	r3, [r7, #14]
 80005f0:	3301      	adds	r3, #1
 80005f2:	81fb      	strh	r3, [r7, #14]

    return byteToHexString((checksum & 0xF0) >> 4) == string[i] &&  byteToHexString(checksum & 0x0F) == string[i+1];
 80005f4:	7b7b      	ldrb	r3, [r7, #13]
 80005f6:	091b      	lsrs	r3, r3, #4
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ff98 	bl	8000530 <byteToHexString>
 8000600:	4603      	mov	r3, r0
 8000602:	4619      	mov	r1, r3
 8000604:	89fb      	ldrh	r3, [r7, #14]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4299      	cmp	r1, r3
 800060e:	d110      	bne.n	8000632 <isNMEAChecksumValid+0x76>
 8000610:	7b7b      	ldrb	r3, [r7, #13]
 8000612:	f003 030f 	and.w	r3, r3, #15
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ff8a 	bl	8000530 <byteToHexString>
 800061c:	4603      	mov	r3, r0
 800061e:	4619      	mov	r1, r3
 8000620:	89fb      	ldrh	r3, [r7, #14]
 8000622:	3301      	adds	r3, #1
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	4413      	add	r3, r2
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4299      	cmp	r1, r3
 800062c:	d101      	bne.n	8000632 <isNMEAChecksumValid+0x76>
 800062e:	2301      	movs	r3, #1
 8000630:	e000      	b.n	8000634 <isNMEAChecksumValid+0x78>
 8000632:	2300      	movs	r3, #0
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
}
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <getData>:

GPSData getData() {
 8000644:	b4b0      	push	{r4, r5, r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	return gps_data;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a08      	ldr	r2, [pc, #32]	; (8000670 <getData+0x2c>)
 8000650:	461c      	mov	r4, r3
 8000652:	4615      	mov	r5, r2
 8000654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000660:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bcb0      	pop	{r4, r5, r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000678 	.word	0x20000678

08000674 <parseIncomingGPSData>:

void parseIncomingGPSData(){
 8000674:	b580      	push	{r7, lr}
 8000676:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800067a:	af00      	add	r7, sp, #0

	static bool currently_parsing = false;
	static uint16_t buffer_index = 0;
	int b = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc

	uint8_t a[GPS_UART_BUFFER_SIZE] = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	3304      	adds	r3, #4
 800068a:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f003 f973 	bl	800397c <memset>

	HAL_UART_Receive(&huart4, a, GPS_UART_BUFFER_SIZE, 5000);
 8000696:	1d39      	adds	r1, r7, #4
 8000698:	f241 3388 	movw	r3, #5000	; 0x1388
 800069c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006a0:	485f      	ldr	r0, [pc, #380]	; (8000820 <parseIncomingGPSData+0x1ac>)
 80006a2:	f002 fc9e 	bl	8002fe2 <HAL_UART_Receive>
	HAL_Delay(100);
 80006a6:	2064      	movs	r0, #100	; 0x64
 80006a8:	f001 f85c 	bl	8001764 <HAL_Delay>

	for (int i = 0; i < GPS_UART_BUFFER_SIZE; i++) {
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 80006b2:	e06f      	b.n	8000794 <parseIncomingGPSData+0x120>
		if (a[i] == '$') { //Beginning of Packet
 80006b4:	1d3a      	adds	r2, r7, #4
 80006b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80006ba:	4413      	add	r3, r2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b24      	cmp	r3, #36	; 0x24
 80006c0:	d106      	bne.n	80006d0 <parseIncomingGPSData+0x5c>
			currently_parsing = true;
 80006c2:	4b58      	ldr	r3, [pc, #352]	; (8000824 <parseIncomingGPSData+0x1b0>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	701a      	strb	r2, [r3, #0]
			buffer_index = 0;
 80006c8:	4b57      	ldr	r3, [pc, #348]	; (8000828 <parseIncomingGPSData+0x1b4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	801a      	strh	r2, [r3, #0]
 80006ce:	e05c      	b.n	800078a <parseIncomingGPSData+0x116>
		} else if (a[i] == '\r') { //End of Packet
 80006d0:	1d3a      	adds	r2, r7, #4
 80006d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80006d6:	4413      	add	r3, r2
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b0d      	cmp	r3, #13
 80006dc:	d136      	bne.n	800074c <parseIncomingGPSData+0xd8>
			 if (strncmp(GPS_GGA_MESSAGE, uart_buffer, 5) == 0){
 80006de:	2205      	movs	r2, #5
 80006e0:	4952      	ldr	r1, [pc, #328]	; (800082c <parseIncomingGPSData+0x1b8>)
 80006e2:	4853      	ldr	r0, [pc, #332]	; (8000830 <parseIncomingGPSData+0x1bc>)
 80006e4:	f003 f952 	bl	800398c <strncmp>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d111      	bne.n	8000712 <parseIncomingGPSData+0x9e>
				 memcpy(gga_buffer, uart_buffer, GPS_UART_BUFFER_SIZE);
 80006ee:	4a51      	ldr	r2, [pc, #324]	; (8000834 <parseIncomingGPSData+0x1c0>)
 80006f0:	4b4e      	ldr	r3, [pc, #312]	; (800082c <parseIncomingGPSData+0x1b8>)
 80006f2:	4610      	mov	r0, r2
 80006f4:	4619      	mov	r1, r3
 80006f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006fa:	461a      	mov	r2, r3
 80006fc:	f003 f930 	bl	8003960 <memcpy>
				 new_gga_data = true;
 8000700:	4b4d      	ldr	r3, [pc, #308]	; (8000838 <parseIncomingGPSData+0x1c4>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
				 b += 10;
 8000706:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800070a:	330a      	adds	r3, #10
 800070c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8000710:	e018      	b.n	8000744 <parseIncomingGPSData+0xd0>
			 } else if (strncmp(GPS_VTG_MESSAGE, uart_buffer, 5) == 0){
 8000712:	2205      	movs	r2, #5
 8000714:	4945      	ldr	r1, [pc, #276]	; (800082c <parseIncomingGPSData+0x1b8>)
 8000716:	4849      	ldr	r0, [pc, #292]	; (800083c <parseIncomingGPSData+0x1c8>)
 8000718:	f003 f938 	bl	800398c <strncmp>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d110      	bne.n	8000744 <parseIncomingGPSData+0xd0>
				memcpy(vtg_buffer, uart_buffer, GPS_UART_BUFFER_SIZE);
 8000722:	4a47      	ldr	r2, [pc, #284]	; (8000840 <parseIncomingGPSData+0x1cc>)
 8000724:	4b41      	ldr	r3, [pc, #260]	; (800082c <parseIncomingGPSData+0x1b8>)
 8000726:	4610      	mov	r0, r2
 8000728:	4619      	mov	r1, r3
 800072a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800072e:	461a      	mov	r2, r3
 8000730:	f003 f916 	bl	8003960 <memcpy>
				new_vtg_data = true;
 8000734:	4b43      	ldr	r3, [pc, #268]	; (8000844 <parseIncomingGPSData+0x1d0>)
 8000736:	2201      	movs	r2, #1
 8000738:	701a      	strb	r2, [r3, #0]
				b += 20;
 800073a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800073e:	3314      	adds	r3, #20
 8000740:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
			 } else {
//				 debug("Received NMEA that was neither GPVTG or GPGGA!");
			 }
			 currently_parsing = false;
 8000744:	4b37      	ldr	r3, [pc, #220]	; (8000824 <parseIncomingGPSData+0x1b0>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
 800074a:	e01e      	b.n	800078a <parseIncomingGPSData+0x116>
		} else if (currently_parsing){
 800074c:	4b35      	ldr	r3, [pc, #212]	; (8000824 <parseIncomingGPSData+0x1b0>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d01a      	beq.n	800078a <parseIncomingGPSData+0x116>
			uart_buffer[buffer_index] = a[i];
 8000754:	4b34      	ldr	r3, [pc, #208]	; (8000828 <parseIncomingGPSData+0x1b4>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	4619      	mov	r1, r3
 800075a:	1d3a      	adds	r2, r7, #4
 800075c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000760:	4413      	add	r3, r2
 8000762:	781a      	ldrb	r2, [r3, #0]
 8000764:	4b31      	ldr	r3, [pc, #196]	; (800082c <parseIncomingGPSData+0x1b8>)
 8000766:	545a      	strb	r2, [r3, r1]
			buffer_index = (buffer_index + 1) % GPS_UART_BUFFER_SIZE; //make sure we dont cause a memory fault here
 8000768:	4b2f      	ldr	r3, [pc, #188]	; (8000828 <parseIncomingGPSData+0x1b4>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	3301      	adds	r3, #1
 800076e:	4a36      	ldr	r2, [pc, #216]	; (8000848 <parseIncomingGPSData+0x1d4>)
 8000770:	fb82 1203 	smull	r1, r2, r2, r3
 8000774:	1151      	asrs	r1, r2, #5
 8000776:	17da      	asrs	r2, r3, #31
 8000778:	1a8a      	subs	r2, r1, r2
 800077a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800077e:	fb01 f202 	mul.w	r2, r1, r2
 8000782:	1a9a      	subs	r2, r3, r2
 8000784:	b292      	uxth	r2, r2
 8000786:	4b28      	ldr	r3, [pc, #160]	; (8000828 <parseIncomingGPSData+0x1b4>)
 8000788:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < GPS_UART_BUFFER_SIZE; i++) {
 800078a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800078e:	3301      	adds	r3, #1
 8000790:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8000794:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000798:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800079c:	db8a      	blt.n	80006b4 <parseIncomingGPSData+0x40>
		}
	}

    if (!new_gga_data && !new_vtg_data){ //if no data has been copied over
 800079e:	4b26      	ldr	r3, [pc, #152]	; (8000838 <parseIncomingGPSData+0x1c4>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	f083 0301 	eor.w	r3, r3, #1
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d006      	beq.n	80007ba <parseIncomingGPSData+0x146>
 80007ac:	4b25      	ldr	r3, [pc, #148]	; (8000844 <parseIncomingGPSData+0x1d0>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	f083 0301 	eor.w	r3, r3, #1
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d12c      	bne.n	8000814 <parseIncomingGPSData+0x1a0>
        return;
    }

    if (new_gga_data){
 80007ba:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <parseIncomingGPSData+0x1c4>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d011      	beq.n	80007e6 <parseIncomingGPSData+0x172>
        new_gga_data = false;
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <parseIncomingGPSData+0x1c4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
        if (isNMEAChecksumValid(gga_buffer)){
 80007c8:	481a      	ldr	r0, [pc, #104]	; (8000834 <parseIncomingGPSData+0x1c0>)
 80007ca:	f7ff fef7 	bl	80005bc <isNMEAChecksumValid>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d008      	beq.n	80007e6 <parseIncomingGPSData+0x172>
            data_available = false;
 80007d4:	4b1d      	ldr	r3, [pc, #116]	; (800084c <parseIncomingGPSData+0x1d8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
            parseGGA(gga_buffer);
 80007da:	4816      	ldr	r0, [pc, #88]	; (8000834 <parseIncomingGPSData+0x1c0>)
 80007dc:	f000 fa08 	bl	8000bf0 <parseGGA>
            data_available = true;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <parseIncomingGPSData+0x1d8>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]
//            debug("Failed checksum when parsing a GPGGA (positional) packet!");
//            debug(gga_buffer);
        }
    }

    if (new_vtg_data){
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <parseIncomingGPSData+0x1d0>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d013      	beq.n	8000816 <parseIncomingGPSData+0x1a2>
        new_vtg_data = false;
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <parseIncomingGPSData+0x1d0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
        if (isNMEAChecksumValid(vtg_buffer)){
 80007f4:	4812      	ldr	r0, [pc, #72]	; (8000840 <parseIncomingGPSData+0x1cc>)
 80007f6:	f7ff fee1 	bl	80005bc <isNMEAChecksumValid>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d00a      	beq.n	8000816 <parseIncomingGPSData+0x1a2>
            data_available = false;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <parseIncomingGPSData+0x1d8>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
            parseVTG(vtg_buffer);
 8000806:	480e      	ldr	r0, [pc, #56]	; (8000840 <parseIncomingGPSData+0x1cc>)
 8000808:	f000 f8e2 	bl	80009d0 <parseVTG>
            data_available = true;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <parseIncomingGPSData+0x1d8>)
 800080e:	2201      	movs	r2, #1
 8000810:	701a      	strb	r2, [r3, #0]
 8000812:	e000      	b.n	8000816 <parseIncomingGPSData+0x1a2>
        return;
 8000814:	bf00      	nop
//            debug(vtg_buffer);
         }
    }


}
 8000816:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200006a0 	.word	0x200006a0
 8000824:	20000634 	.word	0x20000634
 8000828:	20000636 	.word	0x20000636
 800082c:	20000440 	.word	0x20000440
 8000830:	08003c38 	.word	0x08003c38
 8000834:	20000058 	.word	0x20000058
 8000838:	20000056 	.word	0x20000056
 800083c:	08003c40 	.word	0x08003c40
 8000840:	2000024c 	.word	0x2000024c
 8000844:	20000055 	.word	0x20000055
 8000848:	10624dd3 	.word	0x10624dd3
 800084c:	20000054 	.word	0x20000054

08000850 <init>:

void init() {
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0

	const uint8_t CFG_NMEA[16] = { 0x17, 0x20, 0b00011000, 0x40, 0x08, 0x01, 0x00, 0x00, 0x00, 0b01110110, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00 };
 8000856:	4b47      	ldr	r3, [pc, #284]	; (8000974 <init+0x124>)
 8000858:	463c      	mov	r4, r7
 800085a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800085c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart4, CFG_NMEA, sizeof(CFG_NMEA), 5000);
 8000860:	4639      	mov	r1, r7
 8000862:	f241 3388 	movw	r3, #5000	; 0x1388
 8000866:	2210      	movs	r2, #16
 8000868:	4843      	ldr	r0, [pc, #268]	; (8000978 <init+0x128>)
 800086a:	f002 fb27 	bl	8002ebc <HAL_UART_Transmit>
	HAL_Delay(300);
 800086e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000872:	f000 ff77 	bl	8001764 <HAL_Delay>

	HAL_UART_Transmit(&huart4, PUBX_CONFIG_NMEA, sizeof(PUBX_CONFIG_NMEA), 5000);
 8000876:	4b41      	ldr	r3, [pc, #260]	; (800097c <init+0x12c>)
 8000878:	6819      	ldr	r1, [r3, #0]
 800087a:	f241 3388 	movw	r3, #5000	; 0x1388
 800087e:	2204      	movs	r2, #4
 8000880:	483d      	ldr	r0, [pc, #244]	; (8000978 <init+0x128>)
 8000882:	f002 fb1b 	bl	8002ebc <HAL_UART_Transmit>
	HAL_Delay(300);
 8000886:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800088a:	f000 ff6b 	bl	8001764 <HAL_Delay>

	HAL_UART_Transmit(&huart4, PUBX_SET_GGA, sizeof(PUBX_SET_GGA), 5000);
 800088e:	4b3c      	ldr	r3, [pc, #240]	; (8000980 <init+0x130>)
 8000890:	6819      	ldr	r1, [r3, #0]
 8000892:	f241 3388 	movw	r3, #5000	; 0x1388
 8000896:	2204      	movs	r2, #4
 8000898:	4837      	ldr	r0, [pc, #220]	; (8000978 <init+0x128>)
 800089a:	f002 fb0f 	bl	8002ebc <HAL_UART_Transmit>
	HAL_Delay(300);
 800089e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008a2:	f000 ff5f 	bl	8001764 <HAL_Delay>

	HAL_UART_Transmit(&huart4, PUBX_SET_VTG, sizeof(PUBX_SET_VTG), 5000);
 80008a6:	4b37      	ldr	r3, [pc, #220]	; (8000984 <init+0x134>)
 80008a8:	6819      	ldr	r1, [r3, #0]
 80008aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80008ae:	2204      	movs	r2, #4
 80008b0:	4831      	ldr	r0, [pc, #196]	; (8000978 <init+0x128>)
 80008b2:	f002 fb03 	bl	8002ebc <HAL_UART_Transmit>
	HAL_Delay(300);
 80008b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008ba:	f000 ff53 	bl	8001764 <HAL_Delay>

	HAL_UART_Transmit(&huart4, PUBX_SET_RMC_OFF, sizeof(PUBX_SET_RMC_OFF), 5000);
 80008be:	4b32      	ldr	r3, [pc, #200]	; (8000988 <init+0x138>)
 80008c0:	6819      	ldr	r1, [r3, #0]
 80008c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80008c6:	2204      	movs	r2, #4
 80008c8:	482b      	ldr	r0, [pc, #172]	; (8000978 <init+0x128>)
 80008ca:	f002 faf7 	bl	8002ebc <HAL_UART_Transmit>
	HAL_Delay(300);
 80008ce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008d2:	f000 ff47 	bl	8001764 <HAL_Delay>

	HAL_UART_Transmit(&huart4, PUBX_SET_GSA_OFF, sizeof(PUBX_SET_GSA_OFF), 5000);
 80008d6:	4b2d      	ldr	r3, [pc, #180]	; (800098c <init+0x13c>)
 80008d8:	6819      	ldr	r1, [r3, #0]
 80008da:	f241 3388 	movw	r3, #5000	; 0x1388
 80008de:	2204      	movs	r2, #4
 80008e0:	4825      	ldr	r0, [pc, #148]	; (8000978 <init+0x128>)
 80008e2:	f002 faeb 	bl	8002ebc <HAL_UART_Transmit>
	HAL_Delay(300);
 80008e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008ea:	f000 ff3b 	bl	8001764 <HAL_Delay>

	HAL_UART_Transmit(&huart4, PUBX_SET_GLL_OFF, sizeof(PUBX_SET_GLL_OFF), 5000);
 80008ee:	4b28      	ldr	r3, [pc, #160]	; (8000990 <init+0x140>)
 80008f0:	6819      	ldr	r1, [r3, #0]
 80008f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80008f6:	2204      	movs	r2, #4
 80008f8:	481f      	ldr	r0, [pc, #124]	; (8000978 <init+0x128>)
 80008fa:	f002 fadf 	bl	8002ebc <HAL_UART_Transmit>
	HAL_Delay(300);
 80008fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000902:	f000 ff2f 	bl	8001764 <HAL_Delay>

	HAL_UART_Transmit(&huart4, PUBX_SET_GNS_OFF, sizeof(PUBX_SET_GNS_OFF), 5000);
 8000906:	4b23      	ldr	r3, [pc, #140]	; (8000994 <init+0x144>)
 8000908:	6819      	ldr	r1, [r3, #0]
 800090a:	f241 3388 	movw	r3, #5000	; 0x1388
 800090e:	2204      	movs	r2, #4
 8000910:	4819      	ldr	r0, [pc, #100]	; (8000978 <init+0x128>)
 8000912:	f002 fad3 	bl	8002ebc <HAL_UART_Transmit>
	HAL_Delay(300);
 8000916:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800091a:	f000 ff23 	bl	8001764 <HAL_Delay>

//	HAL_UART_Transmit(&huart4, PMTK_SET_NMEA_OUTPUT_GGAVTG, sizeof(PMTK_SET_NMEA_OUTPUT_GGAVTG), 5000);
//	HAL_Delay(300);

	HAL_UART_Transmit(&huart4, PMTK_SET_NMEA_UPDATE_10HZ, sizeof(PMTK_SET_NMEA_UPDATE_10HZ), 5000);
 800091e:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <init+0x148>)
 8000920:	6819      	ldr	r1, [r3, #0]
 8000922:	f241 3388 	movw	r3, #5000	; 0x1388
 8000926:	2204      	movs	r2, #4
 8000928:	4813      	ldr	r0, [pc, #76]	; (8000978 <init+0x128>)
 800092a:	f002 fac7 	bl	8002ebc <HAL_UART_Transmit>
	HAL_Delay(300);
 800092e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000932:	f000 ff17 	bl	8001764 <HAL_Delay>

	HAL_UART_Transmit(&huart4, PMTK_API_SET_FIX_CTL_5HZ, sizeof(PMTK_API_SET_FIX_CTL_5HZ), 5000);
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <init+0x14c>)
 8000938:	6819      	ldr	r1, [r3, #0]
 800093a:	f241 3388 	movw	r3, #5000	; 0x1388
 800093e:	2204      	movs	r2, #4
 8000940:	480d      	ldr	r0, [pc, #52]	; (8000978 <init+0x128>)
 8000942:	f002 fabb 	bl	8002ebc <HAL_UART_Transmit>
	HAL_Delay(300);
 8000946:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800094a:	f000 ff0b 	bl	8001764 <HAL_Delay>

	HAL_UART_Transmit(&huart4, PMTK_ENABLE_WAAS, sizeof(PMTK_ENABLE_WAAS), 5000);
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <init+0x150>)
 8000950:	6819      	ldr	r1, [r3, #0]
 8000952:	f241 3388 	movw	r3, #5000	; 0x1388
 8000956:	2204      	movs	r2, #4
 8000958:	4807      	ldr	r0, [pc, #28]	; (8000978 <init+0x128>)
 800095a:	f002 faaf 	bl	8002ebc <HAL_UART_Transmit>
	HAL_Delay(300);
 800095e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000962:	f000 feff 	bl	8001764 <HAL_Delay>

	configured = true;
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <init+0x154>)
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
}
 800096c:	bf00      	nop
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	bd90      	pop	{r4, r7, pc}
 8000974:	08003c48 	.word	0x08003c48
 8000978:	200006a0 	.word	0x200006a0
 800097c:	2000000c 	.word	0x2000000c
 8000980:	20000010 	.word	0x20000010
 8000984:	20000014 	.word	0x20000014
 8000988:	20000018 	.word	0x20000018
 800098c:	2000001c 	.word	0x2000001c
 8000990:	20000024 	.word	0x20000024
 8000994:	20000020 	.word	0x20000020
 8000998:	20000000 	.word	0x20000000
 800099c:	20000004 	.word	0x20000004
 80009a0:	20000008 	.word	0x20000008
 80009a4:	20000057 	.word	0x20000057

080009a8 <isNewDataAvailable>:


bool isNewDataAvailable(){
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
    if (data_available){
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <isNewDataAvailable+0x24>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d004      	beq.n	80009be <isNewDataAvailable+0x16>
        data_available = false;
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <isNewDataAvailable+0x24>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
        return true;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e000      	b.n	80009c0 <isNewDataAvailable+0x18>
    }
    return false;
 80009be:	2300      	movs	r3, #0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000054 	.word	0x20000054

080009d0 <parseVTG>:

static void parseVTG(char* data){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

    //static so that we dont allocate these variables every time
    static char rawHeading[6] = {0, 0, 0, 0, 0, 0};
    static char rawGroundSpeed[8] = {0, 0, 0, 0, 0, 0, 0, 0};

    int comma = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
    int i = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
    int j = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]

    while (data[j] != '*') {
 80009e4:	e030      	b.n	8000a48 <parseVTG+0x78>
        char numData = asciiToHex(data[j]);
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	4413      	add	r3, r2
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fdbd 	bl	800056e <asciiToHex>
 80009f4:	4603      	mov	r3, r0
 80009f6:	73fb      	strb	r3, [r7, #15]
        if (data[j] == ',') {
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b2c      	cmp	r3, #44	; 0x2c
 8000a02:	d104      	bne.n	8000a0e <parseVTG+0x3e>
            comma++;
 8000a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a06:	3301      	adds	r3, #1
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
            i = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
        }

        if (comma == 1 && (i != 0)) {
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d108      	bne.n	8000a26 <parseVTG+0x56>
 8000a14:	6a3b      	ldr	r3, [r7, #32]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d005      	beq.n	8000a26 <parseVTG+0x56>
            rawHeading[i] = numData;
 8000a1a:	4a6e      	ldr	r2, [pc, #440]	; (8000bd4 <parseVTG+0x204>)
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
 8000a1e:	4413      	add	r3, r2
 8000a20:	7bfa      	ldrb	r2, [r7, #15]
 8000a22:	701a      	strb	r2, [r3, #0]
 8000a24:	e00a      	b.n	8000a3c <parseVTG+0x6c>
        } else if (comma == 7 && (i != 0)) {
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	2b07      	cmp	r3, #7
 8000a2a:	d107      	bne.n	8000a3c <parseVTG+0x6c>
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d004      	beq.n	8000a3c <parseVTG+0x6c>
            rawGroundSpeed[i] = numData;
 8000a32:	4a69      	ldr	r2, [pc, #420]	; (8000bd8 <parseVTG+0x208>)
 8000a34:	6a3b      	ldr	r3, [r7, #32]
 8000a36:	4413      	add	r3, r2
 8000a38:	7bfa      	ldrb	r2, [r7, #15]
 8000a3a:	701a      	strb	r2, [r3, #0]
        }

        i++;
 8000a3c:	6a3b      	ldr	r3, [r7, #32]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
        j++;
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3301      	adds	r3, #1
 8000a46:	61fb      	str	r3, [r7, #28]
    while (data[j] != '*') {
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b2a      	cmp	r3, #42	; 0x2a
 8000a52:	d1c8      	bne.n	80009e6 <parseVTG+0x16>
    }

    i = 1;
 8000a54:	2301      	movs	r3, #1
 8000a56:	623b      	str	r3, [r7, #32]
    long int multiplier = 10;
 8000a58:	230a      	movs	r3, #10
 8000a5a:	61bb      	str	r3, [r7, #24]
    int decimalPoint = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]

    gps_data.heading = 0;
 8000a60:	4b5e      	ldr	r3, [pc, #376]	; (8000bdc <parseVTG+0x20c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	839a      	strh	r2, [r3, #28]
    float tHeading = 0;
 8000a66:	f04f 0300 	mov.w	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]
    for (i = 1; i < 6; i++) //this code first generates an 5 digit decimal number
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	623b      	str	r3, [r7, #32]
 8000a70:	e026      	b.n	8000ac0 <parseVTG+0xf0>
    {
        if (rawHeading[i] == 0x10)//check for decimal point
 8000a72:	4a58      	ldr	r2, [pc, #352]	; (8000bd4 <parseVTG+0x204>)
 8000a74:	6a3b      	ldr	r3, [r7, #32]
 8000a76:	4413      	add	r3, r2
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b10      	cmp	r3, #16
 8000a7c:	d102      	bne.n	8000a84 <parseVTG+0xb4>
        {
            decimalPoint = i;
 8000a7e:	6a3b      	ldr	r3, [r7, #32]
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	e01a      	b.n	8000aba <parseVTG+0xea>
        } else {
            tHeading += (float) (rawHeading[i]*100000 / multiplier);
 8000a84:	4a53      	ldr	r2, [pc, #332]	; (8000bd4 <parseVTG+0x204>)
 8000a86:	6a3b      	ldr	r3, [r7, #32]
 8000a88:	4413      	add	r3, r2
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b54      	ldr	r3, [pc, #336]	; (8000be0 <parseVTG+0x210>)
 8000a90:	fb03 f202 	mul.w	r2, r3, r2
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a9a:	ee07 3a90 	vmov	s15, r3
 8000a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aa2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aaa:	edc7 7a04 	vstr	s15, [r7, #16]
            multiplier *= 10;
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4413      	add	r3, r2
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	61bb      	str	r3, [r7, #24]
    for (i = 1; i < 6; i++) //this code first generates an 5 digit decimal number
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	3301      	adds	r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
 8000ac0:	6a3b      	ldr	r3, [r7, #32]
 8000ac2:	2b05      	cmp	r3, #5
 8000ac4:	ddd5      	ble.n	8000a72 <parseVTG+0xa2>
        }
    }
    decimalPoint = decimalPoint - 2;
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	3b02      	subs	r3, #2
 8000aca:	617b      	str	r3, [r7, #20]
    multiplier = 10000;
 8000acc:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ad0:	61bb      	str	r3, [r7, #24]
    while (decimalPoint > 0) //then divdes it according to the placement of the decimal
 8000ad2:	e00a      	b.n	8000aea <parseVTG+0x11a>
    {
        multiplier = multiplier / 10;
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	4a43      	ldr	r2, [pc, #268]	; (8000be4 <parseVTG+0x214>)
 8000ad8:	fb82 1203 	smull	r1, r2, r2, r3
 8000adc:	1092      	asrs	r2, r2, #2
 8000ade:	17db      	asrs	r3, r3, #31
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	61bb      	str	r3, [r7, #24]
        decimalPoint--;
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	617b      	str	r3, [r7, #20]
    while (decimalPoint > 0) //then divdes it according to the placement of the decimal
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	dcf1      	bgt.n	8000ad4 <parseVTG+0x104>
    }
    gps_data.heading = (int)(tHeading / multiplier);
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	ee07 3a90 	vmov	s15, r3
 8000af6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000afa:	edd7 6a04 	vldr	s13, [r7, #16]
 8000afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b06:	ee17 3a90 	vmov	r3, s15
 8000b0a:	b21a      	sxth	r2, r3
 8000b0c:	4b33      	ldr	r3, [pc, #204]	; (8000bdc <parseVTG+0x20c>)
 8000b0e:	839a      	strh	r2, [r3, #28]

    //	//calculate speed - tricky because of unknown 1-3 digits preceeding the decimal
    i = 1;
 8000b10:	2301      	movs	r3, #1
 8000b12:	623b      	str	r3, [r7, #32]
    multiplier = 10;
 8000b14:	230a      	movs	r3, #10
 8000b16:	61bb      	str	r3, [r7, #24]
    decimalPoint = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
    gps_data.groundSpeed = 0;
 8000b1c:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <parseVTG+0x20c>)
 8000b1e:	f04f 0200 	mov.w	r2, #0
 8000b22:	615a      	str	r2, [r3, #20]
    for (i = 1; i < 7; i++) //this code first generates an 6 digit decimal number
 8000b24:	2301      	movs	r3, #1
 8000b26:	623b      	str	r3, [r7, #32]
 8000b28:	e028      	b.n	8000b7c <parseVTG+0x1ac>
    {
        if (rawGroundSpeed[i] == 0x10)//check for decimal point
 8000b2a:	4a2b      	ldr	r2, [pc, #172]	; (8000bd8 <parseVTG+0x208>)
 8000b2c:	6a3b      	ldr	r3, [r7, #32]
 8000b2e:	4413      	add	r3, r2
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b10      	cmp	r3, #16
 8000b34:	d102      	bne.n	8000b3c <parseVTG+0x16c>
        {
            decimalPoint = i;
 8000b36:	6a3b      	ldr	r3, [r7, #32]
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	e01c      	b.n	8000b76 <parseVTG+0x1a6>
        } else {
            gps_data.groundSpeed += (float) (rawGroundSpeed[i]*1000000 / multiplier);
 8000b3c:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <parseVTG+0x20c>)
 8000b3e:	ed93 7a05 	vldr	s14, [r3, #20]
 8000b42:	4a25      	ldr	r2, [pc, #148]	; (8000bd8 <parseVTG+0x208>)
 8000b44:	6a3b      	ldr	r3, [r7, #32]
 8000b46:	4413      	add	r3, r2
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	4b26      	ldr	r3, [pc, #152]	; (8000be8 <parseVTG+0x218>)
 8000b4e:	fb03 f202 	mul.w	r2, r3, r2
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b58:	ee07 3a90 	vmov	s15, r3
 8000b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <parseVTG+0x20c>)
 8000b66:	edc3 7a05 	vstr	s15, [r3, #20]
            multiplier = multiplier * 10;
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4413      	add	r3, r2
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	61bb      	str	r3, [r7, #24]
    for (i = 1; i < 7; i++) //this code first generates an 6 digit decimal number
 8000b76:	6a3b      	ldr	r3, [r7, #32]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	623b      	str	r3, [r7, #32]
 8000b7c:	6a3b      	ldr	r3, [r7, #32]
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	ddd3      	ble.n	8000b2a <parseVTG+0x15a>
        }
    }
    decimalPoint = decimalPoint - 2;
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3b02      	subs	r3, #2
 8000b86:	617b      	str	r3, [r7, #20]
    multiplier = 100000;
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <parseVTG+0x210>)
 8000b8a:	61bb      	str	r3, [r7, #24]
    while (decimalPoint > 0) //then divdes it according to the placement of the decimal
 8000b8c:	e00a      	b.n	8000ba4 <parseVTG+0x1d4>
    {
        multiplier = multiplier / 10;
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <parseVTG+0x214>)
 8000b92:	fb82 1203 	smull	r1, r2, r2, r3
 8000b96:	1092      	asrs	r2, r2, #2
 8000b98:	17db      	asrs	r3, r3, #31
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	61bb      	str	r3, [r7, #24]
        decimalPoint--;
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
    while (decimalPoint > 0) //then divdes it according to the placement of the decimal
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	dcf1      	bgt.n	8000b8e <parseVTG+0x1be>
    }
    gps_data.groundSpeed = gps_data.groundSpeed / multiplier;
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <parseVTG+0x20c>)
 8000bac:	edd3 6a05 	vldr	s13, [r3, #20]
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	ee07 3a90 	vmov	s15, r3
 8000bb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <parseVTG+0x20c>)
 8000bc0:	edc3 7a05 	vstr	s15, [r3, #20]

    HAL_Delay(100);
 8000bc4:	2064      	movs	r0, #100	; 0x64
 8000bc6:	f000 fdcd 	bl	8001764 <HAL_Delay>
}
 8000bca:	bf00      	nop
 8000bcc:	3728      	adds	r7, #40	; 0x28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000638 	.word	0x20000638
 8000bd8:	20000640 	.word	0x20000640
 8000bdc:	20000678 	.word	0x20000678
 8000be0:	000186a0 	.word	0x000186a0
 8000be4:	66666667 	.word	0x66666667
 8000be8:	000f4240 	.word	0x000f4240
 8000bec:	00000000 	.word	0x00000000

08000bf0 <parseGGA>:
/**
 * Parses a GGA type NEMA string and modifies the GPS data struct with the applicable
 * fields
 * @param data
 */
static void parseGGA(char* data){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

    int comma = 0; //comma counting so that we know what header we're parsing for
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    int i = 0; //index for the current position of the field value
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
    int j = 0; //7th character is where data will start. index for the byte index in the counter
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
    static char rawAltitude[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    static char latitudeNS = 0;
    static char longitudeEW = 0;
    static char positionFix = 0;

    while (data[j] != '*') {
 8000c04:	e087      	b.n	8000d16 <parseGGA+0x126>
        char numData = asciiToHex(data[j]);
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fcad 	bl	800056e <asciiToHex>
 8000c14:	4603      	mov	r3, r0
 8000c16:	73fb      	strb	r3, [r7, #15]

        if (data[j] == ',') {
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b2c      	cmp	r3, #44	; 0x2c
 8000c22:	d104      	bne.n	8000c2e <parseGGA+0x3e>
            comma++;
 8000c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c26:	3301      	adds	r3, #1
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
            i = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
        }

        if ((comma == 1) && (i != 0)) {
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d108      	bne.n	8000c46 <parseGGA+0x56>
 8000c34:	6a3b      	ldr	r3, [r7, #32]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d005      	beq.n	8000c46 <parseGGA+0x56>
            rawTime[i] = numData;
 8000c3a:	4a27      	ldr	r2, [pc, #156]	; (8000cd8 <parseGGA+0xe8>)
 8000c3c:	6a3b      	ldr	r3, [r7, #32]
 8000c3e:	4413      	add	r3, r2
 8000c40:	7bfa      	ldrb	r2, [r7, #15]
 8000c42:	701a      	strb	r2, [r3, #0]
 8000c44:	e061      	b.n	8000d0a <parseGGA+0x11a>
        } else if ((comma == 2) && (i != 0)) {
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d108      	bne.n	8000c5e <parseGGA+0x6e>
 8000c4c:	6a3b      	ldr	r3, [r7, #32]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d005      	beq.n	8000c5e <parseGGA+0x6e>
            rawLatitude[i] = numData;
 8000c52:	4a22      	ldr	r2, [pc, #136]	; (8000cdc <parseGGA+0xec>)
 8000c54:	6a3b      	ldr	r3, [r7, #32]
 8000c56:	4413      	add	r3, r2
 8000c58:	7bfa      	ldrb	r2, [r7, #15]
 8000c5a:	701a      	strb	r2, [r3, #0]
 8000c5c:	e055      	b.n	8000d0a <parseGGA+0x11a>

        } else if ((comma == 3) && (i != 0)) {
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	2b03      	cmp	r3, #3
 8000c62:	d109      	bne.n	8000c78 <parseGGA+0x88>
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d006      	beq.n	8000c78 <parseGGA+0x88>
            latitudeNS = data[j];
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	4413      	add	r3, r2
 8000c70:	781a      	ldrb	r2, [r3, #0]
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <parseGGA+0xf0>)
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e048      	b.n	8000d0a <parseGGA+0x11a>

        } else if ((comma == 4) && (i != 0)) {
 8000c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	d108      	bne.n	8000c90 <parseGGA+0xa0>
 8000c7e:	6a3b      	ldr	r3, [r7, #32]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d005      	beq.n	8000c90 <parseGGA+0xa0>
            rawLongitude[i] = numData;
 8000c84:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <parseGGA+0xf4>)
 8000c86:	6a3b      	ldr	r3, [r7, #32]
 8000c88:	4413      	add	r3, r2
 8000c8a:	7bfa      	ldrb	r2, [r7, #15]
 8000c8c:	701a      	strb	r2, [r3, #0]
 8000c8e:	e03c      	b.n	8000d0a <parseGGA+0x11a>

        } else if ((comma == 5) && (i != 0)) {
 8000c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c92:	2b05      	cmp	r3, #5
 8000c94:	d109      	bne.n	8000caa <parseGGA+0xba>
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d006      	beq.n	8000caa <parseGGA+0xba>
            longitudeEW = data[j];
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	781a      	ldrb	r2, [r3, #0]
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <parseGGA+0xf8>)
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	e02f      	b.n	8000d0a <parseGGA+0x11a>

        } else if ((comma == 6) && (i != 0)) {
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	2b06      	cmp	r3, #6
 8000cae:	d106      	bne.n	8000cbe <parseGGA+0xce>
 8000cb0:	6a3b      	ldr	r3, [r7, #32]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <parseGGA+0xce>
            positionFix = numData;
 8000cb6:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <parseGGA+0xfc>)
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	7013      	strb	r3, [r2, #0]
 8000cbc:	e025      	b.n	8000d0a <parseGGA+0x11a>

        } else if ((comma == 7) && (i != 0)) {
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	2b07      	cmp	r3, #7
 8000cc2:	d117      	bne.n	8000cf4 <parseGGA+0x104>
 8000cc4:	6a3b      	ldr	r3, [r7, #32]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d014      	beq.n	8000cf4 <parseGGA+0x104>
            rawSatellites[i] = numData;
 8000cca:	4a09      	ldr	r2, [pc, #36]	; (8000cf0 <parseGGA+0x100>)
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
 8000cce:	4413      	add	r3, r2
 8000cd0:	7bfa      	ldrb	r2, [r7, #15]
 8000cd2:	701a      	strb	r2, [r3, #0]
 8000cd4:	e019      	b.n	8000d0a <parseGGA+0x11a>
 8000cd6:	bf00      	nop
 8000cd8:	20000648 	.word	0x20000648
 8000cdc:	20000654 	.word	0x20000654
 8000ce0:	2000065e 	.word	0x2000065e
 8000ce4:	20000660 	.word	0x20000660
 8000ce8:	2000066b 	.word	0x2000066b
 8000cec:	2000066c 	.word	0x2000066c
 8000cf0:	20000028 	.word	0x20000028
        } else  if ((comma == 9) && (i != 0)) {
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf6:	2b09      	cmp	r3, #9
 8000cf8:	d107      	bne.n	8000d0a <parseGGA+0x11a>
 8000cfa:	6a3b      	ldr	r3, [r7, #32]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d004      	beq.n	8000d0a <parseGGA+0x11a>
            rawAltitude[i] = numData;
 8000d00:	4acd      	ldr	r2, [pc, #820]	; (8001038 <parseGGA+0x448>)
 8000d02:	6a3b      	ldr	r3, [r7, #32]
 8000d04:	4413      	add	r3, r2
 8000d06:	7bfa      	ldrb	r2, [r7, #15]
 8000d08:	701a      	strb	r2, [r3, #0]
        }

        i++;
 8000d0a:	6a3b      	ldr	r3, [r7, #32]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	623b      	str	r3, [r7, #32]
        j++;
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	3301      	adds	r3, #1
 8000d14:	61fb      	str	r3, [r7, #28]
    while (data[j] != '*') {
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8000d20:	f47f af71 	bne.w	8000c06 <parseGGA+0x16>
    }

    //now we've got all the valid data placed in our buffers. Modify gps data struct to match

    //calculate time
    gps_data.utcTime = (float) rawTime[1] * 100000;
 8000d24:	4bc5      	ldr	r3, [pc, #788]	; (800103c <parseGGA+0x44c>)
 8000d26:	785b      	ldrb	r3, [r3, #1]
 8000d28:	ee07 3a90 	vmov	s15, r3
 8000d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d30:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8001040 <parseGGA+0x450>
 8000d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d38:	4bc2      	ldr	r3, [pc, #776]	; (8001044 <parseGGA+0x454>)
 8000d3a:	edc3 7a04 	vstr	s15, [r3, #16]
    gps_data.utcTime += (float) rawTime[2] * 10000;
 8000d3e:	4bc1      	ldr	r3, [pc, #772]	; (8001044 <parseGGA+0x454>)
 8000d40:	ed93 7a04 	vldr	s14, [r3, #16]
 8000d44:	4bbd      	ldr	r3, [pc, #756]	; (800103c <parseGGA+0x44c>)
 8000d46:	789b      	ldrb	r3, [r3, #2]
 8000d48:	ee07 3a90 	vmov	s15, r3
 8000d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d50:	eddf 6abd 	vldr	s13, [pc, #756]	; 8001048 <parseGGA+0x458>
 8000d54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d5c:	4bb9      	ldr	r3, [pc, #740]	; (8001044 <parseGGA+0x454>)
 8000d5e:	edc3 7a04 	vstr	s15, [r3, #16]
    gps_data.utcTime += (float) rawTime[3] * 1000;
 8000d62:	4bb8      	ldr	r3, [pc, #736]	; (8001044 <parseGGA+0x454>)
 8000d64:	ed93 7a04 	vldr	s14, [r3, #16]
 8000d68:	4bb4      	ldr	r3, [pc, #720]	; (800103c <parseGGA+0x44c>)
 8000d6a:	78db      	ldrb	r3, [r3, #3]
 8000d6c:	ee07 3a90 	vmov	s15, r3
 8000d70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d74:	eddf 6ab5 	vldr	s13, [pc, #724]	; 800104c <parseGGA+0x45c>
 8000d78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d80:	4bb0      	ldr	r3, [pc, #704]	; (8001044 <parseGGA+0x454>)
 8000d82:	edc3 7a04 	vstr	s15, [r3, #16]
    gps_data.utcTime += (float) rawTime[4] * 100;
 8000d86:	4baf      	ldr	r3, [pc, #700]	; (8001044 <parseGGA+0x454>)
 8000d88:	ed93 7a04 	vldr	s14, [r3, #16]
 8000d8c:	4bab      	ldr	r3, [pc, #684]	; (800103c <parseGGA+0x44c>)
 8000d8e:	791b      	ldrb	r3, [r3, #4]
 8000d90:	ee07 3a90 	vmov	s15, r3
 8000d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d98:	eddf 6aad 	vldr	s13, [pc, #692]	; 8001050 <parseGGA+0x460>
 8000d9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da4:	4ba7      	ldr	r3, [pc, #668]	; (8001044 <parseGGA+0x454>)
 8000da6:	edc3 7a04 	vstr	s15, [r3, #16]
    gps_data.utcTime += (float) rawTime[5] * 10;
 8000daa:	4ba6      	ldr	r3, [pc, #664]	; (8001044 <parseGGA+0x454>)
 8000dac:	ed93 7a04 	vldr	s14, [r3, #16]
 8000db0:	4ba2      	ldr	r3, [pc, #648]	; (800103c <parseGGA+0x44c>)
 8000db2:	795b      	ldrb	r3, [r3, #5]
 8000db4:	ee07 3a90 	vmov	s15, r3
 8000db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dbc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000dc0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dc8:	4b9e      	ldr	r3, [pc, #632]	; (8001044 <parseGGA+0x454>)
 8000dca:	edc3 7a04 	vstr	s15, [r3, #16]
    gps_data.utcTime += (float) rawTime[6] * 1;
 8000dce:	4b9d      	ldr	r3, [pc, #628]	; (8001044 <parseGGA+0x454>)
 8000dd0:	ed93 7a04 	vldr	s14, [r3, #16]
 8000dd4:	4b99      	ldr	r3, [pc, #612]	; (800103c <parseGGA+0x44c>)
 8000dd6:	799b      	ldrb	r3, [r3, #6]
 8000dd8:	ee07 3a90 	vmov	s15, r3
 8000ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de4:	4b97      	ldr	r3, [pc, #604]	; (8001044 <parseGGA+0x454>)
 8000de6:	edc3 7a04 	vstr	s15, [r3, #16]
    //Decimal Point
    gps_data.utcTime += (float) rawTime[8] * 0.1;
 8000dea:	4b96      	ldr	r3, [pc, #600]	; (8001044 <parseGGA+0x454>)
 8000dec:	edd3 7a04 	vldr	s15, [r3, #16]
 8000df0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000df4:	4b91      	ldr	r3, [pc, #580]	; (800103c <parseGGA+0x44c>)
 8000df6:	7a1b      	ldrb	r3, [r3, #8]
 8000df8:	ee07 3a90 	vmov	s15, r3
 8000dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e04:	ed9f 5b82 	vldr	d5, [pc, #520]	; 8001010 <parseGGA+0x420>
 8000e08:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e0c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e14:	4b8b      	ldr	r3, [pc, #556]	; (8001044 <parseGGA+0x454>)
 8000e16:	edc3 7a04 	vstr	s15, [r3, #16]
    gps_data.utcTime += (float) rawTime[9] * 0.01;
 8000e1a:	4b8a      	ldr	r3, [pc, #552]	; (8001044 <parseGGA+0x454>)
 8000e1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e20:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e24:	4b85      	ldr	r3, [pc, #532]	; (800103c <parseGGA+0x44c>)
 8000e26:	7a5b      	ldrb	r3, [r3, #9]
 8000e28:	ee07 3a90 	vmov	s15, r3
 8000e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e34:	ed9f 5b78 	vldr	d5, [pc, #480]	; 8001018 <parseGGA+0x428>
 8000e38:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e3c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e40:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e44:	4b7f      	ldr	r3, [pc, #508]	; (8001044 <parseGGA+0x454>)
 8000e46:	edc3 7a04 	vstr	s15, [r3, #16]
    gps_data.utcTime += (float) rawTime[10] * 0.001;
 8000e4a:	4b7e      	ldr	r3, [pc, #504]	; (8001044 <parseGGA+0x454>)
 8000e4c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e50:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e54:	4b79      	ldr	r3, [pc, #484]	; (800103c <parseGGA+0x44c>)
 8000e56:	7a9b      	ldrb	r3, [r3, #10]
 8000e58:	ee07 3a90 	vmov	s15, r3
 8000e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e64:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 8001020 <parseGGA+0x430>
 8000e68:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e6c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e70:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e74:	4b73      	ldr	r3, [pc, #460]	; (8001044 <parseGGA+0x454>)
 8000e76:	edc3 7a04 	vstr	s15, [r3, #16]

    //calculate latitude
    gps_data.latitude = rawLatitude[3]*10.0;
 8000e7a:	4b76      	ldr	r3, [pc, #472]	; (8001054 <parseGGA+0x464>)
 8000e7c:	78db      	ldrb	r3, [r3, #3]
 8000e7e:	ee07 3a90 	vmov	s15, r3
 8000e82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e86:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000e8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e8e:	4b6d      	ldr	r3, [pc, #436]	; (8001044 <parseGGA+0x454>)
 8000e90:	ed83 7b00 	vstr	d7, [r3]
    gps_data.latitude += rawLatitude[4]*1.0;
 8000e94:	4b6b      	ldr	r3, [pc, #428]	; (8001044 <parseGGA+0x454>)
 8000e96:	ed93 6b00 	vldr	d6, [r3]
 8000e9a:	4b6e      	ldr	r3, [pc, #440]	; (8001054 <parseGGA+0x464>)
 8000e9c:	791b      	ldrb	r3, [r3, #4]
 8000e9e:	ee07 3a90 	vmov	s15, r3
 8000ea2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ea6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000eaa:	4b66      	ldr	r3, [pc, #408]	; (8001044 <parseGGA+0x454>)
 8000eac:	ed83 7b00 	vstr	d7, [r3]
    gps_data.latitude += rawLatitude[6]*0.1;
 8000eb0:	4b64      	ldr	r3, [pc, #400]	; (8001044 <parseGGA+0x454>)
 8000eb2:	ed93 6b00 	vldr	d6, [r3]
 8000eb6:	4b67      	ldr	r3, [pc, #412]	; (8001054 <parseGGA+0x464>)
 8000eb8:	799b      	ldrb	r3, [r3, #6]
 8000eba:	ee07 3a90 	vmov	s15, r3
 8000ebe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ec2:	ed9f 5b53 	vldr	d5, [pc, #332]	; 8001010 <parseGGA+0x420>
 8000ec6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000eca:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ece:	4b5d      	ldr	r3, [pc, #372]	; (8001044 <parseGGA+0x454>)
 8000ed0:	ed83 7b00 	vstr	d7, [r3]
    gps_data.latitude += rawLatitude[7]*0.01;
 8000ed4:	4b5b      	ldr	r3, [pc, #364]	; (8001044 <parseGGA+0x454>)
 8000ed6:	ed93 6b00 	vldr	d6, [r3]
 8000eda:	4b5e      	ldr	r3, [pc, #376]	; (8001054 <parseGGA+0x464>)
 8000edc:	79db      	ldrb	r3, [r3, #7]
 8000ede:	ee07 3a90 	vmov	s15, r3
 8000ee2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ee6:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8001018 <parseGGA+0x428>
 8000eea:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000eee:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ef2:	4b54      	ldr	r3, [pc, #336]	; (8001044 <parseGGA+0x454>)
 8000ef4:	ed83 7b00 	vstr	d7, [r3]
    gps_data.latitude += rawLatitude[8]*0.001;
 8000ef8:	4b52      	ldr	r3, [pc, #328]	; (8001044 <parseGGA+0x454>)
 8000efa:	ed93 6b00 	vldr	d6, [r3]
 8000efe:	4b55      	ldr	r3, [pc, #340]	; (8001054 <parseGGA+0x464>)
 8000f00:	7a1b      	ldrb	r3, [r3, #8]
 8000f02:	ee07 3a90 	vmov	s15, r3
 8000f06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f0a:	ed9f 5b45 	vldr	d5, [pc, #276]	; 8001020 <parseGGA+0x430>
 8000f0e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f12:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f16:	4b4b      	ldr	r3, [pc, #300]	; (8001044 <parseGGA+0x454>)
 8000f18:	ed83 7b00 	vstr	d7, [r3]
    gps_data.latitude += rawLatitude[9]*0.0001;
 8000f1c:	4b49      	ldr	r3, [pc, #292]	; (8001044 <parseGGA+0x454>)
 8000f1e:	ed93 6b00 	vldr	d6, [r3]
 8000f22:	4b4c      	ldr	r3, [pc, #304]	; (8001054 <parseGGA+0x464>)
 8000f24:	7a5b      	ldrb	r3, [r3, #9]
 8000f26:	ee07 3a90 	vmov	s15, r3
 8000f2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f2e:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8001028 <parseGGA+0x438>
 8000f32:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f36:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f3a:	4b42      	ldr	r3, [pc, #264]	; (8001044 <parseGGA+0x454>)
 8000f3c:	ed83 7b00 	vstr	d7, [r3]
    gps_data.latitude /= 60;  //Converts from dd.mmmmmm to decimal degrees. (60 minutes in a degree)
 8000f40:	4b40      	ldr	r3, [pc, #256]	; (8001044 <parseGGA+0x454>)
 8000f42:	ed93 6b00 	vldr	d6, [r3]
 8000f46:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8001030 <parseGGA+0x440>
 8000f4a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f4e:	4b3d      	ldr	r3, [pc, #244]	; (8001044 <parseGGA+0x454>)
 8000f50:	ed83 7b00 	vstr	d7, [r3]
    //Then add the degrees (ranges from -90 to +90)
    gps_data.latitude += rawLatitude[1]*10.0;
 8000f54:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <parseGGA+0x454>)
 8000f56:	ed93 6b00 	vldr	d6, [r3]
 8000f5a:	4b3e      	ldr	r3, [pc, #248]	; (8001054 <parseGGA+0x464>)
 8000f5c:	785b      	ldrb	r3, [r3, #1]
 8000f5e:	ee07 3a90 	vmov	s15, r3
 8000f62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f66:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000f6a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f6e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f72:	4b34      	ldr	r3, [pc, #208]	; (8001044 <parseGGA+0x454>)
 8000f74:	ed83 7b00 	vstr	d7, [r3]
    gps_data.latitude += rawLatitude[2]*1.0;
 8000f78:	4b32      	ldr	r3, [pc, #200]	; (8001044 <parseGGA+0x454>)
 8000f7a:	ed93 6b00 	vldr	d6, [r3]
 8000f7e:	4b35      	ldr	r3, [pc, #212]	; (8001054 <parseGGA+0x464>)
 8000f80:	789b      	ldrb	r3, [r3, #2]
 8000f82:	ee07 3a90 	vmov	s15, r3
 8000f86:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f8a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f8e:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <parseGGA+0x454>)
 8000f90:	ed83 7b00 	vstr	d7, [r3]

    if (latitudeNS == 'S'){
 8000f94:	4b30      	ldr	r3, [pc, #192]	; (8001058 <parseGGA+0x468>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b53      	cmp	r3, #83	; 0x53
 8000f9a:	d107      	bne.n	8000fac <parseGGA+0x3bc>
        gps_data.latitude *= -1;
 8000f9c:	4b29      	ldr	r3, [pc, #164]	; (8001044 <parseGGA+0x454>)
 8000f9e:	ed93 7b00 	vldr	d7, [r3]
 8000fa2:	eeb1 7b47 	vneg.f64	d7, d7
 8000fa6:	4b27      	ldr	r3, [pc, #156]	; (8001044 <parseGGA+0x454>)
 8000fa8:	ed83 7b00 	vstr	d7, [r3]
    }

    //calculate longitude
    gps_data.longitude = rawLongitude[4]*10.0;
 8000fac:	4b2b      	ldr	r3, [pc, #172]	; (800105c <parseGGA+0x46c>)
 8000fae:	791b      	ldrb	r3, [r3, #4]
 8000fb0:	ee07 3a90 	vmov	s15, r3
 8000fb4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fb8:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000fbc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fc0:	4b20      	ldr	r3, [pc, #128]	; (8001044 <parseGGA+0x454>)
 8000fc2:	ed83 7b02 	vstr	d7, [r3, #8]
    gps_data.longitude += rawLongitude[5]*1.0;
 8000fc6:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <parseGGA+0x454>)
 8000fc8:	ed93 6b02 	vldr	d6, [r3, #8]
 8000fcc:	4b23      	ldr	r3, [pc, #140]	; (800105c <parseGGA+0x46c>)
 8000fce:	795b      	ldrb	r3, [r3, #5]
 8000fd0:	ee07 3a90 	vmov	s15, r3
 8000fd4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fd8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <parseGGA+0x454>)
 8000fde:	ed83 7b02 	vstr	d7, [r3, #8]
    gps_data.longitude += rawLongitude[7]*0.1;
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <parseGGA+0x454>)
 8000fe4:	ed93 6b02 	vldr	d6, [r3, #8]
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <parseGGA+0x46c>)
 8000fea:	79db      	ldrb	r3, [r3, #7]
 8000fec:	ee07 3a90 	vmov	s15, r3
 8000ff0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ff4:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8001010 <parseGGA+0x420>
 8000ff8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000ffc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <parseGGA+0x454>)
 8001002:	ed83 7b02 	vstr	d7, [r3, #8]
    gps_data.longitude += rawLongitude[8]*0.01;
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <parseGGA+0x454>)
 8001008:	ed93 6b02 	vldr	d6, [r3, #8]
 800100c:	e028      	b.n	8001060 <parseGGA+0x470>
 800100e:	bf00      	nop
 8001010:	9999999a 	.word	0x9999999a
 8001014:	3fb99999 	.word	0x3fb99999
 8001018:	47ae147b 	.word	0x47ae147b
 800101c:	3f847ae1 	.word	0x3f847ae1
 8001020:	d2f1a9fc 	.word	0xd2f1a9fc
 8001024:	3f50624d 	.word	0x3f50624d
 8001028:	eb1c432d 	.word	0xeb1c432d
 800102c:	3f1a36e2 	.word	0x3f1a36e2
 8001030:	00000000 	.word	0x00000000
 8001034:	404e0000 	.word	0x404e0000
 8001038:	20000670 	.word	0x20000670
 800103c:	20000648 	.word	0x20000648
 8001040:	47c35000 	.word	0x47c35000
 8001044:	20000678 	.word	0x20000678
 8001048:	461c4000 	.word	0x461c4000
 800104c:	447a0000 	.word	0x447a0000
 8001050:	42c80000 	.word	0x42c80000
 8001054:	20000654 	.word	0x20000654
 8001058:	2000065e 	.word	0x2000065e
 800105c:	20000660 	.word	0x20000660
 8001060:	4b83      	ldr	r3, [pc, #524]	; (8001270 <parseGGA+0x680>)
 8001062:	7a1b      	ldrb	r3, [r3, #8]
 8001064:	ee07 3a90 	vmov	s15, r3
 8001068:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800106c:	ed9f 5b76 	vldr	d5, [pc, #472]	; 8001248 <parseGGA+0x658>
 8001070:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001074:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001078:	4b7e      	ldr	r3, [pc, #504]	; (8001274 <parseGGA+0x684>)
 800107a:	ed83 7b02 	vstr	d7, [r3, #8]
    gps_data.longitude += rawLongitude[9]*0.001;
 800107e:	4b7d      	ldr	r3, [pc, #500]	; (8001274 <parseGGA+0x684>)
 8001080:	ed93 6b02 	vldr	d6, [r3, #8]
 8001084:	4b7a      	ldr	r3, [pc, #488]	; (8001270 <parseGGA+0x680>)
 8001086:	7a5b      	ldrb	r3, [r3, #9]
 8001088:	ee07 3a90 	vmov	s15, r3
 800108c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001090:	ed9f 5b6f 	vldr	d5, [pc, #444]	; 8001250 <parseGGA+0x660>
 8001094:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001098:	ee36 7b07 	vadd.f64	d7, d6, d7
 800109c:	4b75      	ldr	r3, [pc, #468]	; (8001274 <parseGGA+0x684>)
 800109e:	ed83 7b02 	vstr	d7, [r3, #8]
    gps_data.longitude += rawLongitude[10]*0.0001;
 80010a2:	4b74      	ldr	r3, [pc, #464]	; (8001274 <parseGGA+0x684>)
 80010a4:	ed93 6b02 	vldr	d6, [r3, #8]
 80010a8:	4b71      	ldr	r3, [pc, #452]	; (8001270 <parseGGA+0x680>)
 80010aa:	7a9b      	ldrb	r3, [r3, #10]
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010b4:	ed9f 5b68 	vldr	d5, [pc, #416]	; 8001258 <parseGGA+0x668>
 80010b8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80010bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010c0:	4b6c      	ldr	r3, [pc, #432]	; (8001274 <parseGGA+0x684>)
 80010c2:	ed83 7b02 	vstr	d7, [r3, #8]
    gps_data.longitude /= 60;  //Converts from ddd.mmmmmm to decimal degrees. (60 minutes in a degree)
 80010c6:	4b6b      	ldr	r3, [pc, #428]	; (8001274 <parseGGA+0x684>)
 80010c8:	ed93 6b02 	vldr	d6, [r3, #8]
 80010cc:	ed9f 5b64 	vldr	d5, [pc, #400]	; 8001260 <parseGGA+0x670>
 80010d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010d4:	4b67      	ldr	r3, [pc, #412]	; (8001274 <parseGGA+0x684>)
 80010d6:	ed83 7b02 	vstr	d7, [r3, #8]
    //Then add the degrees (ranges from -180 to +180)
    gps_data.longitude += rawLongitude[1]*100.0;
 80010da:	4b66      	ldr	r3, [pc, #408]	; (8001274 <parseGGA+0x684>)
 80010dc:	ed93 6b02 	vldr	d6, [r3, #8]
 80010e0:	4b63      	ldr	r3, [pc, #396]	; (8001270 <parseGGA+0x680>)
 80010e2:	785b      	ldrb	r3, [r3, #1]
 80010e4:	ee07 3a90 	vmov	s15, r3
 80010e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010ec:	ed9f 5b5e 	vldr	d5, [pc, #376]	; 8001268 <parseGGA+0x678>
 80010f0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80010f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010f8:	4b5e      	ldr	r3, [pc, #376]	; (8001274 <parseGGA+0x684>)
 80010fa:	ed83 7b02 	vstr	d7, [r3, #8]
    gps_data.longitude += rawLongitude[2]*10.0;
 80010fe:	4b5d      	ldr	r3, [pc, #372]	; (8001274 <parseGGA+0x684>)
 8001100:	ed93 6b02 	vldr	d6, [r3, #8]
 8001104:	4b5a      	ldr	r3, [pc, #360]	; (8001270 <parseGGA+0x680>)
 8001106:	789b      	ldrb	r3, [r3, #2]
 8001108:	ee07 3a90 	vmov	s15, r3
 800110c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001110:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8001114:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001118:	ee36 7b07 	vadd.f64	d7, d6, d7
 800111c:	4b55      	ldr	r3, [pc, #340]	; (8001274 <parseGGA+0x684>)
 800111e:	ed83 7b02 	vstr	d7, [r3, #8]
    gps_data.longitude += rawLongitude[3]*1.0;
 8001122:	4b54      	ldr	r3, [pc, #336]	; (8001274 <parseGGA+0x684>)
 8001124:	ed93 6b02 	vldr	d6, [r3, #8]
 8001128:	4b51      	ldr	r3, [pc, #324]	; (8001270 <parseGGA+0x680>)
 800112a:	78db      	ldrb	r3, [r3, #3]
 800112c:	ee07 3a90 	vmov	s15, r3
 8001130:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001134:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001138:	4b4e      	ldr	r3, [pc, #312]	; (8001274 <parseGGA+0x684>)
 800113a:	ed83 7b02 	vstr	d7, [r3, #8]

    if (longitudeEW == 'W'){
 800113e:	4b4e      	ldr	r3, [pc, #312]	; (8001278 <parseGGA+0x688>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b57      	cmp	r3, #87	; 0x57
 8001144:	d107      	bne.n	8001156 <parseGGA+0x566>
        gps_data.longitude *= -1;
 8001146:	4b4b      	ldr	r3, [pc, #300]	; (8001274 <parseGGA+0x684>)
 8001148:	ed93 7b02 	vldr	d7, [r3, #8]
 800114c:	eeb1 7b47 	vneg.f64	d7, d7
 8001150:	4b48      	ldr	r3, [pc, #288]	; (8001274 <parseGGA+0x684>)
 8001152:	ed83 7b02 	vstr	d7, [r3, #8]
    }

    //calculate satellites
    if (rawSatellites[2] == 10) gps_data.numSatellites = rawSatellites[1];
 8001156:	4b49      	ldr	r3, [pc, #292]	; (800127c <parseGGA+0x68c>)
 8001158:	789b      	ldrb	r3, [r3, #2]
 800115a:	2b0a      	cmp	r3, #10
 800115c:	d104      	bne.n	8001168 <parseGGA+0x578>
 800115e:	4b47      	ldr	r3, [pc, #284]	; (800127c <parseGGA+0x68c>)
 8001160:	785a      	ldrb	r2, [r3, #1]
 8001162:	4b44      	ldr	r3, [pc, #272]	; (8001274 <parseGGA+0x684>)
 8001164:	779a      	strb	r2, [r3, #30]
 8001166:	e00c      	b.n	8001182 <parseGGA+0x592>
    else gps_data.numSatellites = rawSatellites[1]*10 + rawSatellites[2];
 8001168:	4b44      	ldr	r3, [pc, #272]	; (800127c <parseGGA+0x68c>)
 800116a:	785b      	ldrb	r3, [r3, #1]
 800116c:	461a      	mov	r2, r3
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	4413      	add	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b41      	ldr	r3, [pc, #260]	; (800127c <parseGGA+0x68c>)
 8001178:	789b      	ldrb	r3, [r3, #2]
 800117a:	4413      	add	r3, r2
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b3d      	ldr	r3, [pc, #244]	; (8001274 <parseGGA+0x684>)
 8001180:	779a      	strb	r2, [r3, #30]

    //calculate altitude - tricky because of unknown 1-3 digits preceeding the decimal
    i = 1;
 8001182:	2301      	movs	r3, #1
 8001184:	623b      	str	r3, [r7, #32]
    long int multiplier = 10;
 8001186:	230a      	movs	r3, #10
 8001188:	61bb      	str	r3, [r7, #24]
    int decimalPoint = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
    gps_data.altitude = 0;
 800118e:	4b39      	ldr	r3, [pc, #228]	; (8001274 <parseGGA+0x684>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
    float tAltitude = 0;
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
    for (i = 1; i < 8; i++) //this code first generates an 6 digit decimal number
 800119a:	2301      	movs	r3, #1
 800119c:	623b      	str	r3, [r7, #32]
 800119e:	e026      	b.n	80011ee <parseGGA+0x5fe>
    {
        if (rawAltitude[i] == 0x10) //check for decimal point
 80011a0:	4a37      	ldr	r2, [pc, #220]	; (8001280 <parseGGA+0x690>)
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	4413      	add	r3, r2
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b10      	cmp	r3, #16
 80011aa:	d102      	bne.n	80011b2 <parseGGA+0x5c2>
        {
            decimalPoint = i;
 80011ac:	6a3b      	ldr	r3, [r7, #32]
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	e01a      	b.n	80011e8 <parseGGA+0x5f8>
        } else {
            tAltitude += (float) (rawAltitude[i]*1000000 / multiplier);
 80011b2:	4a33      	ldr	r2, [pc, #204]	; (8001280 <parseGGA+0x690>)
 80011b4:	6a3b      	ldr	r3, [r7, #32]
 80011b6:	4413      	add	r3, r2
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b31      	ldr	r3, [pc, #196]	; (8001284 <parseGGA+0x694>)
 80011be:	fb03 f202 	mul.w	r2, r3, r2
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80011c8:	ee07 3a90 	vmov	s15, r3
 80011cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80011d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d8:	edc7 7a04 	vstr	s15, [r7, #16]
            multiplier *= 10;
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	61bb      	str	r3, [r7, #24]
    for (i = 1; i < 8; i++) //this code first generates an 6 digit decimal number
 80011e8:	6a3b      	ldr	r3, [r7, #32]
 80011ea:	3301      	adds	r3, #1
 80011ec:	623b      	str	r3, [r7, #32]
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	2b07      	cmp	r3, #7
 80011f2:	ddd5      	ble.n	80011a0 <parseGGA+0x5b0>
        }
    }
    decimalPoint = decimalPoint - 2;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	3b02      	subs	r3, #2
 80011f8:	617b      	str	r3, [r7, #20]
    multiplier = 100000;
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <parseGGA+0x698>)
 80011fc:	61bb      	str	r3, [r7, #24]
    while (decimalPoint > 0) //then divides it according to the placement of the decimal
 80011fe:	e00a      	b.n	8001216 <parseGGA+0x626>
    {
        multiplier = multiplier / 10;
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	4a22      	ldr	r2, [pc, #136]	; (800128c <parseGGA+0x69c>)
 8001204:	fb82 1203 	smull	r1, r2, r2, r3
 8001208:	1092      	asrs	r2, r2, #2
 800120a:	17db      	asrs	r3, r3, #31
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	61bb      	str	r3, [r7, #24]
        decimalPoint--;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	3b01      	subs	r3, #1
 8001214:	617b      	str	r3, [r7, #20]
    while (decimalPoint > 0) //then divides it according to the placement of the decimal
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	2b00      	cmp	r3, #0
 800121a:	dcf1      	bgt.n	8001200 <parseGGA+0x610>
    }
    gps_data.altitude = (int)(tAltitude / multiplier);
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	ee07 3a90 	vmov	s15, r3
 8001222:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001226:	edd7 6a04 	vldr	s13, [r7, #16]
 800122a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800122e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001232:	ee17 2a90 	vmov	r2, s15
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <parseGGA+0x684>)
 8001238:	619a      	str	r2, [r3, #24]

    HAL_Delay(100);
 800123a:	2064      	movs	r0, #100	; 0x64
 800123c:	f000 fa92 	bl	8001764 <HAL_Delay>
}
 8001240:	bf00      	nop
 8001242:	3728      	adds	r7, #40	; 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	47ae147b 	.word	0x47ae147b
 800124c:	3f847ae1 	.word	0x3f847ae1
 8001250:	d2f1a9fc 	.word	0xd2f1a9fc
 8001254:	3f50624d 	.word	0x3f50624d
 8001258:	eb1c432d 	.word	0xeb1c432d
 800125c:	3f1a36e2 	.word	0x3f1a36e2
 8001260:	00000000 	.word	0x00000000
 8001264:	404e0000 	.word	0x404e0000
 8001268:	00000000 	.word	0x00000000
 800126c:	40590000 	.word	0x40590000
 8001270:	20000660 	.word	0x20000660
 8001274:	20000678 	.word	0x20000678
 8001278:	2000066b 	.word	0x2000066b
 800127c:	20000028 	.word	0x20000028
 8001280:	20000670 	.word	0x20000670
 8001284:	000f4240 	.word	0x000f4240
 8001288:	000186a0 	.word	0x000186a0
 800128c:	66666667 	.word	0x66666667

08001290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001296:	f000 fa08 	bl	80016aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129a:	f000 f819 	bl	80012d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800129e:	f000 f8c9 	bl	8001434 <MX_GPIO_Init>
  MX_UART4_Init();
 80012a2:	f000 f88f 	bl	80013c4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  init();
 80012a6:	f7ff fad3 	bl	8000850 <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  parseIncomingGPSData();
 80012aa:	f7ff f9e3 	bl	8000674 <parseIncomingGPSData>
	  if (isNewDataAvailable()) {
 80012ae:	f7ff fb7b 	bl	80009a8 <isNewDataAvailable>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <main+0x30>
		  gpsdata = getData();
 80012b8:	463b      	mov	r3, r7
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f9c2 	bl	8000644 <getData>
	  }

	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_7);
 80012c0:	2180      	movs	r1, #128	; 0x80
 80012c2:	4802      	ldr	r0, [pc, #8]	; (80012cc <main+0x3c>)
 80012c4:	f000 fd1d 	bl	8001d02 <HAL_GPIO_TogglePin>
	  parseIncomingGPSData();
 80012c8:	e7ef      	b.n	80012aa <main+0x1a>
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000

080012d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b0b8      	sub	sp, #224	; 0xe0
 80012d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012da:	2234      	movs	r2, #52	; 0x34
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fb4c 	bl	800397c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	2290      	movs	r2, #144	; 0x90
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f002 fb3d 	bl	800397c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <SystemClock_Config+0xec>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	4a2d      	ldr	r2, [pc, #180]	; (80013bc <SystemClock_Config+0xec>)
 8001308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130c:	6413      	str	r3, [r2, #64]	; 0x40
 800130e:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <SystemClock_Config+0xec>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800131a:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <SystemClock_Config+0xf0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001322:	4a27      	ldr	r2, [pc, #156]	; (80013c0 <SystemClock_Config+0xf0>)
 8001324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <SystemClock_Config+0xf0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001336:	2302      	movs	r3, #2
 8001338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133c:	2301      	movs	r3, #1
 800133e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001342:	2310      	movs	r3, #16
 8001344:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fcf0 	bl	8001d38 <HAL_RCC_OscConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800135e:	f000 f8b3 	bl	80014c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001362:	230f      	movs	r3, #15
 8001364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001380:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f000 ff84 	bl	8002294 <HAL_RCC_ClockConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001392:	f000 f899 	bl	80014c8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800139a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800139c:	2300      	movs	r3, #0
 800139e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 f94b 	bl	8002640 <HAL_RCCEx_PeriphCLKConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80013b0:	f000 f88a 	bl	80014c8 <Error_Handler>
  }
}
 80013b4:	bf00      	nop
 80013b6:	37e0      	adds	r7, #224	; 0xe0
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40007000 	.word	0x40007000

080013c4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_UART4_Init+0x68>)
 80013ca:	4a19      	ldr	r2, [pc, #100]	; (8001430 <MX_UART4_Init+0x6c>)
 80013cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <MX_UART4_Init+0x68>)
 80013d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_UART4_Init+0x68>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <MX_UART4_Init+0x68>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_UART4_Init+0x68>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <MX_UART4_Init+0x68>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_UART4_Init+0x68>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_8;
 80013f4:	4b0d      	ldr	r3, [pc, #52]	; (800142c <MX_UART4_Init+0x68>)
 80013f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013fa:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <MX_UART4_Init+0x68>)
 80013fe:	2200      	movs	r2, #0
 8001400:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <MX_UART4_Init+0x68>)
 8001404:	2230      	movs	r2, #48	; 0x30
 8001406:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <MX_UART4_Init+0x68>)
 800140a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800140e:	639a      	str	r2, [r3, #56]	; 0x38
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_UART4_Init+0x68>)
 8001412:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001416:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <MX_UART4_Init+0x68>)
 800141a:	f001 fd01 	bl	8002e20 <HAL_UART_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_UART4_Init+0x64>
  {
    Error_Handler();
 8001424:	f000 f850 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200006a0 	.word	0x200006a0
 8001430:	40004c00 	.word	0x40004c00

08001434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	f107 030c 	add.w	r3, r7, #12
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800144a:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <MX_GPIO_Init+0x8c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a1c      	ldr	r2, [pc, #112]	; (80014c0 <MX_GPIO_Init+0x8c>)
 8001450:	f043 0310 	orr.w	r3, r3, #16
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MX_GPIO_Init+0x8c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0310 	and.w	r3, r3, #16
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <MX_GPIO_Init+0x8c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a16      	ldr	r2, [pc, #88]	; (80014c0 <MX_GPIO_Init+0x8c>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MX_GPIO_Init+0x8c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_GPIO_Init+0x8c>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a10      	ldr	r2, [pc, #64]	; (80014c0 <MX_GPIO_Init+0x8c>)
 8001480:	f043 0308 	orr.w	r3, r3, #8
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_GPIO_Init+0x8c>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	480b      	ldr	r0, [pc, #44]	; (80014c4 <MX_GPIO_Init+0x90>)
 8001498:	f000 fc1a 	bl	8001cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	4619      	mov	r1, r3
 80014b2:	4804      	ldr	r0, [pc, #16]	; (80014c4 <MX_GPIO_Init+0x90>)
 80014b4:	f000 fa60 	bl	8001978 <HAL_GPIO_Init>

}
 80014b8:	bf00      	nop
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40021000 	.word	0x40021000

080014c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014cc:	b672      	cpsid	i
}
 80014ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <Error_Handler+0x8>
	...

080014d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <HAL_MspInit+0x44>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <HAL_MspInit+0x44>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_MspInit+0x44>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_MspInit+0x44>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a08      	ldr	r2, [pc, #32]	; (8001518 <HAL_MspInit+0x44>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_MspInit+0x44>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800

0800151c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a25      	ldr	r2, [pc, #148]	; (80015d0 <HAL_UART_MspInit+0xb4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d144      	bne.n	80015c8 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800153e:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <HAL_UART_MspInit+0xb8>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a24      	ldr	r2, [pc, #144]	; (80015d4 <HAL_UART_MspInit+0xb8>)
 8001544:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <HAL_UART_MspInit+0xb8>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <HAL_UART_MspInit+0xb8>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a1e      	ldr	r2, [pc, #120]	; (80015d4 <HAL_UART_MspInit+0xb8>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <HAL_UART_MspInit+0xb8>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800156e:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <HAL_UART_MspInit+0xb8>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a18      	ldr	r2, [pc, #96]	; (80015d4 <HAL_UART_MspInit+0xb8>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <HAL_UART_MspInit+0xb8>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
    PB14     ------> UART4_RTS
    PB15     ------> UART4_CTS
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001586:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800158a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001598:	2308      	movs	r3, #8
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4619      	mov	r1, r3
 80015a2:	480d      	ldr	r0, [pc, #52]	; (80015d8 <HAL_UART_MspInit+0xbc>)
 80015a4:	f000 f9e8 	bl	8001978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015a8:	2303      	movs	r3, #3
 80015aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	2303      	movs	r3, #3
 80015b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015b8:	2308      	movs	r3, #8
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <HAL_UART_MspInit+0xc0>)
 80015c4:	f000 f9d8 	bl	8001978 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80015c8:	bf00      	nop
 80015ca:	3728      	adds	r7, #40	; 0x28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40004c00 	.word	0x40004c00
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020400 	.word	0x40020400
 80015dc:	40020c00 	.word	0x40020c00

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <NMI_Handler+0x4>

080015e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <MemManage_Handler+0x4>

080015f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <BusFault_Handler+0x4>

080015f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <UsageFault_Handler+0x4>

080015fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162c:	f000 f87a 	bl	8001724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <SystemInit+0x20>)
 800163a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <SystemInit+0x20>)
 8001640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001658:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001690 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800165c:	480d      	ldr	r0, [pc, #52]	; (8001694 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800165e:	490e      	ldr	r1, [pc, #56]	; (8001698 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001660:	4a0e      	ldr	r2, [pc, #56]	; (800169c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001672:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001674:	4c0b      	ldr	r4, [pc, #44]	; (80016a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001682:	f7ff ffd7 	bl	8001634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001686:	f002 f947 	bl	8003918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168a:	f7ff fe01 	bl	8001290 <main>
  bx  lr    
 800168e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001690:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001698:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 800169c:	08003c80 	.word	0x08003c80
  ldr r2, =_sbss
 80016a0:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 80016a4:	20000728 	.word	0x20000728

080016a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a8:	e7fe      	b.n	80016a8 <ADC_IRQHandler>

080016aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ae:	2003      	movs	r0, #3
 80016b0:	f000 f92e 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b4:	2000      	movs	r0, #0
 80016b6:	f000 f805 	bl	80016c4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80016ba:	f7ff ff0b 	bl	80014d4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_InitTick+0x54>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x58>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016da:	fbb3 f3f1 	udiv	r3, r3, r1
 80016de:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f93b 	bl	800195e <HAL_SYSTICK_Config>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00e      	b.n	8001710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b0f      	cmp	r3, #15
 80016f6:	d80a      	bhi.n	800170e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f8:	2200      	movs	r2, #0
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001700:	f000 f911 	bl	8001926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001704:	4a06      	ldr	r2, [pc, #24]	; (8001720 <HAL_InitTick+0x5c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e000      	b.n	8001710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	2000002c 	.word	0x2000002c
 800171c:	20000034 	.word	0x20000034
 8001720:	20000030 	.word	0x20000030

08001724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x20>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x24>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4413      	add	r3, r2
 8001734:	4a04      	ldr	r2, [pc, #16]	; (8001748 <HAL_IncTick+0x24>)
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000034 	.word	0x20000034
 8001748:	20000724 	.word	0x20000724

0800174c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_GetTick+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000724 	.word	0x20000724

08001764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800176c:	f7ff ffee 	bl	800174c <HAL_GetTick>
 8001770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800177c:	d005      	beq.n	800178a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_Delay+0x44>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800178a:	bf00      	nop
 800178c:	f7ff ffde 	bl	800174c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	429a      	cmp	r2, r3
 800179a:	d8f7      	bhi.n	800178c <HAL_Delay+0x28>
  {
  }
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000034 	.word	0x20000034

080017ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <__NVIC_SetPriorityGrouping+0x40>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c8:	4013      	ands	r3, r2
 80017ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017da:	4a04      	ldr	r2, [pc, #16]	; (80017ec <__NVIC_SetPriorityGrouping+0x40>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60d3      	str	r3, [r2, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00
 80017f0:	05fa0000 	.word	0x05fa0000

080017f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <__NVIC_GetPriorityGrouping+0x18>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	f003 0307 	and.w	r3, r3, #7
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	2b00      	cmp	r3, #0
 8001822:	db0a      	blt.n	800183a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	490c      	ldr	r1, [pc, #48]	; (800185c <__NVIC_SetPriority+0x4c>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	440b      	add	r3, r1
 8001834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001838:	e00a      	b.n	8001850 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4908      	ldr	r1, [pc, #32]	; (8001860 <__NVIC_SetPriority+0x50>)
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	3b04      	subs	r3, #4
 8001848:	0112      	lsls	r2, r2, #4
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	440b      	add	r3, r1
 800184e:	761a      	strb	r2, [r3, #24]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000e100 	.word	0xe000e100
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f1c3 0307 	rsb	r3, r3, #7
 800187e:	2b04      	cmp	r3, #4
 8001880:	bf28      	it	cs
 8001882:	2304      	movcs	r3, #4
 8001884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3304      	adds	r3, #4
 800188a:	2b06      	cmp	r3, #6
 800188c:	d902      	bls.n	8001894 <NVIC_EncodePriority+0x30>
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3b03      	subs	r3, #3
 8001892:	e000      	b.n	8001896 <NVIC_EncodePriority+0x32>
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	43d9      	mvns	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	4313      	orrs	r3, r2
         );
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3724      	adds	r7, #36	; 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018dc:	d301      	bcc.n	80018e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018de:	2301      	movs	r3, #1
 80018e0:	e00f      	b.n	8001902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <SysTick_Config+0x40>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ea:	210f      	movs	r1, #15
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018f0:	f7ff ff8e 	bl	8001810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <SysTick_Config+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <SysTick_Config+0x40>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	e000e010 	.word	0xe000e010

08001910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff47 	bl	80017ac <__NVIC_SetPriorityGrouping>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001938:	f7ff ff5c 	bl	80017f4 <__NVIC_GetPriorityGrouping>
 800193c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f7ff ff8e 	bl	8001864 <NVIC_EncodePriority>
 8001948:	4602      	mov	r2, r0
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff5d 	bl	8001810 <__NVIC_SetPriority>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffb0 	bl	80018cc <SysTick_Config>
 800196c:	4603      	mov	r3, r0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001978:	b480      	push	{r7}
 800197a:	b089      	sub	sp, #36	; 0x24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
 8001996:	e175      	b.n	8001c84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001998:	2201      	movs	r2, #1
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	f040 8164 	bne.w	8001c7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d00b      	beq.n	80019d6 <HAL_GPIO_Init+0x5e>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d007      	beq.n	80019d6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019ca:	2b11      	cmp	r3, #17
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b12      	cmp	r3, #18
 80019d4:	d130      	bne.n	8001a38 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	2203      	movs	r2, #3
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	091b      	lsrs	r3, r3, #4
 8001a22:	f003 0201 	and.w	r2, r3, #1
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2203      	movs	r2, #3
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x100>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b12      	cmp	r3, #18
 8001a76:	d123      	bne.n	8001ac0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	08da      	lsrs	r2, r3, #3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3208      	adds	r2, #8
 8001a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	220f      	movs	r2, #15
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	691a      	ldr	r2, [r3, #16]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	08da      	lsrs	r2, r3, #3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3208      	adds	r2, #8
 8001aba:	69b9      	ldr	r1, [r7, #24]
 8001abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	2203      	movs	r2, #3
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0203 	and.w	r2, r3, #3
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80be 	beq.w	8001c7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b02:	4b66      	ldr	r3, [pc, #408]	; (8001c9c <HAL_GPIO_Init+0x324>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	4a65      	ldr	r2, [pc, #404]	; (8001c9c <HAL_GPIO_Init+0x324>)
 8001b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0e:	4b63      	ldr	r3, [pc, #396]	; (8001c9c <HAL_GPIO_Init+0x324>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b1a:	4a61      	ldr	r2, [pc, #388]	; (8001ca0 <HAL_GPIO_Init+0x328>)
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	089b      	lsrs	r3, r3, #2
 8001b20:	3302      	adds	r3, #2
 8001b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	220f      	movs	r2, #15
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <HAL_GPIO_Init+0x32c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d037      	beq.n	8001bb6 <HAL_GPIO_Init+0x23e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a57      	ldr	r2, [pc, #348]	; (8001ca8 <HAL_GPIO_Init+0x330>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d031      	beq.n	8001bb2 <HAL_GPIO_Init+0x23a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a56      	ldr	r2, [pc, #344]	; (8001cac <HAL_GPIO_Init+0x334>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d02b      	beq.n	8001bae <HAL_GPIO_Init+0x236>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a55      	ldr	r2, [pc, #340]	; (8001cb0 <HAL_GPIO_Init+0x338>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d025      	beq.n	8001baa <HAL_GPIO_Init+0x232>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a54      	ldr	r2, [pc, #336]	; (8001cb4 <HAL_GPIO_Init+0x33c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d01f      	beq.n	8001ba6 <HAL_GPIO_Init+0x22e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a53      	ldr	r2, [pc, #332]	; (8001cb8 <HAL_GPIO_Init+0x340>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d019      	beq.n	8001ba2 <HAL_GPIO_Init+0x22a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a52      	ldr	r2, [pc, #328]	; (8001cbc <HAL_GPIO_Init+0x344>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d013      	beq.n	8001b9e <HAL_GPIO_Init+0x226>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a51      	ldr	r2, [pc, #324]	; (8001cc0 <HAL_GPIO_Init+0x348>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00d      	beq.n	8001b9a <HAL_GPIO_Init+0x222>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a50      	ldr	r2, [pc, #320]	; (8001cc4 <HAL_GPIO_Init+0x34c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d007      	beq.n	8001b96 <HAL_GPIO_Init+0x21e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4f      	ldr	r2, [pc, #316]	; (8001cc8 <HAL_GPIO_Init+0x350>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d101      	bne.n	8001b92 <HAL_GPIO_Init+0x21a>
 8001b8e:	2309      	movs	r3, #9
 8001b90:	e012      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001b92:	230a      	movs	r3, #10
 8001b94:	e010      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001b96:	2308      	movs	r3, #8
 8001b98:	e00e      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	e00c      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001b9e:	2306      	movs	r3, #6
 8001ba0:	e00a      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001ba2:	2305      	movs	r3, #5
 8001ba4:	e008      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001baa:	2303      	movs	r3, #3
 8001bac:	e004      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e002      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_GPIO_Init+0x240>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	f002 0203 	and.w	r2, r2, #3
 8001bbe:	0092      	lsls	r2, r2, #2
 8001bc0:	4093      	lsls	r3, r2
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bc8:	4935      	ldr	r1, [pc, #212]	; (8001ca0 <HAL_GPIO_Init+0x328>)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	3302      	adds	r3, #2
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bfa:	4a34      	ldr	r2, [pc, #208]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c00:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c24:	4a29      	ldr	r2, [pc, #164]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c2a:	4b28      	ldr	r3, [pc, #160]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c4e:	4a1f      	ldr	r2, [pc, #124]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c54:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <HAL_GPIO_Init+0x354>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3301      	adds	r3, #1
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	2b0f      	cmp	r3, #15
 8001c88:	f67f ae86 	bls.w	8001998 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3724      	adds	r7, #36	; 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40013800 	.word	0x40013800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40020800 	.word	0x40020800
 8001cb0:	40020c00 	.word	0x40020c00
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40021400 	.word	0x40021400
 8001cbc:	40021800 	.word	0x40021800
 8001cc0:	40021c00 	.word	0x40021c00
 8001cc4:	40022000 	.word	0x40022000
 8001cc8:	40022400 	.word	0x40022400
 8001ccc:	40013c00 	.word	0x40013c00

08001cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	807b      	strh	r3, [r7, #2]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce0:	787b      	ldrb	r3, [r7, #1]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ce6:	887a      	ldrh	r2, [r7, #2]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001cec:	e003      	b.n	8001cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001cee:	887b      	ldrh	r3, [r7, #2]
 8001cf0:	041a      	lsls	r2, r3, #16
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	619a      	str	r2, [r3, #24]
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b085      	sub	sp, #20
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d14:	887a      	ldrh	r2, [r7, #2]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	041a      	lsls	r2, r3, #16
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	43d9      	mvns	r1, r3
 8001d20:	887b      	ldrh	r3, [r7, #2]
 8001d22:	400b      	ands	r3, r1
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	619a      	str	r2, [r3, #24]
}
 8001d2a:	bf00      	nop
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d40:	2300      	movs	r3, #0
 8001d42:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e29b      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 8087 	beq.w	8001e6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d5c:	4b96      	ldr	r3, [pc, #600]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d00c      	beq.n	8001d82 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d68:	4b93      	ldr	r3, [pc, #588]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d112      	bne.n	8001d9a <HAL_RCC_OscConfig+0x62>
 8001d74:	4b90      	ldr	r3, [pc, #576]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d80:	d10b      	bne.n	8001d9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d82:	4b8d      	ldr	r3, [pc, #564]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d06c      	beq.n	8001e68 <HAL_RCC_OscConfig+0x130>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d168      	bne.n	8001e68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e275      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da2:	d106      	bne.n	8001db2 <HAL_RCC_OscConfig+0x7a>
 8001da4:	4b84      	ldr	r3, [pc, #528]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a83      	ldr	r2, [pc, #524]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	e02e      	b.n	8001e10 <HAL_RCC_OscConfig+0xd8>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x9c>
 8001dba:	4b7f      	ldr	r3, [pc, #508]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a7e      	ldr	r2, [pc, #504]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4b7c      	ldr	r3, [pc, #496]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a7b      	ldr	r2, [pc, #492]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001dcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e01d      	b.n	8001e10 <HAL_RCC_OscConfig+0xd8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0xc0>
 8001dde:	4b76      	ldr	r3, [pc, #472]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a75      	ldr	r2, [pc, #468]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	4b73      	ldr	r3, [pc, #460]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a72      	ldr	r2, [pc, #456]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0xd8>
 8001df8:	4b6f      	ldr	r3, [pc, #444]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a6e      	ldr	r2, [pc, #440]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b6c      	ldr	r3, [pc, #432]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a6b      	ldr	r2, [pc, #428]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d013      	beq.n	8001e40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7ff fc98 	bl	800174c <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e20:	f7ff fc94 	bl	800174c <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	; 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e229      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e32:	4b61      	ldr	r3, [pc, #388]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0xe8>
 8001e3e:	e014      	b.n	8001e6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e40:	f7ff fc84 	bl	800174c <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e48:	f7ff fc80 	bl	800174c <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b64      	cmp	r3, #100	; 0x64
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e215      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5a:	4b57      	ldr	r3, [pc, #348]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x110>
 8001e66:	e000      	b.n	8001e6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d069      	beq.n	8001f4a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e76:	4b50      	ldr	r3, [pc, #320]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00b      	beq.n	8001e9a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e82:	4b4d      	ldr	r3, [pc, #308]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d11c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x190>
 8001e8e:	4b4a      	ldr	r3, [pc, #296]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d116      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9a:	4b47      	ldr	r3, [pc, #284]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x17a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d001      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e1e9      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb2:	4b41      	ldr	r3, [pc, #260]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	493d      	ldr	r1, [pc, #244]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec6:	e040      	b.n	8001f4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d023      	beq.n	8001f18 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed0:	4b39      	ldr	r3, [pc, #228]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a38      	ldr	r2, [pc, #224]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7ff fc36 	bl	800174c <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee4:	f7ff fc32 	bl	800174c <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e1c7      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef6:	4b30      	ldr	r3, [pc, #192]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f02:	4b2d      	ldr	r3, [pc, #180]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4929      	ldr	r1, [pc, #164]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]
 8001f16:	e018      	b.n	8001f4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f18:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a26      	ldr	r2, [pc, #152]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001f1e:	f023 0301 	bic.w	r3, r3, #1
 8001f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f24:	f7ff fc12 	bl	800174c <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2c:	f7ff fc0e 	bl	800174c <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e1a3      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d038      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d019      	beq.n	8001f92 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f62:	4a15      	ldr	r2, [pc, #84]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6a:	f7ff fbef 	bl	800174c <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f72:	f7ff fbeb 	bl	800174c <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e180      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x23a>
 8001f90:	e01a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f96:	4a08      	ldr	r2, [pc, #32]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001f98:	f023 0301 	bic.w	r3, r3, #1
 8001f9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9e:	f7ff fbd5 	bl	800174c <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa4:	e00a      	b.n	8001fbc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa6:	f7ff fbd1 	bl	800174c <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d903      	bls.n	8001fbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e166      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
 8001fb8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fbc:	4b92      	ldr	r3, [pc, #584]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8001fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1ee      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80a4 	beq.w	800211e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd6:	4b8c      	ldr	r3, [pc, #560]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10d      	bne.n	8001ffe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	4b89      	ldr	r3, [pc, #548]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	4a88      	ldr	r2, [pc, #544]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fec:	6413      	str	r3, [r2, #64]	; 0x40
 8001fee:	4b86      	ldr	r3, [pc, #536]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ffe:	4b83      	ldr	r3, [pc, #524]	; (800220c <HAL_RCC_OscConfig+0x4d4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002006:	2b00      	cmp	r3, #0
 8002008:	d118      	bne.n	800203c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800200a:	4b80      	ldr	r3, [pc, #512]	; (800220c <HAL_RCC_OscConfig+0x4d4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a7f      	ldr	r2, [pc, #508]	; (800220c <HAL_RCC_OscConfig+0x4d4>)
 8002010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002016:	f7ff fb99 	bl	800174c <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201e:	f7ff fb95 	bl	800174c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b64      	cmp	r3, #100	; 0x64
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e12a      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002030:	4b76      	ldr	r3, [pc, #472]	; (800220c <HAL_RCC_OscConfig+0x4d4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d106      	bne.n	8002052 <HAL_RCC_OscConfig+0x31a>
 8002044:	4b70      	ldr	r3, [pc, #448]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002048:	4a6f      	ldr	r2, [pc, #444]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6713      	str	r3, [r2, #112]	; 0x70
 8002050:	e02d      	b.n	80020ae <HAL_RCC_OscConfig+0x376>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10c      	bne.n	8002074 <HAL_RCC_OscConfig+0x33c>
 800205a:	4b6b      	ldr	r3, [pc, #428]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 800205c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205e:	4a6a      	ldr	r2, [pc, #424]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	6713      	str	r3, [r2, #112]	; 0x70
 8002066:	4b68      	ldr	r3, [pc, #416]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8002068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206a:	4a67      	ldr	r2, [pc, #412]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 800206c:	f023 0304 	bic.w	r3, r3, #4
 8002070:	6713      	str	r3, [r2, #112]	; 0x70
 8002072:	e01c      	b.n	80020ae <HAL_RCC_OscConfig+0x376>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b05      	cmp	r3, #5
 800207a:	d10c      	bne.n	8002096 <HAL_RCC_OscConfig+0x35e>
 800207c:	4b62      	ldr	r3, [pc, #392]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002080:	4a61      	ldr	r2, [pc, #388]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	6713      	str	r3, [r2, #112]	; 0x70
 8002088:	4b5f      	ldr	r3, [pc, #380]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 800208a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208c:	4a5e      	ldr	r2, [pc, #376]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6713      	str	r3, [r2, #112]	; 0x70
 8002094:	e00b      	b.n	80020ae <HAL_RCC_OscConfig+0x376>
 8002096:	4b5c      	ldr	r3, [pc, #368]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209a:	4a5b      	ldr	r2, [pc, #364]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	6713      	str	r3, [r2, #112]	; 0x70
 80020a2:	4b59      	ldr	r3, [pc, #356]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 80020a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a6:	4a58      	ldr	r2, [pc, #352]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 80020a8:	f023 0304 	bic.w	r3, r3, #4
 80020ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d015      	beq.n	80020e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b6:	f7ff fb49 	bl	800174c <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020bc:	e00a      	b.n	80020d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020be:	f7ff fb45 	bl	800174c <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e0d8      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d4:	4b4c      	ldr	r3, [pc, #304]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0ee      	beq.n	80020be <HAL_RCC_OscConfig+0x386>
 80020e0:	e014      	b.n	800210c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e2:	f7ff fb33 	bl	800174c <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e8:	e00a      	b.n	8002100 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ea:	f7ff fb2f 	bl	800174c <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e0c2      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002100:	4b41      	ldr	r3, [pc, #260]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8002102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1ee      	bne.n	80020ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800210c:	7dfb      	ldrb	r3, [r7, #23]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d105      	bne.n	800211e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002112:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	4a3c      	ldr	r2, [pc, #240]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8002118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800211c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 80ae 	beq.w	8002284 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002128:	4b37      	ldr	r3, [pc, #220]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	2b08      	cmp	r3, #8
 8002132:	d06d      	beq.n	8002210 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d14b      	bne.n	80021d4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213c:	4b32      	ldr	r3, [pc, #200]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a31      	ldr	r2, [pc, #196]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8002142:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7ff fb00 	bl	800174c <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002150:	f7ff fafc 	bl	800174c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e091      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002162:	4b29      	ldr	r3, [pc, #164]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69da      	ldr	r2, [r3, #28]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	019b      	lsls	r3, r3, #6
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	085b      	lsrs	r3, r3, #1
 8002186:	3b01      	subs	r3, #1
 8002188:	041b      	lsls	r3, r3, #16
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	061b      	lsls	r3, r3, #24
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	071b      	lsls	r3, r3, #28
 800219a:	491b      	ldr	r1, [pc, #108]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a18      	ldr	r2, [pc, #96]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 80021a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7ff face 	bl	800174c <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b4:	f7ff faca 	bl	800174c <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e05f      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x47c>
 80021d2:	e057      	b.n	8002284 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0b      	ldr	r2, [pc, #44]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 80021da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7ff fab4 	bl	800174c <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e8:	f7ff fab0 	bl	800174c <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e045      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fa:	4b03      	ldr	r3, [pc, #12]	; (8002208 <HAL_RCC_OscConfig+0x4d0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x4b0>
 8002206:	e03d      	b.n	8002284 <HAL_RCC_OscConfig+0x54c>
 8002208:	40023800 	.word	0x40023800
 800220c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002210:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <HAL_RCC_OscConfig+0x558>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d030      	beq.n	8002280 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d129      	bne.n	8002280 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d122      	bne.n	8002280 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002240:	4013      	ands	r3, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002246:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002248:	4293      	cmp	r3, r2
 800224a:	d119      	bne.n	8002280 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002256:	085b      	lsrs	r3, r3, #1
 8002258:	3b01      	subs	r3, #1
 800225a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800225c:	429a      	cmp	r2, r3
 800225e:	d10f      	bne.n	8002280 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800226c:	429a      	cmp	r2, r3
 800226e:	d107      	bne.n	8002280 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800

08002294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0d0      	b.n	800244e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022ac:	4b6a      	ldr	r3, [pc, #424]	; (8002458 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d910      	bls.n	80022dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b67      	ldr	r3, [pc, #412]	; (8002458 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 020f 	bic.w	r2, r3, #15
 80022c2:	4965      	ldr	r1, [pc, #404]	; (8002458 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b63      	ldr	r3, [pc, #396]	; (8002458 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0b8      	b.n	800244e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d020      	beq.n	800232a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022f4:	4b59      	ldr	r3, [pc, #356]	; (800245c <HAL_RCC_ClockConfig+0x1c8>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	4a58      	ldr	r2, [pc, #352]	; (800245c <HAL_RCC_ClockConfig+0x1c8>)
 80022fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800230c:	4b53      	ldr	r3, [pc, #332]	; (800245c <HAL_RCC_ClockConfig+0x1c8>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4a52      	ldr	r2, [pc, #328]	; (800245c <HAL_RCC_ClockConfig+0x1c8>)
 8002312:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002316:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002318:	4b50      	ldr	r3, [pc, #320]	; (800245c <HAL_RCC_ClockConfig+0x1c8>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	494d      	ldr	r1, [pc, #308]	; (800245c <HAL_RCC_ClockConfig+0x1c8>)
 8002326:	4313      	orrs	r3, r2
 8002328:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d040      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d107      	bne.n	800234e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233e:	4b47      	ldr	r3, [pc, #284]	; (800245c <HAL_RCC_ClockConfig+0x1c8>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d115      	bne.n	8002376 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e07f      	b.n	800244e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d107      	bne.n	8002366 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002356:	4b41      	ldr	r3, [pc, #260]	; (800245c <HAL_RCC_ClockConfig+0x1c8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d109      	bne.n	8002376 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e073      	b.n	800244e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002366:	4b3d      	ldr	r3, [pc, #244]	; (800245c <HAL_RCC_ClockConfig+0x1c8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e06b      	b.n	800244e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002376:	4b39      	ldr	r3, [pc, #228]	; (800245c <HAL_RCC_ClockConfig+0x1c8>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f023 0203 	bic.w	r2, r3, #3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	4936      	ldr	r1, [pc, #216]	; (800245c <HAL_RCC_ClockConfig+0x1c8>)
 8002384:	4313      	orrs	r3, r2
 8002386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002388:	f7ff f9e0 	bl	800174c <HAL_GetTick>
 800238c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238e:	e00a      	b.n	80023a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002390:	f7ff f9dc 	bl	800174c <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f241 3288 	movw	r2, #5000	; 0x1388
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e053      	b.n	800244e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a6:	4b2d      	ldr	r3, [pc, #180]	; (800245c <HAL_RCC_ClockConfig+0x1c8>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 020c 	and.w	r2, r3, #12
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d1eb      	bne.n	8002390 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023b8:	4b27      	ldr	r3, [pc, #156]	; (8002458 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d210      	bcs.n	80023e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c6:	4b24      	ldr	r3, [pc, #144]	; (8002458 <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 020f 	bic.w	r2, r3, #15
 80023ce:	4922      	ldr	r1, [pc, #136]	; (8002458 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d6:	4b20      	ldr	r3, [pc, #128]	; (8002458 <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e032      	b.n	800244e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <HAL_RCC_ClockConfig+0x1c8>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4916      	ldr	r1, [pc, #88]	; (800245c <HAL_RCC_ClockConfig+0x1c8>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d009      	beq.n	8002426 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002412:	4b12      	ldr	r3, [pc, #72]	; (800245c <HAL_RCC_ClockConfig+0x1c8>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	490e      	ldr	r1, [pc, #56]	; (800245c <HAL_RCC_ClockConfig+0x1c8>)
 8002422:	4313      	orrs	r3, r2
 8002424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002426:	f000 f821 	bl	800246c <HAL_RCC_GetSysClockFreq>
 800242a:	4602      	mov	r2, r0
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_RCC_ClockConfig+0x1c8>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	490a      	ldr	r1, [pc, #40]	; (8002460 <HAL_RCC_ClockConfig+0x1cc>)
 8002438:	5ccb      	ldrb	r3, [r1, r3]
 800243a:	fa22 f303 	lsr.w	r3, r2, r3
 800243e:	4a09      	ldr	r2, [pc, #36]	; (8002464 <HAL_RCC_ClockConfig+0x1d0>)
 8002440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_RCC_ClockConfig+0x1d4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff f93c 	bl	80016c4 <HAL_InitTick>

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40023c00 	.word	0x40023c00
 800245c:	40023800 	.word	0x40023800
 8002460:	08003c58 	.word	0x08003c58
 8002464:	2000002c 	.word	0x2000002c
 8002468:	20000030 	.word	0x20000030

0800246c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800246c:	b5b0      	push	{r4, r5, r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002472:	2100      	movs	r1, #0
 8002474:	6079      	str	r1, [r7, #4]
 8002476:	2100      	movs	r1, #0
 8002478:	60f9      	str	r1, [r7, #12]
 800247a:	2100      	movs	r1, #0
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800247e:	2100      	movs	r1, #0
 8002480:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002482:	4952      	ldr	r1, [pc, #328]	; (80025cc <HAL_RCC_GetSysClockFreq+0x160>)
 8002484:	6889      	ldr	r1, [r1, #8]
 8002486:	f001 010c 	and.w	r1, r1, #12
 800248a:	2908      	cmp	r1, #8
 800248c:	d00d      	beq.n	80024aa <HAL_RCC_GetSysClockFreq+0x3e>
 800248e:	2908      	cmp	r1, #8
 8002490:	f200 8094 	bhi.w	80025bc <HAL_RCC_GetSysClockFreq+0x150>
 8002494:	2900      	cmp	r1, #0
 8002496:	d002      	beq.n	800249e <HAL_RCC_GetSysClockFreq+0x32>
 8002498:	2904      	cmp	r1, #4
 800249a:	d003      	beq.n	80024a4 <HAL_RCC_GetSysClockFreq+0x38>
 800249c:	e08e      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800249e:	4b4c      	ldr	r3, [pc, #304]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80024a0:	60bb      	str	r3, [r7, #8]
      break;
 80024a2:	e08e      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024a4:	4b4b      	ldr	r3, [pc, #300]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80024a6:	60bb      	str	r3, [r7, #8]
      break;
 80024a8:	e08b      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024aa:	4948      	ldr	r1, [pc, #288]	; (80025cc <HAL_RCC_GetSysClockFreq+0x160>)
 80024ac:	6849      	ldr	r1, [r1, #4]
 80024ae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80024b2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80024b4:	4945      	ldr	r1, [pc, #276]	; (80025cc <HAL_RCC_GetSysClockFreq+0x160>)
 80024b6:	6849      	ldr	r1, [r1, #4]
 80024b8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80024bc:	2900      	cmp	r1, #0
 80024be:	d024      	beq.n	800250a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024c0:	4942      	ldr	r1, [pc, #264]	; (80025cc <HAL_RCC_GetSysClockFreq+0x160>)
 80024c2:	6849      	ldr	r1, [r1, #4]
 80024c4:	0989      	lsrs	r1, r1, #6
 80024c6:	4608      	mov	r0, r1
 80024c8:	f04f 0100 	mov.w	r1, #0
 80024cc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80024d0:	f04f 0500 	mov.w	r5, #0
 80024d4:	ea00 0204 	and.w	r2, r0, r4
 80024d8:	ea01 0305 	and.w	r3, r1, r5
 80024dc:	493d      	ldr	r1, [pc, #244]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80024de:	fb01 f003 	mul.w	r0, r1, r3
 80024e2:	2100      	movs	r1, #0
 80024e4:	fb01 f102 	mul.w	r1, r1, r2
 80024e8:	1844      	adds	r4, r0, r1
 80024ea:	493a      	ldr	r1, [pc, #232]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80024ec:	fba2 0101 	umull	r0, r1, r2, r1
 80024f0:	1863      	adds	r3, r4, r1
 80024f2:	4619      	mov	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	461a      	mov	r2, r3
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	f7fd fe9c 	bl	8000238 <__aeabi_uldivmod>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4613      	mov	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	e04a      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800250a:	4b30      	ldr	r3, [pc, #192]	; (80025cc <HAL_RCC_GetSysClockFreq+0x160>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	099b      	lsrs	r3, r3, #6
 8002510:	461a      	mov	r2, r3
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	f240 10ff 	movw	r0, #511	; 0x1ff
 800251a:	f04f 0100 	mov.w	r1, #0
 800251e:	ea02 0400 	and.w	r4, r2, r0
 8002522:	ea03 0501 	and.w	r5, r3, r1
 8002526:	4620      	mov	r0, r4
 8002528:	4629      	mov	r1, r5
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	f04f 0300 	mov.w	r3, #0
 8002532:	014b      	lsls	r3, r1, #5
 8002534:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002538:	0142      	lsls	r2, r0, #5
 800253a:	4610      	mov	r0, r2
 800253c:	4619      	mov	r1, r3
 800253e:	1b00      	subs	r0, r0, r4
 8002540:	eb61 0105 	sbc.w	r1, r1, r5
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	018b      	lsls	r3, r1, #6
 800254e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002552:	0182      	lsls	r2, r0, #6
 8002554:	1a12      	subs	r2, r2, r0
 8002556:	eb63 0301 	sbc.w	r3, r3, r1
 800255a:	f04f 0000 	mov.w	r0, #0
 800255e:	f04f 0100 	mov.w	r1, #0
 8002562:	00d9      	lsls	r1, r3, #3
 8002564:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002568:	00d0      	lsls	r0, r2, #3
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	1912      	adds	r2, r2, r4
 8002570:	eb45 0303 	adc.w	r3, r5, r3
 8002574:	f04f 0000 	mov.w	r0, #0
 8002578:	f04f 0100 	mov.w	r1, #0
 800257c:	0299      	lsls	r1, r3, #10
 800257e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002582:	0290      	lsls	r0, r2, #10
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	461a      	mov	r2, r3
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	f7fd fe50 	bl	8000238 <__aeabi_uldivmod>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4613      	mov	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80025a0:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <HAL_RCC_GetSysClockFreq+0x160>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	0c1b      	lsrs	r3, r3, #16
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	3301      	adds	r3, #1
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b8:	60bb      	str	r3, [r7, #8]
      break;
 80025ba:	e002      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025bc:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80025be:	60bb      	str	r3, [r7, #8]
      break;
 80025c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025c2:	68bb      	ldr	r3, [r7, #8]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bdb0      	pop	{r4, r5, r7, pc}
 80025cc:	40023800 	.word	0x40023800
 80025d0:	00f42400 	.word	0x00f42400
 80025d4:	017d7840 	.word	0x017d7840

080025d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <HAL_RCC_GetHCLKFreq+0x14>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	2000002c 	.word	0x2000002c

080025f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025f4:	f7ff fff0 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	0a9b      	lsrs	r3, r3, #10
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	4903      	ldr	r1, [pc, #12]	; (8002614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002606:	5ccb      	ldrb	r3, [r1, r3]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800260c:	4618      	mov	r0, r3
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40023800 	.word	0x40023800
 8002614:	08003c68 	.word	0x08003c68

08002618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800261c:	f7ff ffdc 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 8002620:	4602      	mov	r2, r0
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	0b5b      	lsrs	r3, r3, #13
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	4903      	ldr	r1, [pc, #12]	; (800263c <HAL_RCC_GetPCLK2Freq+0x24>)
 800262e:	5ccb      	ldrb	r3, [r1, r3]
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002634:	4618      	mov	r0, r3
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40023800 	.word	0x40023800
 800263c:	08003c68 	.word	0x08003c68

08002640 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d012      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002668:	4b69      	ldr	r3, [pc, #420]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4a68      	ldr	r2, [pc, #416]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800266e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002672:	6093      	str	r3, [r2, #8]
 8002674:	4b66      	ldr	r3, [pc, #408]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267c:	4964      	ldr	r1, [pc, #400]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800268a:	2301      	movs	r3, #1
 800268c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d017      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800269a:	4b5d      	ldr	r3, [pc, #372]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a8:	4959      	ldr	r1, [pc, #356]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026b8:	d101      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80026ba:	2301      	movs	r3, #1
 80026bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80026c6:	2301      	movs	r3, #1
 80026c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d017      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026d6:	4b4e      	ldr	r3, [pc, #312]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	494a      	ldr	r1, [pc, #296]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f4:	d101      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80026f6:	2301      	movs	r3, #1
 80026f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002702:	2301      	movs	r3, #1
 8002704:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002712:	2301      	movs	r3, #1
 8002714:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 808b 	beq.w	800283a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002724:	4b3a      	ldr	r3, [pc, #232]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	4a39      	ldr	r2, [pc, #228]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272e:	6413      	str	r3, [r2, #64]	; 0x40
 8002730:	4b37      	ldr	r3, [pc, #220]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800273c:	4b35      	ldr	r3, [pc, #212]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a34      	ldr	r2, [pc, #208]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002746:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002748:	f7ff f800 	bl	800174c <HAL_GetTick>
 800274c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002750:	f7fe fffc 	bl	800174c <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	; 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e358      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002762:	4b2c      	ldr	r3, [pc, #176]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800276e:	4b28      	ldr	r3, [pc, #160]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002776:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d035      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	429a      	cmp	r2, r3
 800278a:	d02e      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800278c:	4b20      	ldr	r3, [pc, #128]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002794:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002796:	4b1e      	ldr	r3, [pc, #120]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	4a1d      	ldr	r2, [pc, #116]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027a2:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	4a1a      	ldr	r2, [pc, #104]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80027ae:	4a18      	ldr	r2, [pc, #96]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027b4:	4b16      	ldr	r3, [pc, #88]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d114      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7fe ffc4 	bl	800174c <HAL_GetTick>
 80027c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c6:	e00a      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c8:	f7fe ffc0 	bl	800174c <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e31a      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0ee      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027f6:	d111      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002804:	4b04      	ldr	r3, [pc, #16]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002806:	400b      	ands	r3, r1
 8002808:	4901      	ldr	r1, [pc, #4]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280a:	4313      	orrs	r3, r2
 800280c:	608b      	str	r3, [r1, #8]
 800280e:	e00b      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002810:	40023800 	.word	0x40023800
 8002814:	40007000 	.word	0x40007000
 8002818:	0ffffcff 	.word	0x0ffffcff
 800281c:	4bb1      	ldr	r3, [pc, #708]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4ab0      	ldr	r2, [pc, #704]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002822:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002826:	6093      	str	r3, [r2, #8]
 8002828:	4bae      	ldr	r3, [pc, #696]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800282a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002834:	49ab      	ldr	r1, [pc, #684]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002836:	4313      	orrs	r3, r2
 8002838:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	2b00      	cmp	r3, #0
 8002844:	d010      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002846:	4ba7      	ldr	r3, [pc, #668]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800284c:	4aa5      	ldr	r2, [pc, #660]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800284e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002852:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002856:	4ba3      	ldr	r3, [pc, #652]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002858:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	49a0      	ldr	r1, [pc, #640]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00a      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002874:	4b9b      	ldr	r3, [pc, #620]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002882:	4998      	ldr	r1, [pc, #608]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002896:	4b93      	ldr	r3, [pc, #588]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028a4:	498f      	ldr	r1, [pc, #572]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00a      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028b8:	4b8a      	ldr	r3, [pc, #552]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028c6:	4987      	ldr	r1, [pc, #540]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028da:	4b82      	ldr	r3, [pc, #520]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	497e      	ldr	r1, [pc, #504]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00a      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028fc:	4b79      	ldr	r3, [pc, #484]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002902:	f023 0203 	bic.w	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	4976      	ldr	r1, [pc, #472]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00a      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800291e:	4b71      	ldr	r3, [pc, #452]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002924:	f023 020c 	bic.w	r2, r3, #12
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292c:	496d      	ldr	r1, [pc, #436]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00a      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002940:	4b68      	ldr	r3, [pc, #416]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002946:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294e:	4965      	ldr	r1, [pc, #404]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002962:	4b60      	ldr	r3, [pc, #384]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002968:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002970:	495c      	ldr	r1, [pc, #368]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00a      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002984:	4b57      	ldr	r3, [pc, #348]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002992:	4954      	ldr	r1, [pc, #336]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80029a6:	4b4f      	ldr	r3, [pc, #316]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	494b      	ldr	r1, [pc, #300]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80029c8:	4b46      	ldr	r3, [pc, #280]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d6:	4943      	ldr	r1, [pc, #268]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80029ea:	4b3e      	ldr	r3, [pc, #248]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f8:	493a      	ldr	r1, [pc, #232]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00a      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a0c:	4b35      	ldr	r3, [pc, #212]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a12:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a1a:	4932      	ldr	r1, [pc, #200]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d011      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a2e:	4b2d      	ldr	r3, [pc, #180]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a34:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a3c:	4929      	ldr	r1, [pc, #164]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a5e:	4b21      	ldr	r3, [pc, #132]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a64:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6c:	491d      	ldr	r1, [pc, #116]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00b      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a80:	4b18      	ldr	r3, [pc, #96]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a86:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a90:	4914      	ldr	r1, [pc, #80]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00b      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aaa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab4:	490b      	ldr	r1, [pc, #44]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00f      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ace:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad8:	4902      	ldr	r1, [pc, #8]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8002ae0:	e002      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00b      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002af4:	4b81      	ldr	r3, [pc, #516]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002afa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b04:	497d      	ldr	r1, [pc, #500]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d006      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 80d6 	beq.w	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b20:	4b76      	ldr	r3, [pc, #472]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a75      	ldr	r2, [pc, #468]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002b26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b2c:	f7fe fe0e 	bl	800174c <HAL_GetTick>
 8002b30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x506>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b34:	f7fe fe0a 	bl	800174c <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	; 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x506>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e166      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b46:	4b6d      	ldr	r3, [pc, #436]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x4f4>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d021      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d11d      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b66:	4b65      	ldr	r3, [pc, #404]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b6c:	0c1b      	lsrs	r3, r3, #16
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b74:	4b61      	ldr	r3, [pc, #388]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b7a:	0e1b      	lsrs	r3, r3, #24
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	019a      	lsls	r2, r3, #6
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	041b      	lsls	r3, r3, #16
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	061b      	lsls	r3, r3, #24
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	071b      	lsls	r3, r3, #28
 8002b9a:	4958      	ldr	r1, [pc, #352]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d004      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x578>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bb6:	d00a      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x58e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d02e      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bcc:	d129      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bce:	4b4b      	ldr	r3, [pc, #300]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd4:	0c1b      	lsrs	r3, r3, #16
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bdc:	4b47      	ldr	r3, [pc, #284]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002be2:	0f1b      	lsrs	r3, r3, #28
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	019a      	lsls	r2, r3, #6
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	041b      	lsls	r3, r3, #16
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	061b      	lsls	r3, r3, #24
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	071b      	lsls	r3, r3, #28
 8002c02:	493e      	ldr	r1, [pc, #248]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c0a:	4b3c      	ldr	r3, [pc, #240]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c10:	f023 021f 	bic.w	r2, r3, #31
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	4938      	ldr	r1, [pc, #224]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d01d      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c2e:	4b33      	ldr	r3, [pc, #204]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c34:	0e1b      	lsrs	r3, r3, #24
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c3c:	4b2f      	ldr	r3, [pc, #188]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c42:	0f1b      	lsrs	r3, r3, #28
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	019a      	lsls	r2, r3, #6
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	041b      	lsls	r3, r3, #16
 8002c56:	431a      	orrs	r2, r3
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	061b      	lsls	r3, r3, #24
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	071b      	lsls	r3, r3, #28
 8002c62:	4926      	ldr	r1, [pc, #152]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d011      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x65a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	019a      	lsls	r2, r3, #6
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	041b      	lsls	r3, r3, #16
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	061b      	lsls	r3, r3, #24
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	071b      	lsls	r3, r3, #28
 8002c92:	491a      	ldr	r1, [pc, #104]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c9a:	4b18      	ldr	r3, [pc, #96]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a17      	ldr	r2, [pc, #92]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002ca0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ca6:	f7fe fd51 	bl	800174c <HAL_GetTick>
 8002caa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cae:	f7fe fd4d 	bl	800174c <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b64      	cmp	r3, #100	; 0x64
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e0a9      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cc0:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x66e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	f040 809f 	bne.w	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8002cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce0:	f7fe fd34 	bl	800174c <HAL_GetTick>
 8002ce4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ce6:	e00b      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ce8:	f7fe fd30 	bl	800174c <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	; 0x64
 8002cf4:	d904      	bls.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e08c      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d00:	4b46      	ldr	r3, [pc, #280]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d0c:	d0ec      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x6a8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d009      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d02e      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x74c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d12a      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x74c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d36:	4b39      	ldr	r3, [pc, #228]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d44:	4b35      	ldr	r3, [pc, #212]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4a:	0f1b      	lsrs	r3, r3, #28
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	019a      	lsls	r2, r3, #6
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	041b      	lsls	r3, r3, #16
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	061b      	lsls	r3, r3, #24
 8002d64:	431a      	orrs	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	071b      	lsls	r3, r3, #28
 8002d6a:	492c      	ldr	r1, [pc, #176]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d72:	4b2a      	ldr	r3, [pc, #168]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	3b01      	subs	r3, #1
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	4925      	ldr	r1, [pc, #148]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d022      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x79e>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002da0:	d11d      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002da2:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da8:	0e1b      	lsrs	r3, r3, #24
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002db0:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db6:	0f1b      	lsrs	r3, r3, #28
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	019a      	lsls	r2, r3, #6
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	041b      	lsls	r3, r3, #16
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	061b      	lsls	r3, r3, #24
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	071b      	lsls	r3, r3, #28
 8002dd6:	4911      	ldr	r1, [pc, #68]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002dde:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a0e      	ldr	r2, [pc, #56]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dea:	f7fe fcaf 	bl	800174c <HAL_GetTick>
 8002dee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002df2:	f7fe fcab 	bl	800174c <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b64      	cmp	r3, #100	; 0x64
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e007      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e10:	d1ef      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
      }
    }
  }
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3720      	adds	r7, #32
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40023800 	.word	0x40023800

08002e20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e040      	b.n	8002eb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fe fb6a 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2224      	movs	r2, #36	; 0x24
 8002e4c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0201 	bic.w	r2, r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f990 	bl	8003184 <UART_SetConfig>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e022      	b.n	8002eb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fbe6 	bl	8003648 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fc6d 	bl	800378c <UART_CheckIdleState>
 8002eb2:	4603      	mov	r3, r0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ed0:	2b20      	cmp	r3, #32
 8002ed2:	f040 8081 	bne.w	8002fd8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_UART_Transmit+0x26>
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e079      	b.n	8002fda <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_UART_Transmit+0x38>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e072      	b.n	8002fda <HAL_UART_Transmit+0x11e>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2221      	movs	r2, #33	; 0x21
 8002f08:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f0a:	f7fe fc1f 	bl	800174c <HAL_GetTick>
 8002f0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	88fa      	ldrh	r2, [r7, #6]
 8002f14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	88fa      	ldrh	r2, [r7, #6]
 8002f1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f28:	d108      	bne.n	8002f3c <HAL_UART_Transmit+0x80>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d104      	bne.n	8002f3c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	e003      	b.n	8002f44 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f4c:	e02c      	b.n	8002fa8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2200      	movs	r2, #0
 8002f56:	2180      	movs	r1, #128	; 0x80
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 fc60 	bl	800381e <UART_WaitOnFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e038      	b.n	8002fda <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10b      	bne.n	8002f86 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	3302      	adds	r3, #2
 8002f82:	61bb      	str	r3, [r7, #24]
 8002f84:	e007      	b.n	8002f96 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	781a      	ldrb	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	3301      	adds	r3, #1
 8002f94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1cc      	bne.n	8002f4e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2140      	movs	r1, #64	; 0x40
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 fc2d 	bl	800381e <UART_WaitOnFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e005      	b.n	8002fda <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e000      	b.n	8002fda <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002fd8:	2302      	movs	r3, #2
  }
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3720      	adds	r7, #32
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b08a      	sub	sp, #40	; 0x28
 8002fe6:	af02      	add	r7, sp, #8
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	f040 80be 	bne.w	8003178 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_UART_Receive+0x26>
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0b6      	b.n	800317a <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_UART_Receive+0x38>
 8003016:	2302      	movs	r3, #2
 8003018:	e0af      	b.n	800317a <HAL_UART_Receive+0x198>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2222      	movs	r2, #34	; 0x22
 800302e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003036:	f7fe fb89 	bl	800174c <HAL_GetTick>
 800303a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	88fa      	ldrh	r2, [r7, #6]
 8003040:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	88fa      	ldrh	r2, [r7, #6]
 8003048:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003054:	d10e      	bne.n	8003074 <HAL_UART_Receive+0x92>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d105      	bne.n	800306a <HAL_UART_Receive+0x88>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003064:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003068:	e02d      	b.n	80030c6 <HAL_UART_Receive+0xe4>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	22ff      	movs	r2, #255	; 0xff
 800306e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003072:	e028      	b.n	80030c6 <HAL_UART_Receive+0xe4>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10d      	bne.n	8003098 <HAL_UART_Receive+0xb6>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d104      	bne.n	800308e <HAL_UART_Receive+0xac>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	22ff      	movs	r2, #255	; 0xff
 8003088:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800308c:	e01b      	b.n	80030c6 <HAL_UART_Receive+0xe4>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	227f      	movs	r2, #127	; 0x7f
 8003092:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003096:	e016      	b.n	80030c6 <HAL_UART_Receive+0xe4>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030a0:	d10d      	bne.n	80030be <HAL_UART_Receive+0xdc>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d104      	bne.n	80030b4 <HAL_UART_Receive+0xd2>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	227f      	movs	r2, #127	; 0x7f
 80030ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030b2:	e008      	b.n	80030c6 <HAL_UART_Receive+0xe4>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	223f      	movs	r2, #63	; 0x3f
 80030b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030bc:	e003      	b.n	80030c6 <HAL_UART_Receive+0xe4>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80030cc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d6:	d108      	bne.n	80030ea <HAL_UART_Receive+0x108>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d104      	bne.n	80030ea <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	61bb      	str	r3, [r7, #24]
 80030e8:	e003      	b.n	80030f2 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80030fa:	e032      	b.n	8003162 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2200      	movs	r2, #0
 8003104:	2120      	movs	r1, #32
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 fb89 	bl	800381e <UART_WaitOnFlagUntilTimeout>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e031      	b.n	800317a <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10c      	bne.n	8003136 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	b29a      	uxth	r2, r3
 8003124:	8a7b      	ldrh	r3, [r7, #18]
 8003126:	4013      	ands	r3, r2
 8003128:	b29a      	uxth	r2, r3
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	3302      	adds	r3, #2
 8003132:	61bb      	str	r3, [r7, #24]
 8003134:	e00c      	b.n	8003150 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	b2da      	uxtb	r2, r3
 800313e:	8a7b      	ldrh	r3, [r7, #18]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	4013      	ands	r3, r2
 8003144:	b2da      	uxtb	r2, r3
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3301      	adds	r3, #1
 800314e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003168:	b29b      	uxth	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1c6      	bne.n	80030fc <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	e000      	b.n	800317a <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8003178:	2302      	movs	r3, #2
  }
}
 800317a:	4618      	mov	r0, r3
 800317c:	3720      	adds	r7, #32
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	4ba7      	ldr	r3, [pc, #668]	; (800344c <UART_SetConfig+0x2c8>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	6979      	ldr	r1, [r7, #20]
 80031b8:	430b      	orrs	r3, r1
 80031ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a95      	ldr	r2, [pc, #596]	; (8003450 <UART_SetConfig+0x2cc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d120      	bne.n	8003242 <UART_SetConfig+0xbe>
 8003200:	4b94      	ldr	r3, [pc, #592]	; (8003454 <UART_SetConfig+0x2d0>)
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	2b03      	cmp	r3, #3
 800320c:	d816      	bhi.n	800323c <UART_SetConfig+0xb8>
 800320e:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <UART_SetConfig+0x90>)
 8003210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003214:	08003225 	.word	0x08003225
 8003218:	08003231 	.word	0x08003231
 800321c:	0800322b 	.word	0x0800322b
 8003220:	08003237 	.word	0x08003237
 8003224:	2301      	movs	r3, #1
 8003226:	77fb      	strb	r3, [r7, #31]
 8003228:	e14f      	b.n	80034ca <UART_SetConfig+0x346>
 800322a:	2302      	movs	r3, #2
 800322c:	77fb      	strb	r3, [r7, #31]
 800322e:	e14c      	b.n	80034ca <UART_SetConfig+0x346>
 8003230:	2304      	movs	r3, #4
 8003232:	77fb      	strb	r3, [r7, #31]
 8003234:	e149      	b.n	80034ca <UART_SetConfig+0x346>
 8003236:	2308      	movs	r3, #8
 8003238:	77fb      	strb	r3, [r7, #31]
 800323a:	e146      	b.n	80034ca <UART_SetConfig+0x346>
 800323c:	2310      	movs	r3, #16
 800323e:	77fb      	strb	r3, [r7, #31]
 8003240:	e143      	b.n	80034ca <UART_SetConfig+0x346>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a84      	ldr	r2, [pc, #528]	; (8003458 <UART_SetConfig+0x2d4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d132      	bne.n	80032b2 <UART_SetConfig+0x12e>
 800324c:	4b81      	ldr	r3, [pc, #516]	; (8003454 <UART_SetConfig+0x2d0>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b0c      	cmp	r3, #12
 8003258:	d828      	bhi.n	80032ac <UART_SetConfig+0x128>
 800325a:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <UART_SetConfig+0xdc>)
 800325c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003260:	08003295 	.word	0x08003295
 8003264:	080032ad 	.word	0x080032ad
 8003268:	080032ad 	.word	0x080032ad
 800326c:	080032ad 	.word	0x080032ad
 8003270:	080032a1 	.word	0x080032a1
 8003274:	080032ad 	.word	0x080032ad
 8003278:	080032ad 	.word	0x080032ad
 800327c:	080032ad 	.word	0x080032ad
 8003280:	0800329b 	.word	0x0800329b
 8003284:	080032ad 	.word	0x080032ad
 8003288:	080032ad 	.word	0x080032ad
 800328c:	080032ad 	.word	0x080032ad
 8003290:	080032a7 	.word	0x080032a7
 8003294:	2300      	movs	r3, #0
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	e117      	b.n	80034ca <UART_SetConfig+0x346>
 800329a:	2302      	movs	r3, #2
 800329c:	77fb      	strb	r3, [r7, #31]
 800329e:	e114      	b.n	80034ca <UART_SetConfig+0x346>
 80032a0:	2304      	movs	r3, #4
 80032a2:	77fb      	strb	r3, [r7, #31]
 80032a4:	e111      	b.n	80034ca <UART_SetConfig+0x346>
 80032a6:	2308      	movs	r3, #8
 80032a8:	77fb      	strb	r3, [r7, #31]
 80032aa:	e10e      	b.n	80034ca <UART_SetConfig+0x346>
 80032ac:	2310      	movs	r3, #16
 80032ae:	77fb      	strb	r3, [r7, #31]
 80032b0:	e10b      	b.n	80034ca <UART_SetConfig+0x346>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a69      	ldr	r2, [pc, #420]	; (800345c <UART_SetConfig+0x2d8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d120      	bne.n	80032fe <UART_SetConfig+0x17a>
 80032bc:	4b65      	ldr	r3, [pc, #404]	; (8003454 <UART_SetConfig+0x2d0>)
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032c6:	2b30      	cmp	r3, #48	; 0x30
 80032c8:	d013      	beq.n	80032f2 <UART_SetConfig+0x16e>
 80032ca:	2b30      	cmp	r3, #48	; 0x30
 80032cc:	d814      	bhi.n	80032f8 <UART_SetConfig+0x174>
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	d009      	beq.n	80032e6 <UART_SetConfig+0x162>
 80032d2:	2b20      	cmp	r3, #32
 80032d4:	d810      	bhi.n	80032f8 <UART_SetConfig+0x174>
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <UART_SetConfig+0x15c>
 80032da:	2b10      	cmp	r3, #16
 80032dc:	d006      	beq.n	80032ec <UART_SetConfig+0x168>
 80032de:	e00b      	b.n	80032f8 <UART_SetConfig+0x174>
 80032e0:	2300      	movs	r3, #0
 80032e2:	77fb      	strb	r3, [r7, #31]
 80032e4:	e0f1      	b.n	80034ca <UART_SetConfig+0x346>
 80032e6:	2302      	movs	r3, #2
 80032e8:	77fb      	strb	r3, [r7, #31]
 80032ea:	e0ee      	b.n	80034ca <UART_SetConfig+0x346>
 80032ec:	2304      	movs	r3, #4
 80032ee:	77fb      	strb	r3, [r7, #31]
 80032f0:	e0eb      	b.n	80034ca <UART_SetConfig+0x346>
 80032f2:	2308      	movs	r3, #8
 80032f4:	77fb      	strb	r3, [r7, #31]
 80032f6:	e0e8      	b.n	80034ca <UART_SetConfig+0x346>
 80032f8:	2310      	movs	r3, #16
 80032fa:	77fb      	strb	r3, [r7, #31]
 80032fc:	e0e5      	b.n	80034ca <UART_SetConfig+0x346>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a57      	ldr	r2, [pc, #348]	; (8003460 <UART_SetConfig+0x2dc>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d120      	bne.n	800334a <UART_SetConfig+0x1c6>
 8003308:	4b52      	ldr	r3, [pc, #328]	; (8003454 <UART_SetConfig+0x2d0>)
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003312:	2bc0      	cmp	r3, #192	; 0xc0
 8003314:	d013      	beq.n	800333e <UART_SetConfig+0x1ba>
 8003316:	2bc0      	cmp	r3, #192	; 0xc0
 8003318:	d814      	bhi.n	8003344 <UART_SetConfig+0x1c0>
 800331a:	2b80      	cmp	r3, #128	; 0x80
 800331c:	d009      	beq.n	8003332 <UART_SetConfig+0x1ae>
 800331e:	2b80      	cmp	r3, #128	; 0x80
 8003320:	d810      	bhi.n	8003344 <UART_SetConfig+0x1c0>
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <UART_SetConfig+0x1a8>
 8003326:	2b40      	cmp	r3, #64	; 0x40
 8003328:	d006      	beq.n	8003338 <UART_SetConfig+0x1b4>
 800332a:	e00b      	b.n	8003344 <UART_SetConfig+0x1c0>
 800332c:	2300      	movs	r3, #0
 800332e:	77fb      	strb	r3, [r7, #31]
 8003330:	e0cb      	b.n	80034ca <UART_SetConfig+0x346>
 8003332:	2302      	movs	r3, #2
 8003334:	77fb      	strb	r3, [r7, #31]
 8003336:	e0c8      	b.n	80034ca <UART_SetConfig+0x346>
 8003338:	2304      	movs	r3, #4
 800333a:	77fb      	strb	r3, [r7, #31]
 800333c:	e0c5      	b.n	80034ca <UART_SetConfig+0x346>
 800333e:	2308      	movs	r3, #8
 8003340:	77fb      	strb	r3, [r7, #31]
 8003342:	e0c2      	b.n	80034ca <UART_SetConfig+0x346>
 8003344:	2310      	movs	r3, #16
 8003346:	77fb      	strb	r3, [r7, #31]
 8003348:	e0bf      	b.n	80034ca <UART_SetConfig+0x346>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a45      	ldr	r2, [pc, #276]	; (8003464 <UART_SetConfig+0x2e0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d125      	bne.n	80033a0 <UART_SetConfig+0x21c>
 8003354:	4b3f      	ldr	r3, [pc, #252]	; (8003454 <UART_SetConfig+0x2d0>)
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800335e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003362:	d017      	beq.n	8003394 <UART_SetConfig+0x210>
 8003364:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003368:	d817      	bhi.n	800339a <UART_SetConfig+0x216>
 800336a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800336e:	d00b      	beq.n	8003388 <UART_SetConfig+0x204>
 8003370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003374:	d811      	bhi.n	800339a <UART_SetConfig+0x216>
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <UART_SetConfig+0x1fe>
 800337a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800337e:	d006      	beq.n	800338e <UART_SetConfig+0x20a>
 8003380:	e00b      	b.n	800339a <UART_SetConfig+0x216>
 8003382:	2300      	movs	r3, #0
 8003384:	77fb      	strb	r3, [r7, #31]
 8003386:	e0a0      	b.n	80034ca <UART_SetConfig+0x346>
 8003388:	2302      	movs	r3, #2
 800338a:	77fb      	strb	r3, [r7, #31]
 800338c:	e09d      	b.n	80034ca <UART_SetConfig+0x346>
 800338e:	2304      	movs	r3, #4
 8003390:	77fb      	strb	r3, [r7, #31]
 8003392:	e09a      	b.n	80034ca <UART_SetConfig+0x346>
 8003394:	2308      	movs	r3, #8
 8003396:	77fb      	strb	r3, [r7, #31]
 8003398:	e097      	b.n	80034ca <UART_SetConfig+0x346>
 800339a:	2310      	movs	r3, #16
 800339c:	77fb      	strb	r3, [r7, #31]
 800339e:	e094      	b.n	80034ca <UART_SetConfig+0x346>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a30      	ldr	r2, [pc, #192]	; (8003468 <UART_SetConfig+0x2e4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d125      	bne.n	80033f6 <UART_SetConfig+0x272>
 80033aa:	4b2a      	ldr	r3, [pc, #168]	; (8003454 <UART_SetConfig+0x2d0>)
 80033ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033b8:	d017      	beq.n	80033ea <UART_SetConfig+0x266>
 80033ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033be:	d817      	bhi.n	80033f0 <UART_SetConfig+0x26c>
 80033c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033c4:	d00b      	beq.n	80033de <UART_SetConfig+0x25a>
 80033c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ca:	d811      	bhi.n	80033f0 <UART_SetConfig+0x26c>
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <UART_SetConfig+0x254>
 80033d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d4:	d006      	beq.n	80033e4 <UART_SetConfig+0x260>
 80033d6:	e00b      	b.n	80033f0 <UART_SetConfig+0x26c>
 80033d8:	2301      	movs	r3, #1
 80033da:	77fb      	strb	r3, [r7, #31]
 80033dc:	e075      	b.n	80034ca <UART_SetConfig+0x346>
 80033de:	2302      	movs	r3, #2
 80033e0:	77fb      	strb	r3, [r7, #31]
 80033e2:	e072      	b.n	80034ca <UART_SetConfig+0x346>
 80033e4:	2304      	movs	r3, #4
 80033e6:	77fb      	strb	r3, [r7, #31]
 80033e8:	e06f      	b.n	80034ca <UART_SetConfig+0x346>
 80033ea:	2308      	movs	r3, #8
 80033ec:	77fb      	strb	r3, [r7, #31]
 80033ee:	e06c      	b.n	80034ca <UART_SetConfig+0x346>
 80033f0:	2310      	movs	r3, #16
 80033f2:	77fb      	strb	r3, [r7, #31]
 80033f4:	e069      	b.n	80034ca <UART_SetConfig+0x346>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a1c      	ldr	r2, [pc, #112]	; (800346c <UART_SetConfig+0x2e8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d137      	bne.n	8003470 <UART_SetConfig+0x2ec>
 8003400:	4b14      	ldr	r3, [pc, #80]	; (8003454 <UART_SetConfig+0x2d0>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003406:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800340a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800340e:	d017      	beq.n	8003440 <UART_SetConfig+0x2bc>
 8003410:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003414:	d817      	bhi.n	8003446 <UART_SetConfig+0x2c2>
 8003416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800341a:	d00b      	beq.n	8003434 <UART_SetConfig+0x2b0>
 800341c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003420:	d811      	bhi.n	8003446 <UART_SetConfig+0x2c2>
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <UART_SetConfig+0x2aa>
 8003426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800342a:	d006      	beq.n	800343a <UART_SetConfig+0x2b6>
 800342c:	e00b      	b.n	8003446 <UART_SetConfig+0x2c2>
 800342e:	2300      	movs	r3, #0
 8003430:	77fb      	strb	r3, [r7, #31]
 8003432:	e04a      	b.n	80034ca <UART_SetConfig+0x346>
 8003434:	2302      	movs	r3, #2
 8003436:	77fb      	strb	r3, [r7, #31]
 8003438:	e047      	b.n	80034ca <UART_SetConfig+0x346>
 800343a:	2304      	movs	r3, #4
 800343c:	77fb      	strb	r3, [r7, #31]
 800343e:	e044      	b.n	80034ca <UART_SetConfig+0x346>
 8003440:	2308      	movs	r3, #8
 8003442:	77fb      	strb	r3, [r7, #31]
 8003444:	e041      	b.n	80034ca <UART_SetConfig+0x346>
 8003446:	2310      	movs	r3, #16
 8003448:	77fb      	strb	r3, [r7, #31]
 800344a:	e03e      	b.n	80034ca <UART_SetConfig+0x346>
 800344c:	efff69f3 	.word	0xefff69f3
 8003450:	40011000 	.word	0x40011000
 8003454:	40023800 	.word	0x40023800
 8003458:	40004400 	.word	0x40004400
 800345c:	40004800 	.word	0x40004800
 8003460:	40004c00 	.word	0x40004c00
 8003464:	40005000 	.word	0x40005000
 8003468:	40011400 	.word	0x40011400
 800346c:	40007800 	.word	0x40007800
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a71      	ldr	r2, [pc, #452]	; (800363c <UART_SetConfig+0x4b8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d125      	bne.n	80034c6 <UART_SetConfig+0x342>
 800347a:	4b71      	ldr	r3, [pc, #452]	; (8003640 <UART_SetConfig+0x4bc>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003480:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003484:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003488:	d017      	beq.n	80034ba <UART_SetConfig+0x336>
 800348a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800348e:	d817      	bhi.n	80034c0 <UART_SetConfig+0x33c>
 8003490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003494:	d00b      	beq.n	80034ae <UART_SetConfig+0x32a>
 8003496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800349a:	d811      	bhi.n	80034c0 <UART_SetConfig+0x33c>
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <UART_SetConfig+0x324>
 80034a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034a4:	d006      	beq.n	80034b4 <UART_SetConfig+0x330>
 80034a6:	e00b      	b.n	80034c0 <UART_SetConfig+0x33c>
 80034a8:	2300      	movs	r3, #0
 80034aa:	77fb      	strb	r3, [r7, #31]
 80034ac:	e00d      	b.n	80034ca <UART_SetConfig+0x346>
 80034ae:	2302      	movs	r3, #2
 80034b0:	77fb      	strb	r3, [r7, #31]
 80034b2:	e00a      	b.n	80034ca <UART_SetConfig+0x346>
 80034b4:	2304      	movs	r3, #4
 80034b6:	77fb      	strb	r3, [r7, #31]
 80034b8:	e007      	b.n	80034ca <UART_SetConfig+0x346>
 80034ba:	2308      	movs	r3, #8
 80034bc:	77fb      	strb	r3, [r7, #31]
 80034be:	e004      	b.n	80034ca <UART_SetConfig+0x346>
 80034c0:	2310      	movs	r3, #16
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e001      	b.n	80034ca <UART_SetConfig+0x346>
 80034c6:	2310      	movs	r3, #16
 80034c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d2:	d15b      	bne.n	800358c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80034d4:	7ffb      	ldrb	r3, [r7, #31]
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d827      	bhi.n	800352a <UART_SetConfig+0x3a6>
 80034da:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <UART_SetConfig+0x35c>)
 80034dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e0:	08003505 	.word	0x08003505
 80034e4:	0800350d 	.word	0x0800350d
 80034e8:	08003515 	.word	0x08003515
 80034ec:	0800352b 	.word	0x0800352b
 80034f0:	0800351b 	.word	0x0800351b
 80034f4:	0800352b 	.word	0x0800352b
 80034f8:	0800352b 	.word	0x0800352b
 80034fc:	0800352b 	.word	0x0800352b
 8003500:	08003523 	.word	0x08003523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003504:	f7ff f874 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 8003508:	61b8      	str	r0, [r7, #24]
        break;
 800350a:	e013      	b.n	8003534 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800350c:	f7ff f884 	bl	8002618 <HAL_RCC_GetPCLK2Freq>
 8003510:	61b8      	str	r0, [r7, #24]
        break;
 8003512:	e00f      	b.n	8003534 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003514:	4b4b      	ldr	r3, [pc, #300]	; (8003644 <UART_SetConfig+0x4c0>)
 8003516:	61bb      	str	r3, [r7, #24]
        break;
 8003518:	e00c      	b.n	8003534 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800351a:	f7fe ffa7 	bl	800246c <HAL_RCC_GetSysClockFreq>
 800351e:	61b8      	str	r0, [r7, #24]
        break;
 8003520:	e008      	b.n	8003534 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003526:	61bb      	str	r3, [r7, #24]
        break;
 8003528:	e004      	b.n	8003534 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	77bb      	strb	r3, [r7, #30]
        break;
 8003532:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d074      	beq.n	8003624 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	005a      	lsls	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	085b      	lsrs	r3, r3, #1
 8003544:	441a      	add	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	fbb2 f3f3 	udiv	r3, r2, r3
 800354e:	b29b      	uxth	r3, r3
 8003550:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	2b0f      	cmp	r3, #15
 8003556:	d916      	bls.n	8003586 <UART_SetConfig+0x402>
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355e:	d212      	bcs.n	8003586 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	b29b      	uxth	r3, r3
 8003564:	f023 030f 	bic.w	r3, r3, #15
 8003568:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	085b      	lsrs	r3, r3, #1
 800356e:	b29b      	uxth	r3, r3
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	b29a      	uxth	r2, r3
 8003576:	89fb      	ldrh	r3, [r7, #14]
 8003578:	4313      	orrs	r3, r2
 800357a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	89fa      	ldrh	r2, [r7, #14]
 8003582:	60da      	str	r2, [r3, #12]
 8003584:	e04e      	b.n	8003624 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	77bb      	strb	r3, [r7, #30]
 800358a:	e04b      	b.n	8003624 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800358c:	7ffb      	ldrb	r3, [r7, #31]
 800358e:	2b08      	cmp	r3, #8
 8003590:	d827      	bhi.n	80035e2 <UART_SetConfig+0x45e>
 8003592:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <UART_SetConfig+0x414>)
 8003594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003598:	080035bd 	.word	0x080035bd
 800359c:	080035c5 	.word	0x080035c5
 80035a0:	080035cd 	.word	0x080035cd
 80035a4:	080035e3 	.word	0x080035e3
 80035a8:	080035d3 	.word	0x080035d3
 80035ac:	080035e3 	.word	0x080035e3
 80035b0:	080035e3 	.word	0x080035e3
 80035b4:	080035e3 	.word	0x080035e3
 80035b8:	080035db 	.word	0x080035db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035bc:	f7ff f818 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 80035c0:	61b8      	str	r0, [r7, #24]
        break;
 80035c2:	e013      	b.n	80035ec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035c4:	f7ff f828 	bl	8002618 <HAL_RCC_GetPCLK2Freq>
 80035c8:	61b8      	str	r0, [r7, #24]
        break;
 80035ca:	e00f      	b.n	80035ec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035cc:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <UART_SetConfig+0x4c0>)
 80035ce:	61bb      	str	r3, [r7, #24]
        break;
 80035d0:	e00c      	b.n	80035ec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035d2:	f7fe ff4b 	bl	800246c <HAL_RCC_GetSysClockFreq>
 80035d6:	61b8      	str	r0, [r7, #24]
        break;
 80035d8:	e008      	b.n	80035ec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035de:	61bb      	str	r3, [r7, #24]
        break;
 80035e0:	e004      	b.n	80035ec <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	77bb      	strb	r3, [r7, #30]
        break;
 80035ea:	bf00      	nop
    }

    if (pclk != 0U)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d018      	beq.n	8003624 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	085a      	lsrs	r2, r3, #1
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	441a      	add	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	fbb2 f3f3 	udiv	r3, r2, r3
 8003604:	b29b      	uxth	r3, r3
 8003606:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	2b0f      	cmp	r3, #15
 800360c:	d908      	bls.n	8003620 <UART_SetConfig+0x49c>
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003614:	d204      	bcs.n	8003620 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	60da      	str	r2, [r3, #12]
 800361e:	e001      	b.n	8003624 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003630:	7fbb      	ldrb	r3, [r7, #30]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3720      	adds	r7, #32
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40007c00 	.word	0x40007c00
 8003640:	40023800 	.word	0x40023800
 8003644:	00f42400 	.word	0x00f42400

08003648 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003724:	2b00      	cmp	r3, #0
 8003726:	d01a      	beq.n	800375e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003746:	d10a      	bne.n	800375e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	605a      	str	r2, [r3, #4]
  }
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af02      	add	r7, sp, #8
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800379c:	f7fd ffd6 	bl	800174c <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d10e      	bne.n	80037ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f82d 	bl	800381e <UART_WaitOnFlagUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e023      	b.n	8003816 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d10e      	bne.n	80037fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f817 	bl	800381e <UART_WaitOnFlagUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e00d      	b.n	8003816 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2220      	movs	r2, #32
 80037fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2220      	movs	r2, #32
 8003804:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b084      	sub	sp, #16
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	603b      	str	r3, [r7, #0]
 800382a:	4613      	mov	r3, r2
 800382c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800382e:	e05e      	b.n	80038ee <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003836:	d05a      	beq.n	80038ee <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003838:	f7fd ff88 	bl	800174c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	429a      	cmp	r2, r3
 8003846:	d302      	bcc.n	800384e <UART_WaitOnFlagUntilTimeout+0x30>
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d11b      	bne.n	8003886 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800385c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0201 	bic.w	r2, r2, #1
 800386c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2220      	movs	r2, #32
 8003872:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e043      	b.n	800390e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d02c      	beq.n	80038ee <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800389e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a2:	d124      	bne.n	80038ee <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038bc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2220      	movs	r2, #32
 80038d2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2220      	movs	r2, #32
 80038de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e00f      	b.n	800390e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69da      	ldr	r2, [r3, #28]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4013      	ands	r3, r2
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	bf0c      	ite	eq
 80038fe:	2301      	moveq	r3, #1
 8003900:	2300      	movne	r3, #0
 8003902:	b2db      	uxtb	r3, r3
 8003904:	461a      	mov	r2, r3
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	429a      	cmp	r2, r3
 800390a:	d091      	beq.n	8003830 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <__libc_init_array>:
 8003918:	b570      	push	{r4, r5, r6, lr}
 800391a:	4d0d      	ldr	r5, [pc, #52]	; (8003950 <__libc_init_array+0x38>)
 800391c:	4c0d      	ldr	r4, [pc, #52]	; (8003954 <__libc_init_array+0x3c>)
 800391e:	1b64      	subs	r4, r4, r5
 8003920:	10a4      	asrs	r4, r4, #2
 8003922:	2600      	movs	r6, #0
 8003924:	42a6      	cmp	r6, r4
 8003926:	d109      	bne.n	800393c <__libc_init_array+0x24>
 8003928:	4d0b      	ldr	r5, [pc, #44]	; (8003958 <__libc_init_array+0x40>)
 800392a:	4c0c      	ldr	r4, [pc, #48]	; (800395c <__libc_init_array+0x44>)
 800392c:	f000 f840 	bl	80039b0 <_init>
 8003930:	1b64      	subs	r4, r4, r5
 8003932:	10a4      	asrs	r4, r4, #2
 8003934:	2600      	movs	r6, #0
 8003936:	42a6      	cmp	r6, r4
 8003938:	d105      	bne.n	8003946 <__libc_init_array+0x2e>
 800393a:	bd70      	pop	{r4, r5, r6, pc}
 800393c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003940:	4798      	blx	r3
 8003942:	3601      	adds	r6, #1
 8003944:	e7ee      	b.n	8003924 <__libc_init_array+0xc>
 8003946:	f855 3b04 	ldr.w	r3, [r5], #4
 800394a:	4798      	blx	r3
 800394c:	3601      	adds	r6, #1
 800394e:	e7f2      	b.n	8003936 <__libc_init_array+0x1e>
 8003950:	08003c78 	.word	0x08003c78
 8003954:	08003c78 	.word	0x08003c78
 8003958:	08003c78 	.word	0x08003c78
 800395c:	08003c7c 	.word	0x08003c7c

08003960 <memcpy>:
 8003960:	440a      	add	r2, r1
 8003962:	4291      	cmp	r1, r2
 8003964:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003968:	d100      	bne.n	800396c <memcpy+0xc>
 800396a:	4770      	bx	lr
 800396c:	b510      	push	{r4, lr}
 800396e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003972:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003976:	4291      	cmp	r1, r2
 8003978:	d1f9      	bne.n	800396e <memcpy+0xe>
 800397a:	bd10      	pop	{r4, pc}

0800397c <memset>:
 800397c:	4402      	add	r2, r0
 800397e:	4603      	mov	r3, r0
 8003980:	4293      	cmp	r3, r2
 8003982:	d100      	bne.n	8003986 <memset+0xa>
 8003984:	4770      	bx	lr
 8003986:	f803 1b01 	strb.w	r1, [r3], #1
 800398a:	e7f9      	b.n	8003980 <memset+0x4>

0800398c <strncmp>:
 800398c:	b510      	push	{r4, lr}
 800398e:	b16a      	cbz	r2, 80039ac <strncmp+0x20>
 8003990:	3901      	subs	r1, #1
 8003992:	1884      	adds	r4, r0, r2
 8003994:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003998:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800399c:	4293      	cmp	r3, r2
 800399e:	d103      	bne.n	80039a8 <strncmp+0x1c>
 80039a0:	42a0      	cmp	r0, r4
 80039a2:	d001      	beq.n	80039a8 <strncmp+0x1c>
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f5      	bne.n	8003994 <strncmp+0x8>
 80039a8:	1a98      	subs	r0, r3, r2
 80039aa:	bd10      	pop	{r4, pc}
 80039ac:	4610      	mov	r0, r2
 80039ae:	e7fc      	b.n	80039aa <strncmp+0x1e>

080039b0 <_init>:
 80039b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b2:	bf00      	nop
 80039b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039b6:	bc08      	pop	{r3}
 80039b8:	469e      	mov	lr, r3
 80039ba:	4770      	bx	lr

080039bc <_fini>:
 80039bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039be:	bf00      	nop
 80039c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c2:	bc08      	pop	{r3}
 80039c4:	469e      	mov	lr, r3
 80039c6:	4770      	bx	lr
