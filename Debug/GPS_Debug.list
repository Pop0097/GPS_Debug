
GPS_Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bd8  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004dd0  08004dd0  00014dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e18  08004e18  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004e18  08004e18  00014e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e20  08004e20  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e20  08004e20  00014e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e24  08004e24  00014e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000078  08004ea0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08004ea0  00020244  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c21f  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002042  00000000  00000000  0002c2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  0002e308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f0  00000000  00000000  0002ebb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029487  00000000  00000000  0002f3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a9a0  00000000  00000000  00058827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efa9b  00000000  00000000  000631c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00152c62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000269c  00000000  00000000  00152cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000078 	.word	0x20000078
 8000214:	00000000 	.word	0x00000000
 8000218:	08004db8 	.word	0x08004db8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000007c 	.word	0x2000007c
 8000234:	08004db8 	.word	0x08004db8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <_ZN5NEOM811GetInstanceEv>:

extern UART_HandleTypeDef huart4;

NEOM8* NEOM8::gpsInstance = nullptr;

NEOM8* NEOM8::GetInstance() {
 8000530:	b598      	push	{r3, r4, r7, lr}
 8000532:	af00      	add	r7, sp, #0
	if (!gpsInstance) {
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <_ZN5NEOM811GetInstanceEv+0x2c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d10a      	bne.n	8000552 <_ZN5NEOM811GetInstanceEv+0x22>
		gpsInstance = new NEOM8 {};
 800053c:	f44f 607d 	mov.w	r0, #4048	; 0xfd0
 8000540:	f004 faed 	bl	8004b1e <_Znwj>
 8000544:	4603      	mov	r3, r0
 8000546:	461c      	mov	r4, r3
 8000548:	4620      	mov	r0, r4
 800054a:	f000 f819 	bl	8000580 <_ZN5NEOM8C1Ev>
 800054e:	4b03      	ldr	r3, [pc, #12]	; (800055c <_ZN5NEOM811GetInstanceEv+0x2c>)
 8000550:	601c      	str	r4, [r3, #0]
	}

	return gpsInstance;
 8000552:	4b02      	ldr	r3, [pc, #8]	; (800055c <_ZN5NEOM811GetInstanceEv+0x2c>)
 8000554:	681b      	ldr	r3, [r3, #0]
}
 8000556:	4618      	mov	r0, r3
 8000558:	bd98      	pop	{r3, r4, r7, pc}
 800055a:	bf00      	nop
 800055c:	20000094 	.word	0x20000094

08000560 <_ZN3GpsC1Ev>:
	bool ggaDataIsNew; //Position, altitude, time, and number of satellites
	bool vtgDataIsNew; //Groundspeed and Heading

};

class Gps
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <_ZN3GpsC1Ev+0x1c>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4618      	mov	r0, r3
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	08004df4 	.word	0x08004df4

08000580 <_ZN5NEOM8C1Ev>:

NEOM8::NEOM8() : gpsData {},
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
				 configured {false},
				 dataAvailable {false},
				 newData {false} {
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff ffe8 	bl	8000560 <_ZN3GpsC1Ev>
 8000590:	4a14      	ldr	r2, [pc, #80]	; (80005e4 <_ZN5NEOM8C1Ev+0x64>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	f883 2fa4 	strb.w	r2, [r3, #4004]	; 0xfa4
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2200      	movs	r2, #0
 80005a2:	f883 2fa5 	strb.w	r2, [r3, #4005]	; 0xfa5
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2200      	movs	r2, #0
 80005aa:	f883 2fa6 	strb.w	r2, [r3, #4006]	; 0xfa6
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 80005b4:	2228      	movs	r2, #40	; 0x28
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f004 fb27 	bl	8004c0c <memset>
//
//	HAL_UART_Transmit_DMA(&huart4, (uint8_t*) PMTK_API_SET_FIX_CTL_5HZ, sizeof(PMTK_API_SET_FIX_CTL_5HZ));
//
//	HAL_UART_Transmit_DMA(&huart4, (uint8_t*) PMTK_ENABLE_WAAS, sizeof(PMTK_ENABLE_WAAS));

	configured = true;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2201      	movs	r2, #1
 80005c2:	f883 2fa6 	strb.w	r2, [r3, #4006]	; 0xfa6

	HAL_UART_Receive_DMA(&huart4, byte_collection_buffer, GPS_UART_BUFFER_SIZE);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f603 1364 	addw	r3, r3, #2404	; 0x964
 80005cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80005d0:	4619      	mov	r1, r3
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <_ZN5NEOM8C1Ev+0x68>)
 80005d4:	f003 fae4 	bl	8003ba0 <HAL_UART_Receive_DMA>
}
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4618      	mov	r0, r3
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	08004de8 	.word	0x08004de8
 80005e8:	200000dc 	.word	0x200000dc

080005ec <HAL_UART_RxCpltCallback>:

/**
 * Method is called when our uart buffer (byte_collection_buffer) is full
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	NEOM8 * neoM8N = NEOM8::GetInstance();
 80005f4:	f7ff ff9c 	bl	8000530 <_ZN5NEOM811GetInstanceEv>
 80005f8:	60f8      	str	r0, [r7, #12]

	neoM8N->copy_buffer(neoM8N->get_byte_collection_buffer());
 80005fa:	68f8      	ldr	r0, [r7, #12]
 80005fc:	f000 f82c 	bl	8000658 <_ZN5NEOM826get_byte_collection_bufferEv>
 8000600:	4603      	mov	r3, r0
 8000602:	4619      	mov	r1, r3
 8000604:	68f8      	ldr	r0, [r7, #12]
 8000606:	f000 f815 	bl	8000634 <_ZN5NEOM811copy_bufferEPh>
	neoM8N->set_new_data(true);
 800060a:	2101      	movs	r1, #1
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	f000 f830 	bl	8000672 <_ZN5NEOM812set_new_dataEb>

	HAL_UART_Receive_DMA(&huart4, neoM8N->get_byte_collection_buffer(), GPS_UART_BUFFER_SIZE);
 8000612:	68f8      	ldr	r0, [r7, #12]
 8000614:	f000 f820 	bl	8000658 <_ZN5NEOM826get_byte_collection_bufferEv>
 8000618:	4603      	mov	r3, r0
 800061a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800061e:	4619      	mov	r1, r3
 8000620:	4803      	ldr	r0, [pc, #12]	; (8000630 <HAL_UART_RxCpltCallback+0x44>)
 8000622:	f003 fabd 	bl	8003ba0 <HAL_UART_Receive_DMA>
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	200000dc 	.word	0x200000dc

08000634 <_ZN5NEOM811copy_bufferEPh>:

void NEOM8::copy_buffer(uint8_t * buffer) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
	memcpy(parsing_buffer, buffer, GPS_UART_BUFFER_SIZE);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 8000644:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000648:	6839      	ldr	r1, [r7, #0]
 800064a:	4618      	mov	r0, r3
 800064c:	f004 fad0 	bl	8004bf0 <memcpy>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <_ZN5NEOM826get_byte_collection_bufferEv>:

uint8_t* NEOM8::get_byte_collection_buffer() {
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	return byte_collection_buffer;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f603 1364 	addw	r3, r3, #2404	; 0x964
}
 8000666:	4618      	mov	r0, r3
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <_ZN5NEOM812set_new_dataEb>:

void NEOM8::set_new_data(bool val) {
 8000672:	b480      	push	{r7}
 8000674:	b083      	sub	sp, #12
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
 800067a:	460b      	mov	r3, r1
 800067c:	70fb      	strb	r3, [r7, #3]
	newData = val;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	78fa      	ldrb	r2, [r7, #3]
 8000682:	f883 2fa4 	strb.w	r2, [r3, #4004]	; 0xfa4
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <_ZN5NEOM818is_check_sum_validEPh>:


bool NEOM8::is_check_sum_valid(uint8_t* string){
 8000692:	b580      	push	{r7, lr}
 8000694:	b084      	sub	sp, #16
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
    uint16_t i = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	81fb      	strh	r3, [r7, #14]
    uint8_t checksum = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	737b      	strb	r3, [r7, #13]

    while(string[i] != '*'){
 80006a4:	89fb      	ldrh	r3, [r7, #14]
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	4413      	add	r3, r2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b2a      	cmp	r3, #42	; 0x2a
 80006ae:	d00a      	beq.n	80006c6 <_ZN5NEOM818is_check_sum_validEPh+0x34>
        checksum ^= string[i];
 80006b0:	89fb      	ldrh	r3, [r7, #14]
 80006b2:	683a      	ldr	r2, [r7, #0]
 80006b4:	4413      	add	r3, r2
 80006b6:	781a      	ldrb	r2, [r3, #0]
 80006b8:	7b7b      	ldrb	r3, [r7, #13]
 80006ba:	4053      	eors	r3, r2
 80006bc:	737b      	strb	r3, [r7, #13]
        i++;
 80006be:	89fb      	ldrh	r3, [r7, #14]
 80006c0:	3301      	adds	r3, #1
 80006c2:	81fb      	strh	r3, [r7, #14]
    while(string[i] != '*'){
 80006c4:	e7ee      	b.n	80006a4 <_ZN5NEOM818is_check_sum_validEPh+0x12>
    }
    i++;
 80006c6:	89fb      	ldrh	r3, [r7, #14]
 80006c8:	3301      	adds	r3, #1
 80006ca:	81fb      	strh	r3, [r7, #14]

    return uint8_to_hex((checksum & 0xF0) >> 4) == string[i] &&  uint8_to_hex(checksum & 0x0F) == string[i+1];
 80006cc:	7b7b      	ldrb	r3, [r7, #13]
 80006ce:	091b      	lsrs	r3, r3, #4
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	4619      	mov	r1, r3
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 f81f 	bl	8000718 <_ZN5NEOM812uint8_to_hexEj>
 80006da:	4603      	mov	r3, r0
 80006dc:	4619      	mov	r1, r3
 80006de:	89fb      	ldrh	r3, [r7, #14]
 80006e0:	683a      	ldr	r2, [r7, #0]
 80006e2:	4413      	add	r3, r2
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	4299      	cmp	r1, r3
 80006e8:	d111      	bne.n	800070e <_ZN5NEOM818is_check_sum_validEPh+0x7c>
 80006ea:	7b7b      	ldrb	r3, [r7, #13]
 80006ec:	f003 030f 	and.w	r3, r3, #15
 80006f0:	4619      	mov	r1, r3
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f000 f810 	bl	8000718 <_ZN5NEOM812uint8_to_hexEj>
 80006f8:	4603      	mov	r3, r0
 80006fa:	4619      	mov	r1, r3
 80006fc:	89fb      	ldrh	r3, [r7, #14]
 80006fe:	3301      	adds	r3, #1
 8000700:	683a      	ldr	r2, [r7, #0]
 8000702:	4413      	add	r3, r2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4299      	cmp	r1, r3
 8000708:	d101      	bne.n	800070e <_ZN5NEOM818is_check_sum_validEPh+0x7c>
 800070a:	2301      	movs	r3, #1
 800070c:	e000      	b.n	8000710 <_ZN5NEOM818is_check_sum_validEPh+0x7e>
 800070e:	2300      	movs	r3, #0
}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <_ZN5NEOM812uint8_to_hexEj>:

uint8_t NEOM8::uint8_to_hex(unsigned int checkSumHalf) {
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
    uint8_t uint8_tOut = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	73fb      	strb	r3, [r7, #15]

    if (checkSumHalf >= 0 && checkSumHalf <= 9){
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	2b09      	cmp	r3, #9
 800072a:	d804      	bhi.n	8000736 <_ZN5NEOM812uint8_to_hexEj+0x1e>
        uint8_tOut = checkSumHalf + 0x30;
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	3330      	adds	r3, #48	; 0x30
 8000732:	73fb      	strb	r3, [r7, #15]
 8000734:	e009      	b.n	800074a <_ZN5NEOM812uint8_to_hexEj+0x32>
    }
    else if (checkSumHalf >= 0xA && checkSumHalf <= 0xF){
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	2b09      	cmp	r3, #9
 800073a:	d906      	bls.n	800074a <_ZN5NEOM812uint8_to_hexEj+0x32>
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	2b0f      	cmp	r3, #15
 8000740:	d803      	bhi.n	800074a <_ZN5NEOM812uint8_to_hexEj+0x32>
        uint8_tOut = checkSumHalf + 0x37;
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	3337      	adds	r3, #55	; 0x37
 8000748:	73fb      	strb	r3, [r7, #15]
    }
    return uint8_tOut;
 800074a:	7bfb      	ldrb	r3, [r7, #15]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <_ZN5NEOM812ascii_to_hexEh>:

uint8_t NEOM8::ascii_to_hex(uint8_t asciiSymbol) {
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	70fb      	strb	r3, [r7, #3]
    uint8_t hexOut = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	73fb      	strb	r3, [r7, #15]
    if (asciiSymbol == 0x2E)
 8000768:	78fb      	ldrb	r3, [r7, #3]
 800076a:	2b2e      	cmp	r3, #46	; 0x2e
 800076c:	d102      	bne.n	8000774 <_ZN5NEOM812ascii_to_hexEh+0x1c>
        hexOut = 0x10;
 800076e:	2310      	movs	r3, #16
 8000770:	73fb      	strb	r3, [r7, #15]
 8000772:	e012      	b.n	800079a <_ZN5NEOM812ascii_to_hexEh+0x42>
    else if (asciiSymbol >= 0x30 && asciiSymbol <= 0x39){
 8000774:	78fb      	ldrb	r3, [r7, #3]
 8000776:	2b2f      	cmp	r3, #47	; 0x2f
 8000778:	d906      	bls.n	8000788 <_ZN5NEOM812ascii_to_hexEh+0x30>
 800077a:	78fb      	ldrb	r3, [r7, #3]
 800077c:	2b39      	cmp	r3, #57	; 0x39
 800077e:	d803      	bhi.n	8000788 <_ZN5NEOM812ascii_to_hexEh+0x30>
        hexOut = asciiSymbol - 0x30;
 8000780:	78fb      	ldrb	r3, [r7, #3]
 8000782:	3b30      	subs	r3, #48	; 0x30
 8000784:	73fb      	strb	r3, [r7, #15]
 8000786:	e008      	b.n	800079a <_ZN5NEOM812ascii_to_hexEh+0x42>
    }
    else if (asciiSymbol >= 0x41 && asciiSymbol <= 0x46){
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	2b40      	cmp	r3, #64	; 0x40
 800078c:	d905      	bls.n	800079a <_ZN5NEOM812ascii_to_hexEh+0x42>
 800078e:	78fb      	ldrb	r3, [r7, #3]
 8000790:	2b46      	cmp	r3, #70	; 0x46
 8000792:	d802      	bhi.n	800079a <_ZN5NEOM812ascii_to_hexEh+0x42>
        hexOut = asciiSymbol - 0x37; //Letter "F"(ASCII 0x46) becomes 0xF
 8000794:	78fb      	ldrb	r3, [r7, #3]
 8000796:	3b37      	subs	r3, #55	; 0x37
 8000798:	73fb      	strb	r3, [r7, #15]
    }
    return hexOut;
 800079a:	7bfb      	ldrb	r3, [r7, #15]
}
 800079c:	4618      	mov	r0, r3
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <_ZN5NEOM813parse_gpsDataEv>:

void NEOM8::parse_gpsData() {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	static bool currently_parsing = false;
	static uint16_t buffer_index = 0;
	int b = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
	int c = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < GPS_UART_BUFFER_SIZE; i++) {
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80007c2:	f280 8085 	bge.w	80008d0 <_ZN5NEOM813parse_gpsDataEv+0x128>
		if (parsing_buffer[i] == '$') { //Beginning of Packet
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	4413      	add	r3, r2
 80007cc:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b24      	cmp	r3, #36	; 0x24
 80007d4:	d106      	bne.n	80007e4 <_ZN5NEOM813parse_gpsDataEv+0x3c>
			currently_parsing = true;
 80007d6:	4b7d      	ldr	r3, [pc, #500]	; (80009cc <_ZN5NEOM813parse_gpsDataEv+0x224>)
 80007d8:	2201      	movs	r2, #1
 80007da:	701a      	strb	r2, [r3, #0]
			buffer_index = 0;
 80007dc:	4b7c      	ldr	r3, [pc, #496]	; (80009d0 <_ZN5NEOM813parse_gpsDataEv+0x228>)
 80007de:	2200      	movs	r2, #0
 80007e0:	801a      	strh	r2, [r3, #0]
 80007e2:	e071      	b.n	80008c8 <_ZN5NEOM813parse_gpsDataEv+0x120>
		} else if (parsing_buffer[i] == '\r') { //End of Packet
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	4413      	add	r3, r2
 80007ea:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b0d      	cmp	r3, #13
 80007f2:	d147      	bne.n	8000884 <_ZN5NEOM813parse_gpsDataEv+0xdc>
			 if (strncmp((char*) GPS_GGA_MESSAGE, (char*) uart_buffer, 5) == 0){
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f203 6344 	addw	r3, r3, #1604	; 0x644
 80007fa:	2205      	movs	r2, #5
 80007fc:	4619      	mov	r1, r3
 80007fe:	4875      	ldr	r0, [pc, #468]	; (80009d4 <_ZN5NEOM813parse_gpsDataEv+0x22c>)
 8000800:	f004 faba 	bl	8004d78 <strncmp>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d111      	bne.n	800082e <_ZN5NEOM813parse_gpsDataEv+0x86>
				memcpy(gga_buffer, uart_buffer, GPS_UART_BUFFER_SIZE);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	1d18      	adds	r0, r3, #4
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f203 6344 	addw	r3, r3, #1604	; 0x644
 8000814:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000818:	4619      	mov	r1, r3
 800081a:	f004 f9e9 	bl	8004bf0 <memcpy>
				gpsData.ggaDataIsNew = true;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2201      	movs	r2, #1
 8000822:	f883 2fcb 	strb.w	r2, [r3, #4043]	; 0xfcb
				b += 10;
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	330a      	adds	r3, #10
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	e01c      	b.n	8000868 <_ZN5NEOM813parse_gpsDataEv+0xc0>
			 } else if (strncmp((char*) GPS_VTG_MESSAGE, (char*) uart_buffer, 5) == 0){
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f203 6344 	addw	r3, r3, #1604	; 0x644
 8000834:	2205      	movs	r2, #5
 8000836:	4619      	mov	r1, r3
 8000838:	4867      	ldr	r0, [pc, #412]	; (80009d8 <_ZN5NEOM813parse_gpsDataEv+0x230>)
 800083a:	f004 fa9d 	bl	8004d78 <strncmp>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d111      	bne.n	8000868 <_ZN5NEOM813parse_gpsDataEv+0xc0>
				memcpy(vtg_buffer, uart_buffer, GPS_UART_BUFFER_SIZE);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f503 7049 	add.w	r0, r3, #804	; 0x324
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f203 6344 	addw	r3, r3, #1604	; 0x644
 8000850:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000854:	4619      	mov	r1, r3
 8000856:	f004 f9cb 	bl	8004bf0 <memcpy>
				gpsData.vtgDataIsNew = true;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2201      	movs	r2, #1
 800085e:	f883 2fcc 	strb.w	r2, [r3, #4044]	; 0xfcc
				c += 20;
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	3314      	adds	r3, #20
 8000866:	613b      	str	r3, [r7, #16]
			 }
			 currently_parsing = false;
 8000868:	4b58      	ldr	r3, [pc, #352]	; (80009cc <_ZN5NEOM813parse_gpsDataEv+0x224>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]

			 // Exit if we find both of the messages to not waste time on computation
			 if (gpsData.ggaDataIsNew && gpsData.vtgDataIsNew) {
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f893 3fcb 	ldrb.w	r3, [r3, #4043]	; 0xfcb
 8000874:	2b00      	cmp	r3, #0
 8000876:	d027      	beq.n	80008c8 <_ZN5NEOM813parse_gpsDataEv+0x120>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f893 3fcc 	ldrb.w	r3, [r3, #4044]	; 0xfcc
 800087e:	2b00      	cmp	r3, #0
 8000880:	d022      	beq.n	80008c8 <_ZN5NEOM813parse_gpsDataEv+0x120>
				 break;
 8000882:	e025      	b.n	80008d0 <_ZN5NEOM813parse_gpsDataEv+0x128>
			 }
		} else if (currently_parsing){
 8000884:	4b51      	ldr	r3, [pc, #324]	; (80009cc <_ZN5NEOM813parse_gpsDataEv+0x224>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d01d      	beq.n	80008c8 <_ZN5NEOM813parse_gpsDataEv+0x120>
			uart_buffer[buffer_index] = parsing_buffer[i];
 800088c:	4b50      	ldr	r3, [pc, #320]	; (80009d0 <_ZN5NEOM813parse_gpsDataEv+0x228>)
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	4619      	mov	r1, r3
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	4413      	add	r3, r2
 8000898:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 800089c:	781a      	ldrb	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	440b      	add	r3, r1
 80008a2:	f883 2644 	strb.w	r2, [r3, #1604]	; 0x644
			buffer_index = (buffer_index + 1) % GPS_UART_BUFFER_SIZE; //make sure we dont cause a segmentation fault here
 80008a6:	4b4a      	ldr	r3, [pc, #296]	; (80009d0 <_ZN5NEOM813parse_gpsDataEv+0x228>)
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	3301      	adds	r3, #1
 80008ac:	4a4b      	ldr	r2, [pc, #300]	; (80009dc <_ZN5NEOM813parse_gpsDataEv+0x234>)
 80008ae:	fb82 1203 	smull	r1, r2, r2, r3
 80008b2:	1211      	asrs	r1, r2, #8
 80008b4:	17da      	asrs	r2, r3, #31
 80008b6:	1a8a      	subs	r2, r1, r2
 80008b8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80008bc:	fb01 f202 	mul.w	r2, r1, r2
 80008c0:	1a9a      	subs	r2, r3, r2
 80008c2:	b292      	uxth	r2, r2
 80008c4:	4b42      	ldr	r3, [pc, #264]	; (80009d0 <_ZN5NEOM813parse_gpsDataEv+0x228>)
 80008c6:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < GPS_UART_BUFFER_SIZE; i++) {
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	3301      	adds	r3, #1
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	e775      	b.n	80007bc <_ZN5NEOM813parse_gpsDataEv+0x14>
		}
	}

	if (!gpsData.ggaDataIsNew && !gpsData.vtgDataIsNew){ //if no data has been copied over
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f893 3fcb 	ldrb.w	r3, [r3, #4043]	; 0xfcb
 80008d6:	f083 0301 	eor.w	r3, r3, #1
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d007      	beq.n	80008f0 <_ZN5NEOM813parse_gpsDataEv+0x148>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f893 3fcc 	ldrb.w	r3, [r3, #4044]	; 0xfcc
 80008e6:	f083 0301 	eor.w	r3, r3, #1
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d168      	bne.n	80009c2 <_ZN5NEOM813parse_gpsDataEv+0x21a>
		return;
	}

	if (gpsData.ggaDataIsNew){
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f893 3fcb 	ldrb.w	r3, [r3, #4043]	; 0xfcb
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d02f      	beq.n	800095a <_ZN5NEOM813parse_gpsDataEv+0x1b2>
		gpsData.ggaDataIsNew = false;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2fcb 	strb.w	r2, [r3, #4043]	; 0xfcb
		if (is_check_sum_valid(gga_buffer)){
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3304      	adds	r3, #4
 8000906:	4619      	mov	r1, r3
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff fec2 	bl	8000692 <_ZN5NEOM818is_check_sum_validEPh>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d01e      	beq.n	8000952 <_ZN5NEOM813parse_gpsDataEv+0x1aa>
			dataAvailable = false;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	f883 2fa5 	strb.w	r2, [r3, #4005]	; 0xfa5
			parse_gga(gga_buffer);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3304      	adds	r3, #4
 8000920:	4619      	mov	r1, r3
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f000 f974 	bl	8000c10 <_ZN5NEOM89parse_ggaEPh>
			dataAvailable = true;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2201      	movs	r2, #1
 800092c:	f883 2fa5 	strb.w	r2, [r3, #4005]	; 0xfa5
			gpsData.dataIsNew = true;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2201      	movs	r2, #1
 8000934:	f883 2fc9 	strb.w	r2, [r3, #4041]	; 0xfc9
			gpsData.timeIsNew = true;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2201      	movs	r2, #1
 800093c:	f883 2fca 	strb.w	r2, [r3, #4042]	; 0xfca
			gpsData.ggaDataIsNew = true;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2201      	movs	r2, #1
 8000944:	f883 2fcb 	strb.w	r2, [r3, #4043]	; 0xfcb
			gpsData.sensorStatus = 0;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2fc8 	strb.w	r2, [r3, #4040]	; 0xfc8
 8000950:	e003      	b.n	800095a <_ZN5NEOM813parse_gpsDataEv+0x1b2>
		} else {
			gpsData.sensorStatus = 1;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2201      	movs	r2, #1
 8000956:	f883 2fc8 	strb.w	r2, [r3, #4040]	; 0xfc8
		}
	}

	if (gpsData.vtgDataIsNew){
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f893 3fcc 	ldrb.w	r3, [r3, #4044]	; 0xfcc
 8000960:	2b00      	cmp	r3, #0
 8000962:	d02f      	beq.n	80009c4 <_ZN5NEOM813parse_gpsDataEv+0x21c>
		gpsData.vtgDataIsNew = false;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	f883 2fcc 	strb.w	r2, [r3, #4044]	; 0xfcc
		if (is_check_sum_valid(vtg_buffer)){
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8000972:	4619      	mov	r1, r3
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff fe8c 	bl	8000692 <_ZN5NEOM818is_check_sum_validEPh>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d01b      	beq.n	80009b8 <_ZN5NEOM813parse_gpsDataEv+0x210>
			dataAvailable = false;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	f883 2fa5 	strb.w	r2, [r3, #4005]	; 0xfa5
			parse_vtg(vtg_buffer);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800098e:	4619      	mov	r1, r3
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 f825 	bl	80009e0 <_ZN5NEOM89parse_vtgEPh>
			dataAvailable = true;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2201      	movs	r2, #1
 800099a:	f883 2fa5 	strb.w	r2, [r3, #4005]	; 0xfa5
			gpsData.dataIsNew = true;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2201      	movs	r2, #1
 80009a2:	f883 2fc9 	strb.w	r2, [r3, #4041]	; 0xfc9
			gpsData.vtgDataIsNew = true;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2201      	movs	r2, #1
 80009aa:	f883 2fcc 	strb.w	r2, [r3, #4044]	; 0xfcc
			gpsData.sensorStatus = 0;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2fc8 	strb.w	r2, [r3, #4040]	; 0xfc8
 80009b6:	e005      	b.n	80009c4 <_ZN5NEOM813parse_gpsDataEv+0x21c>
		} else {
			gpsData.sensorStatus = 1;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2201      	movs	r2, #1
 80009bc:	f883 2fc8 	strb.w	r2, [r3, #4040]	; 0xfc8
 80009c0:	e000      	b.n	80009c4 <_ZN5NEOM813parse_gpsDataEv+0x21c>
		return;
 80009c2:	bf00      	nop
		}
	}
}
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000098 	.word	0x20000098
 80009d0:	2000009a 	.word	0x2000009a
 80009d4:	08004dd0 	.word	0x08004dd0
 80009d8:	08004dd8 	.word	0x08004dd8
 80009dc:	51eb851f 	.word	0x51eb851f

080009e0 <_ZN5NEOM89parse_vtgEPh>:

void NEOM8::parse_vtg(uint8_t* data) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
	//static so that we dont allocate these variables every time
	static uint8_t rawHeading[6] = {0, 0, 0, 0, 0, 0};
	static uint8_t rawGroundSpeed[8] = {0, 0, 0, 0, 0, 0, 0, 0};

	int comma = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
	int j = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]

	while (data[j] != '*') {
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	683a      	ldr	r2, [r7, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b2a      	cmp	r3, #42	; 0x2a
 8000a00:	d032      	beq.n	8000a68 <_ZN5NEOM89parse_vtgEPh+0x88>
		uint8_t numData = ascii_to_hex(data[j]);
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff fea3 	bl	8000758 <_ZN5NEOM812ascii_to_hexEh>
 8000a12:	4603      	mov	r3, r0
 8000a14:	73fb      	strb	r3, [r7, #15]
		if (data[j] == ',') {
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b2c      	cmp	r3, #44	; 0x2c
 8000a20:	d104      	bne.n	8000a2c <_ZN5NEOM89parse_vtgEPh+0x4c>
			comma++;
 8000a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a24:	3301      	adds	r3, #1
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
			i = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
		}

		if (comma == 1 && (i != 0)) {
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d108      	bne.n	8000a44 <_ZN5NEOM89parse_vtgEPh+0x64>
 8000a32:	6a3b      	ldr	r3, [r7, #32]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d005      	beq.n	8000a44 <_ZN5NEOM89parse_vtgEPh+0x64>
			rawHeading[i] = numData;
 8000a38:	4a6f      	ldr	r2, [pc, #444]	; (8000bf8 <_ZN5NEOM89parse_vtgEPh+0x218>)
 8000a3a:	6a3b      	ldr	r3, [r7, #32]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	7bfa      	ldrb	r2, [r7, #15]
 8000a40:	701a      	strb	r2, [r3, #0]
 8000a42:	e00a      	b.n	8000a5a <_ZN5NEOM89parse_vtgEPh+0x7a>
		} else if (comma == 7 && (i != 0)) {
 8000a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a46:	2b07      	cmp	r3, #7
 8000a48:	d107      	bne.n	8000a5a <_ZN5NEOM89parse_vtgEPh+0x7a>
 8000a4a:	6a3b      	ldr	r3, [r7, #32]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d004      	beq.n	8000a5a <_ZN5NEOM89parse_vtgEPh+0x7a>
			rawGroundSpeed[i] = numData;
 8000a50:	4a6a      	ldr	r2, [pc, #424]	; (8000bfc <_ZN5NEOM89parse_vtgEPh+0x21c>)
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	4413      	add	r3, r2
 8000a56:	7bfa      	ldrb	r2, [r7, #15]
 8000a58:	701a      	strb	r2, [r3, #0]
		}

		i++;
 8000a5a:	6a3b      	ldr	r3, [r7, #32]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
		j++;
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	3301      	adds	r3, #1
 8000a64:	61fb      	str	r3, [r7, #28]
	while (data[j] != '*') {
 8000a66:	e7c6      	b.n	80009f6 <_ZN5NEOM89parse_vtgEPh+0x16>
	}

	i = 1;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	623b      	str	r3, [r7, #32]
	long int multiplier = 10;
 8000a6c:	230a      	movs	r3, #10
 8000a6e:	61bb      	str	r3, [r7, #24]
	int decimalPoint = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]

	gpsData.heading = 0;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2200      	movs	r2, #0
 8000a78:	f8a3 2fc4 	strh.w	r2, [r3, #4036]	; 0xfc4
	float tHeading = 0;
 8000a7c:	f04f 0300 	mov.w	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
	for (i = 1; i < 6; i++) //this code first generates an 5 digit decimal number
 8000a82:	2301      	movs	r3, #1
 8000a84:	623b      	str	r3, [r7, #32]
 8000a86:	6a3b      	ldr	r3, [r7, #32]
 8000a88:	2b05      	cmp	r3, #5
 8000a8a:	dc27      	bgt.n	8000adc <_ZN5NEOM89parse_vtgEPh+0xfc>
	{
		if (rawHeading[i] == 0x10)//check for decimal point
 8000a8c:	4a5a      	ldr	r2, [pc, #360]	; (8000bf8 <_ZN5NEOM89parse_vtgEPh+0x218>)
 8000a8e:	6a3b      	ldr	r3, [r7, #32]
 8000a90:	4413      	add	r3, r2
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b10      	cmp	r3, #16
 8000a96:	d102      	bne.n	8000a9e <_ZN5NEOM89parse_vtgEPh+0xbe>
		{
			decimalPoint = i;
 8000a98:	6a3b      	ldr	r3, [r7, #32]
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	e01a      	b.n	8000ad4 <_ZN5NEOM89parse_vtgEPh+0xf4>
		} else {
			tHeading += (float) (rawHeading[i]*100000 / multiplier);
 8000a9e:	4a56      	ldr	r2, [pc, #344]	; (8000bf8 <_ZN5NEOM89parse_vtgEPh+0x218>)
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4b55      	ldr	r3, [pc, #340]	; (8000c00 <_ZN5NEOM89parse_vtgEPh+0x220>)
 8000aaa:	fb03 f202 	mul.w	r2, r3, r2
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ab4:	ee07 3a90 	vmov	s15, r3
 8000ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000abc:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ac4:	edc7 7a04 	vstr	s15, [r7, #16]
			multiplier *= 10;
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	4613      	mov	r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4413      	add	r3, r2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	61bb      	str	r3, [r7, #24]
	for (i = 1; i < 6; i++) //this code first generates an 5 digit decimal number
 8000ad4:	6a3b      	ldr	r3, [r7, #32]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	623b      	str	r3, [r7, #32]
 8000ada:	e7d4      	b.n	8000a86 <_ZN5NEOM89parse_vtgEPh+0xa6>
		}
	}
	decimalPoint = decimalPoint - 2;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	3b02      	subs	r3, #2
 8000ae0:	617b      	str	r3, [r7, #20]
	multiplier = 10000;
 8000ae2:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ae6:	61bb      	str	r3, [r7, #24]
	while (decimalPoint > 0) //then divdes it according to the placement of the decimal
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	dd0b      	ble.n	8000b06 <_ZN5NEOM89parse_vtgEPh+0x126>
	{
		multiplier = multiplier / 10;
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	4a44      	ldr	r2, [pc, #272]	; (8000c04 <_ZN5NEOM89parse_vtgEPh+0x224>)
 8000af2:	fb82 1203 	smull	r1, r2, r2, r3
 8000af6:	1092      	asrs	r2, r2, #2
 8000af8:	17db      	asrs	r3, r3, #31
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	61bb      	str	r3, [r7, #24]
		decimalPoint--;
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	617b      	str	r3, [r7, #20]
	while (decimalPoint > 0) //then divdes it according to the placement of the decimal
 8000b04:	e7f0      	b.n	8000ae8 <_ZN5NEOM89parse_vtgEPh+0x108>
	}
	gpsData.heading = (int)(tHeading / multiplier);
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	ee07 3a90 	vmov	s15, r3
 8000b0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b10:	edd7 6a04 	vldr	s13, [r7, #16]
 8000b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b1c:	ee17 3a90 	vmov	r3, s15
 8000b20:	b21a      	sxth	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f8a3 2fc4 	strh.w	r2, [r3, #4036]	; 0xfc4

	//	//calculate speed - tricky because of unknown 1-3 digits preceeding the decimal
	i = 1;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	623b      	str	r3, [r7, #32]
	multiplier = 10;
 8000b2c:	230a      	movs	r3, #10
 8000b2e:	61bb      	str	r3, [r7, #24]
	decimalPoint = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
	gpsData.groundSpeed = 0;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f603 73bc 	addw	r3, r3, #4028	; 0xfbc
 8000b3a:	f04f 0200 	mov.w	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
	for (i = 1; i < 7; i++) //this code first generates an 6 digit decimal number
 8000b40:	2301      	movs	r3, #1
 8000b42:	623b      	str	r3, [r7, #32]
 8000b44:	6a3b      	ldr	r3, [r7, #32]
 8000b46:	2b06      	cmp	r3, #6
 8000b48:	dc2d      	bgt.n	8000ba6 <_ZN5NEOM89parse_vtgEPh+0x1c6>
	{
		if (rawGroundSpeed[i] == 0x10)//check for decimal point
 8000b4a:	4a2c      	ldr	r2, [pc, #176]	; (8000bfc <_ZN5NEOM89parse_vtgEPh+0x21c>)
 8000b4c:	6a3b      	ldr	r3, [r7, #32]
 8000b4e:	4413      	add	r3, r2
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b10      	cmp	r3, #16
 8000b54:	d102      	bne.n	8000b5c <_ZN5NEOM89parse_vtgEPh+0x17c>
		{
			decimalPoint = i;
 8000b56:	6a3b      	ldr	r3, [r7, #32]
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	e020      	b.n	8000b9e <_ZN5NEOM89parse_vtgEPh+0x1be>
		} else {
			gpsData.groundSpeed += (float) (rawGroundSpeed[i]*1000000 / multiplier);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f603 73bc 	addw	r3, r3, #4028	; 0xfbc
 8000b62:	ed93 7a00 	vldr	s14, [r3]
 8000b66:	4a25      	ldr	r2, [pc, #148]	; (8000bfc <_ZN5NEOM89parse_vtgEPh+0x21c>)
 8000b68:	6a3b      	ldr	r3, [r7, #32]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <_ZN5NEOM89parse_vtgEPh+0x228>)
 8000b72:	fb03 f202 	mul.w	r2, r3, r2
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b7c:	ee07 3a90 	vmov	s15, r3
 8000b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f603 73bc 	addw	r3, r3, #4028	; 0xfbc
 8000b8e:	edc3 7a00 	vstr	s15, [r3]
			multiplier = multiplier * 10;
 8000b92:	69ba      	ldr	r2, [r7, #24]
 8000b94:	4613      	mov	r3, r2
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	4413      	add	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	61bb      	str	r3, [r7, #24]
	for (i = 1; i < 7; i++) //this code first generates an 6 digit decimal number
 8000b9e:	6a3b      	ldr	r3, [r7, #32]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	623b      	str	r3, [r7, #32]
 8000ba4:	e7ce      	b.n	8000b44 <_ZN5NEOM89parse_vtgEPh+0x164>
		}
	}
	decimalPoint = decimalPoint - 2;
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3b02      	subs	r3, #2
 8000baa:	617b      	str	r3, [r7, #20]
	multiplier = 100000;
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <_ZN5NEOM89parse_vtgEPh+0x220>)
 8000bae:	61bb      	str	r3, [r7, #24]
	while (decimalPoint > 0) //then divdes it according to the placement of the decimal
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	dd0b      	ble.n	8000bce <_ZN5NEOM89parse_vtgEPh+0x1ee>
	{
		multiplier = multiplier / 10;
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <_ZN5NEOM89parse_vtgEPh+0x224>)
 8000bba:	fb82 1203 	smull	r1, r2, r2, r3
 8000bbe:	1092      	asrs	r2, r2, #2
 8000bc0:	17db      	asrs	r3, r3, #31
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	61bb      	str	r3, [r7, #24]
		decimalPoint--;
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
	while (decimalPoint > 0) //then divdes it according to the placement of the decimal
 8000bcc:	e7f0      	b.n	8000bb0 <_ZN5NEOM89parse_vtgEPh+0x1d0>
	}
	gpsData.groundSpeed = gpsData.groundSpeed / multiplier;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f603 73bc 	addw	r3, r3, #4028	; 0xfbc
 8000bd4:	edd3 6a00 	vldr	s13, [r3]
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	ee07 3a90 	vmov	s15, r3
 8000bde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000be2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f603 73bc 	addw	r3, r3, #4028	; 0xfbc
 8000bec:	edc3 7a00 	vstr	s15, [r3]
}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	; 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000009c 	.word	0x2000009c
 8000bfc:	200000a4 	.word	0x200000a4
 8000c00:	000186a0 	.word	0x000186a0
 8000c04:	66666667 	.word	0x66666667
 8000c08:	000f4240 	.word	0x000f4240
 8000c0c:	00000000 	.word	0x00000000

08000c10 <_ZN5NEOM89parse_ggaEPh>:

void NEOM8::parse_gga(uint8_t* data) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
	int comma = 0; //comma counting so that we know what header we're parsing for
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0; //index for the current position of the field value
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
	int j = 0; //7th uint8_tacter is where data will start. index for the byte index in the counter
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
	static uint8_t rawAltitude[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	static uint8_t latitudeNS = 0;
	static uint8_t longitudeEW = 0;
	static uint8_t positionFix = 0;

	while (data[j] != '*') {
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b2a      	cmp	r3, #42	; 0x2a
 8000c30:	f000 808c 	beq.w	8000d4c <_ZN5NEOM89parse_ggaEPh+0x13c>
		uint8_t numData = ascii_to_hex(data[j]);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	4413      	add	r3, r2
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff fd8a 	bl	8000758 <_ZN5NEOM812ascii_to_hexEh>
 8000c44:	4603      	mov	r3, r0
 8000c46:	73fb      	strb	r3, [r7, #15]

		if (data[j] == ',') {
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b2c      	cmp	r3, #44	; 0x2c
 8000c52:	d104      	bne.n	8000c5e <_ZN5NEOM89parse_ggaEPh+0x4e>
			comma++;
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c56:	3301      	adds	r3, #1
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
			i = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
		}

		if ((comma == 1) && (i != 0)) {
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d108      	bne.n	8000c76 <_ZN5NEOM89parse_ggaEPh+0x66>
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d005      	beq.n	8000c76 <_ZN5NEOM89parse_ggaEPh+0x66>
			rawTime[i] = numData;
 8000c6a:	4a30      	ldr	r2, [pc, #192]	; (8000d2c <_ZN5NEOM89parse_ggaEPh+0x11c>)
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
 8000c6e:	4413      	add	r3, r2
 8000c70:	7bfa      	ldrb	r2, [r7, #15]
 8000c72:	701a      	strb	r2, [r3, #0]
 8000c74:	e052      	b.n	8000d1c <_ZN5NEOM89parse_ggaEPh+0x10c>
		} else if ((comma == 2) && (i != 0)) {
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d108      	bne.n	8000c8e <_ZN5NEOM89parse_ggaEPh+0x7e>
 8000c7c:	6a3b      	ldr	r3, [r7, #32]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d005      	beq.n	8000c8e <_ZN5NEOM89parse_ggaEPh+0x7e>
			rawLatitude[i] = numData;
 8000c82:	4a2b      	ldr	r2, [pc, #172]	; (8000d30 <_ZN5NEOM89parse_ggaEPh+0x120>)
 8000c84:	6a3b      	ldr	r3, [r7, #32]
 8000c86:	4413      	add	r3, r2
 8000c88:	7bfa      	ldrb	r2, [r7, #15]
 8000c8a:	701a      	strb	r2, [r3, #0]
 8000c8c:	e046      	b.n	8000d1c <_ZN5NEOM89parse_ggaEPh+0x10c>

		} else if ((comma == 3) && (i != 0)) {
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d109      	bne.n	8000ca8 <_ZN5NEOM89parse_ggaEPh+0x98>
 8000c94:	6a3b      	ldr	r3, [r7, #32]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d006      	beq.n	8000ca8 <_ZN5NEOM89parse_ggaEPh+0x98>
			latitudeNS = data[j];
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	781a      	ldrb	r2, [r3, #0]
 8000ca2:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <_ZN5NEOM89parse_ggaEPh+0x124>)
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	e039      	b.n	8000d1c <_ZN5NEOM89parse_ggaEPh+0x10c>

		} else if ((comma == 4) && (i != 0)) {
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	d108      	bne.n	8000cc0 <_ZN5NEOM89parse_ggaEPh+0xb0>
 8000cae:	6a3b      	ldr	r3, [r7, #32]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d005      	beq.n	8000cc0 <_ZN5NEOM89parse_ggaEPh+0xb0>
			rawLongitude[i] = numData;
 8000cb4:	4a20      	ldr	r2, [pc, #128]	; (8000d38 <_ZN5NEOM89parse_ggaEPh+0x128>)
 8000cb6:	6a3b      	ldr	r3, [r7, #32]
 8000cb8:	4413      	add	r3, r2
 8000cba:	7bfa      	ldrb	r2, [r7, #15]
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	e02d      	b.n	8000d1c <_ZN5NEOM89parse_ggaEPh+0x10c>

		} else if ((comma == 5) && (i != 0)) {
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	2b05      	cmp	r3, #5
 8000cc4:	d109      	bne.n	8000cda <_ZN5NEOM89parse_ggaEPh+0xca>
 8000cc6:	6a3b      	ldr	r3, [r7, #32]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d006      	beq.n	8000cda <_ZN5NEOM89parse_ggaEPh+0xca>
			longitudeEW = data[j];
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	781a      	ldrb	r2, [r3, #0]
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <_ZN5NEOM89parse_ggaEPh+0x12c>)
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	e020      	b.n	8000d1c <_ZN5NEOM89parse_ggaEPh+0x10c>

		} else if ((comma == 6) && (i != 0)) {
 8000cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cdc:	2b06      	cmp	r3, #6
 8000cde:	d106      	bne.n	8000cee <_ZN5NEOM89parse_ggaEPh+0xde>
 8000ce0:	6a3b      	ldr	r3, [r7, #32]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <_ZN5NEOM89parse_ggaEPh+0xde>
			positionFix = numData;
 8000ce6:	4a16      	ldr	r2, [pc, #88]	; (8000d40 <_ZN5NEOM89parse_ggaEPh+0x130>)
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	7013      	strb	r3, [r2, #0]
 8000cec:	e016      	b.n	8000d1c <_ZN5NEOM89parse_ggaEPh+0x10c>

		} else if ((comma == 7) && (i != 0)) {
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	2b07      	cmp	r3, #7
 8000cf2:	d108      	bne.n	8000d06 <_ZN5NEOM89parse_ggaEPh+0xf6>
 8000cf4:	6a3b      	ldr	r3, [r7, #32]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d005      	beq.n	8000d06 <_ZN5NEOM89parse_ggaEPh+0xf6>
			rawSatellites[i] = numData;
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <_ZN5NEOM89parse_ggaEPh+0x134>)
 8000cfc:	6a3b      	ldr	r3, [r7, #32]
 8000cfe:	4413      	add	r3, r2
 8000d00:	7bfa      	ldrb	r2, [r7, #15]
 8000d02:	701a      	strb	r2, [r3, #0]
 8000d04:	e00a      	b.n	8000d1c <_ZN5NEOM89parse_ggaEPh+0x10c>
		} else  if ((comma == 9) && (i != 0)) {
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	2b09      	cmp	r3, #9
 8000d0a:	d107      	bne.n	8000d1c <_ZN5NEOM89parse_ggaEPh+0x10c>
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d004      	beq.n	8000d1c <_ZN5NEOM89parse_ggaEPh+0x10c>
			rawAltitude[i] = numData;
 8000d12:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <_ZN5NEOM89parse_ggaEPh+0x138>)
 8000d14:	6a3b      	ldr	r3, [r7, #32]
 8000d16:	4413      	add	r3, r2
 8000d18:	7bfa      	ldrb	r2, [r7, #15]
 8000d1a:	701a      	strb	r2, [r3, #0]
		}

		i++;
 8000d1c:	6a3b      	ldr	r3, [r7, #32]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	623b      	str	r3, [r7, #32]
		j++;
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3301      	adds	r3, #1
 8000d26:	61fb      	str	r3, [r7, #28]
	while (data[j] != '*') {
 8000d28:	e77d      	b.n	8000c26 <_ZN5NEOM89parse_ggaEPh+0x16>
 8000d2a:	bf00      	nop
 8000d2c:	200000ac 	.word	0x200000ac
 8000d30:	200000b8 	.word	0x200000b8
 8000d34:	200000d8 	.word	0x200000d8
 8000d38:	200000c4 	.word	0x200000c4
 8000d3c:	200000d9 	.word	0x200000d9
 8000d40:	200000da 	.word	0x200000da
 8000d44:	20000000 	.word	0x20000000
 8000d48:	200000d0 	.word	0x200000d0
	}

	//now we've got all the valid data placed in our buffers. Modify gps data struct to match

	//calculate time
	gpsData.utcTime = (float) rawTime[1] * 100000;
 8000d4c:	4bd6      	ldr	r3, [pc, #856]	; (80010a8 <_ZN5NEOM89parse_ggaEPh+0x498>)
 8000d4e:	785b      	ldrb	r3, [r3, #1]
 8000d50:	ee07 3a90 	vmov	s15, r3
 8000d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d58:	ed9f 7ad4 	vldr	s14, [pc, #848]	; 80010ac <_ZN5NEOM89parse_ggaEPh+0x49c>
 8000d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f603 73b8 	addw	r3, r3, #4024	; 0xfb8
 8000d66:	edc3 7a00 	vstr	s15, [r3]
	gpsData.utcTime += (float) rawTime[2] * 10000;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f603 73b8 	addw	r3, r3, #4024	; 0xfb8
 8000d70:	ed93 7a00 	vldr	s14, [r3]
 8000d74:	4bcc      	ldr	r3, [pc, #816]	; (80010a8 <_ZN5NEOM89parse_ggaEPh+0x498>)
 8000d76:	789b      	ldrb	r3, [r3, #2]
 8000d78:	ee07 3a90 	vmov	s15, r3
 8000d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d80:	eddf 6acb 	vldr	s13, [pc, #812]	; 80010b0 <_ZN5NEOM89parse_ggaEPh+0x4a0>
 8000d84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f603 73b8 	addw	r3, r3, #4024	; 0xfb8
 8000d92:	edc3 7a00 	vstr	s15, [r3]
	gpsData.utcTime += (float) rawTime[3] * 1000;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f603 73b8 	addw	r3, r3, #4024	; 0xfb8
 8000d9c:	ed93 7a00 	vldr	s14, [r3]
 8000da0:	4bc1      	ldr	r3, [pc, #772]	; (80010a8 <_ZN5NEOM89parse_ggaEPh+0x498>)
 8000da2:	78db      	ldrb	r3, [r3, #3]
 8000da4:	ee07 3a90 	vmov	s15, r3
 8000da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dac:	eddf 6ac1 	vldr	s13, [pc, #772]	; 80010b4 <_ZN5NEOM89parse_ggaEPh+0x4a4>
 8000db0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f603 73b8 	addw	r3, r3, #4024	; 0xfb8
 8000dbe:	edc3 7a00 	vstr	s15, [r3]
	gpsData.utcTime += (float) rawTime[4] * 100;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f603 73b8 	addw	r3, r3, #4024	; 0xfb8
 8000dc8:	ed93 7a00 	vldr	s14, [r3]
 8000dcc:	4bb6      	ldr	r3, [pc, #728]	; (80010a8 <_ZN5NEOM89parse_ggaEPh+0x498>)
 8000dce:	791b      	ldrb	r3, [r3, #4]
 8000dd0:	ee07 3a90 	vmov	s15, r3
 8000dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dd8:	eddf 6ab7 	vldr	s13, [pc, #732]	; 80010b8 <_ZN5NEOM89parse_ggaEPh+0x4a8>
 8000ddc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f603 73b8 	addw	r3, r3, #4024	; 0xfb8
 8000dea:	edc3 7a00 	vstr	s15, [r3]
	gpsData.utcTime += (float) rawTime[5] * 10;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f603 73b8 	addw	r3, r3, #4024	; 0xfb8
 8000df4:	ed93 7a00 	vldr	s14, [r3]
 8000df8:	4bab      	ldr	r3, [pc, #684]	; (80010a8 <_ZN5NEOM89parse_ggaEPh+0x498>)
 8000dfa:	795b      	ldrb	r3, [r3, #5]
 8000dfc:	ee07 3a90 	vmov	s15, r3
 8000e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e04:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000e08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f603 73b8 	addw	r3, r3, #4024	; 0xfb8
 8000e16:	edc3 7a00 	vstr	s15, [r3]
	gpsData.utcTime += (float) rawTime[6] * 1;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f603 73b8 	addw	r3, r3, #4024	; 0xfb8
 8000e20:	ed93 7a00 	vldr	s14, [r3]
 8000e24:	4ba0      	ldr	r3, [pc, #640]	; (80010a8 <_ZN5NEOM89parse_ggaEPh+0x498>)
 8000e26:	799b      	ldrb	r3, [r3, #6]
 8000e28:	ee07 3a90 	vmov	s15, r3
 8000e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f603 73b8 	addw	r3, r3, #4024	; 0xfb8
 8000e3a:	edc3 7a00 	vstr	s15, [r3]
	//Decimal Point
	gpsData.utcTime += (float) rawTime[8] * 0.1;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f603 73b8 	addw	r3, r3, #4024	; 0xfb8
 8000e44:	edd3 7a00 	vldr	s15, [r3]
 8000e48:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e4c:	4b96      	ldr	r3, [pc, #600]	; (80010a8 <_ZN5NEOM89parse_ggaEPh+0x498>)
 8000e4e:	7a1b      	ldrb	r3, [r3, #8]
 8000e50:	ee07 3a90 	vmov	s15, r3
 8000e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e5c:	ed9f 5b88 	vldr	d5, [pc, #544]	; 8001080 <_ZN5NEOM89parse_ggaEPh+0x470>
 8000e60:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e64:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e68:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f603 73b8 	addw	r3, r3, #4024	; 0xfb8
 8000e72:	edc3 7a00 	vstr	s15, [r3]
	gpsData.utcTime += (float) rawTime[9] * 0.01;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f603 73b8 	addw	r3, r3, #4024	; 0xfb8
 8000e7c:	edd3 7a00 	vldr	s15, [r3]
 8000e80:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e84:	4b88      	ldr	r3, [pc, #544]	; (80010a8 <_ZN5NEOM89parse_ggaEPh+0x498>)
 8000e86:	7a5b      	ldrb	r3, [r3, #9]
 8000e88:	ee07 3a90 	vmov	s15, r3
 8000e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e94:	ed9f 5b7c 	vldr	d5, [pc, #496]	; 8001088 <_ZN5NEOM89parse_ggaEPh+0x478>
 8000e98:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ea0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f603 73b8 	addw	r3, r3, #4024	; 0xfb8
 8000eaa:	edc3 7a00 	vstr	s15, [r3]
	gpsData.utcTime += (float) rawTime[10] * 0.001;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f603 73b8 	addw	r3, r3, #4024	; 0xfb8
 8000eb4:	edd3 7a00 	vldr	s15, [r3]
 8000eb8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ebc:	4b7a      	ldr	r3, [pc, #488]	; (80010a8 <_ZN5NEOM89parse_ggaEPh+0x498>)
 8000ebe:	7a9b      	ldrb	r3, [r3, #10]
 8000ec0:	ee07 3a90 	vmov	s15, r3
 8000ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ec8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ecc:	ed9f 5b70 	vldr	d5, [pc, #448]	; 8001090 <_ZN5NEOM89parse_ggaEPh+0x480>
 8000ed0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000ed4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ed8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f603 73b8 	addw	r3, r3, #4024	; 0xfb8
 8000ee2:	edc3 7a00 	vstr	s15, [r3]

	//calculate latitude
	gpsData.latitude = rawLatitude[3]*10.0;
 8000ee6:	4b75      	ldr	r3, [pc, #468]	; (80010bc <_ZN5NEOM89parse_ggaEPh+0x4ac>)
 8000ee8:	78db      	ldrb	r3, [r3, #3]
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ef2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000ef6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 8000f00:	ed83 7b00 	vstr	d7, [r3]
	gpsData.latitude += rawLatitude[4]*1.0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 8000f0a:	ed93 6b00 	vldr	d6, [r3]
 8000f0e:	4b6b      	ldr	r3, [pc, #428]	; (80010bc <_ZN5NEOM89parse_ggaEPh+0x4ac>)
 8000f10:	791b      	ldrb	r3, [r3, #4]
 8000f12:	ee07 3a90 	vmov	s15, r3
 8000f16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f1a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 8000f24:	ed83 7b00 	vstr	d7, [r3]
	gpsData.latitude += rawLatitude[6]*0.1;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 8000f2e:	ed93 6b00 	vldr	d6, [r3]
 8000f32:	4b62      	ldr	r3, [pc, #392]	; (80010bc <_ZN5NEOM89parse_ggaEPh+0x4ac>)
 8000f34:	799b      	ldrb	r3, [r3, #6]
 8000f36:	ee07 3a90 	vmov	s15, r3
 8000f3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f3e:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8001080 <_ZN5NEOM89parse_ggaEPh+0x470>
 8000f42:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f46:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 8000f50:	ed83 7b00 	vstr	d7, [r3]
	gpsData.latitude += rawLatitude[7]*0.01;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 8000f5a:	ed93 6b00 	vldr	d6, [r3]
 8000f5e:	4b57      	ldr	r3, [pc, #348]	; (80010bc <_ZN5NEOM89parse_ggaEPh+0x4ac>)
 8000f60:	79db      	ldrb	r3, [r3, #7]
 8000f62:	ee07 3a90 	vmov	s15, r3
 8000f66:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f6a:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8001088 <_ZN5NEOM89parse_ggaEPh+0x478>
 8000f6e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f72:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 8000f7c:	ed83 7b00 	vstr	d7, [r3]
	gpsData.latitude += rawLatitude[8]*0.001;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 8000f86:	ed93 6b00 	vldr	d6, [r3]
 8000f8a:	4b4c      	ldr	r3, [pc, #304]	; (80010bc <_ZN5NEOM89parse_ggaEPh+0x4ac>)
 8000f8c:	7a1b      	ldrb	r3, [r3, #8]
 8000f8e:	ee07 3a90 	vmov	s15, r3
 8000f92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f96:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8001090 <_ZN5NEOM89parse_ggaEPh+0x480>
 8000f9a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f9e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 8000fa8:	ed83 7b00 	vstr	d7, [r3]
	gpsData.latitude += rawLatitude[9]*0.0001;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 8000fb2:	ed93 6b00 	vldr	d6, [r3]
 8000fb6:	4b41      	ldr	r3, [pc, #260]	; (80010bc <_ZN5NEOM89parse_ggaEPh+0x4ac>)
 8000fb8:	7a5b      	ldrb	r3, [r3, #9]
 8000fba:	ee07 3a90 	vmov	s15, r3
 8000fbe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fc2:	ed9f 5b35 	vldr	d5, [pc, #212]	; 8001098 <_ZN5NEOM89parse_ggaEPh+0x488>
 8000fc6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000fca:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 8000fd4:	ed83 7b00 	vstr	d7, [r3]
	gpsData.latitude /= 60;  //Converts from dd.mmmmmm to decimal degrees. (60 minutes in a degree)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 8000fde:	ed93 6b00 	vldr	d6, [r3]
 8000fe2:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 80010a0 <_ZN5NEOM89parse_ggaEPh+0x490>
 8000fe6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 8000ff0:	ed83 7b00 	vstr	d7, [r3]
	//Then add the degrees (ranges from -90 to +90)
	gpsData.latitude += rawLatitude[1]*10.0;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 8000ffa:	ed93 6b00 	vldr	d6, [r3]
 8000ffe:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <_ZN5NEOM89parse_ggaEPh+0x4ac>)
 8001000:	785b      	ldrb	r3, [r3, #1]
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800100a:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800100e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001012:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 800101c:	ed83 7b00 	vstr	d7, [r3]
	gpsData.latitude += rawLatitude[2]*1.0;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 8001026:	ed93 6b00 	vldr	d6, [r3]
 800102a:	4b24      	ldr	r3, [pc, #144]	; (80010bc <_ZN5NEOM89parse_ggaEPh+0x4ac>)
 800102c:	789b      	ldrb	r3, [r3, #2]
 800102e:	ee07 3a90 	vmov	s15, r3
 8001032:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001036:	ee36 7b07 	vadd.f64	d7, d6, d7
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 8001040:	ed83 7b00 	vstr	d7, [r3]

	if (latitudeNS == 'S'){
 8001044:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <_ZN5NEOM89parse_ggaEPh+0x4b0>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b53      	cmp	r3, #83	; 0x53
 800104a:	d10b      	bne.n	8001064 <_ZN5NEOM89parse_ggaEPh+0x454>
		gpsData.latitude *= -1;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 8001052:	ed93 7b00 	vldr	d7, [r3]
 8001056:	eeb1 7b47 	vneg.f64	d7, d7
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 8001060:	ed83 7b00 	vstr	d7, [r3]
	}

	//calculate longitude
	gpsData.longitude = rawLongitude[4]*10.0;
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <_ZN5NEOM89parse_ggaEPh+0x4b4>)
 8001066:	791b      	ldrb	r3, [r3, #4]
 8001068:	ee07 3a90 	vmov	s15, r3
 800106c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001070:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8001074:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 800107e:	e023      	b.n	80010c8 <_ZN5NEOM89parse_ggaEPh+0x4b8>
 8001080:	9999999a 	.word	0x9999999a
 8001084:	3fb99999 	.word	0x3fb99999
 8001088:	47ae147b 	.word	0x47ae147b
 800108c:	3f847ae1 	.word	0x3f847ae1
 8001090:	d2f1a9fc 	.word	0xd2f1a9fc
 8001094:	3f50624d 	.word	0x3f50624d
 8001098:	eb1c432d 	.word	0xeb1c432d
 800109c:	3f1a36e2 	.word	0x3f1a36e2
 80010a0:	00000000 	.word	0x00000000
 80010a4:	404e0000 	.word	0x404e0000
 80010a8:	200000ac 	.word	0x200000ac
 80010ac:	47c35000 	.word	0x47c35000
 80010b0:	461c4000 	.word	0x461c4000
 80010b4:	447a0000 	.word	0x447a0000
 80010b8:	42c80000 	.word	0x42c80000
 80010bc:	200000b8 	.word	0x200000b8
 80010c0:	200000d8 	.word	0x200000d8
 80010c4:	200000c4 	.word	0x200000c4
 80010c8:	ed83 7b00 	vstr	d7, [r3]
	gpsData.longitude += rawLongitude[5]*1.0;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 80010d2:	ed93 6b00 	vldr	d6, [r3]
 80010d6:	4baa      	ldr	r3, [pc, #680]	; (8001380 <_ZN5NEOM89parse_ggaEPh+0x770>)
 80010d8:	795b      	ldrb	r3, [r3, #5]
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 80010ec:	ed83 7b00 	vstr	d7, [r3]
	gpsData.longitude += rawLongitude[7]*0.1;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 80010f6:	ed93 6b00 	vldr	d6, [r3]
 80010fa:	4ba1      	ldr	r3, [pc, #644]	; (8001380 <_ZN5NEOM89parse_ggaEPh+0x770>)
 80010fc:	79db      	ldrb	r3, [r3, #7]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001106:	ed9f 5b92 	vldr	d5, [pc, #584]	; 8001350 <_ZN5NEOM89parse_ggaEPh+0x740>
 800110a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800110e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 8001118:	ed83 7b00 	vstr	d7, [r3]
	gpsData.longitude += rawLongitude[8]*0.01;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 8001122:	ed93 6b00 	vldr	d6, [r3]
 8001126:	4b96      	ldr	r3, [pc, #600]	; (8001380 <_ZN5NEOM89parse_ggaEPh+0x770>)
 8001128:	7a1b      	ldrb	r3, [r3, #8]
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001132:	ed9f 5b89 	vldr	d5, [pc, #548]	; 8001358 <_ZN5NEOM89parse_ggaEPh+0x748>
 8001136:	ee27 7b05 	vmul.f64	d7, d7, d5
 800113a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 8001144:	ed83 7b00 	vstr	d7, [r3]
	gpsData.longitude += rawLongitude[9]*0.001;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 800114e:	ed93 6b00 	vldr	d6, [r3]
 8001152:	4b8b      	ldr	r3, [pc, #556]	; (8001380 <_ZN5NEOM89parse_ggaEPh+0x770>)
 8001154:	7a5b      	ldrb	r3, [r3, #9]
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800115e:	ed9f 5b80 	vldr	d5, [pc, #512]	; 8001360 <_ZN5NEOM89parse_ggaEPh+0x750>
 8001162:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001166:	ee36 7b07 	vadd.f64	d7, d6, d7
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 8001170:	ed83 7b00 	vstr	d7, [r3]
	gpsData.longitude += rawLongitude[10]*0.0001;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 800117a:	ed93 6b00 	vldr	d6, [r3]
 800117e:	4b80      	ldr	r3, [pc, #512]	; (8001380 <_ZN5NEOM89parse_ggaEPh+0x770>)
 8001180:	7a9b      	ldrb	r3, [r3, #10]
 8001182:	ee07 3a90 	vmov	s15, r3
 8001186:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800118a:	ed9f 5b77 	vldr	d5, [pc, #476]	; 8001368 <_ZN5NEOM89parse_ggaEPh+0x758>
 800118e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001192:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 800119c:	ed83 7b00 	vstr	d7, [r3]
	gpsData.longitude /= 60;  //Converts from ddd.mmmmmm to decimal degrees. (60 minutes in a degree)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 80011a6:	ed93 6b00 	vldr	d6, [r3]
 80011aa:	ed9f 5b71 	vldr	d5, [pc, #452]	; 8001370 <_ZN5NEOM89parse_ggaEPh+0x760>
 80011ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 80011b8:	ed83 7b00 	vstr	d7, [r3]
	//Then add the degrees (ranges from -180 to +180)
	gpsData.longitude += rawLongitude[1]*100.0;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 80011c2:	ed93 6b00 	vldr	d6, [r3]
 80011c6:	4b6e      	ldr	r3, [pc, #440]	; (8001380 <_ZN5NEOM89parse_ggaEPh+0x770>)
 80011c8:	785b      	ldrb	r3, [r3, #1]
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011d2:	ed9f 5b69 	vldr	d5, [pc, #420]	; 8001378 <_ZN5NEOM89parse_ggaEPh+0x768>
 80011d6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80011da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 80011e4:	ed83 7b00 	vstr	d7, [r3]
	gpsData.longitude += rawLongitude[2]*10.0;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 80011ee:	ed93 6b00 	vldr	d6, [r3]
 80011f2:	4b63      	ldr	r3, [pc, #396]	; (8001380 <_ZN5NEOM89parse_ggaEPh+0x770>)
 80011f4:	789b      	ldrb	r3, [r3, #2]
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011fe:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8001202:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001206:	ee36 7b07 	vadd.f64	d7, d6, d7
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 8001210:	ed83 7b00 	vstr	d7, [r3]
	gpsData.longitude += rawLongitude[3]*1.0;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 800121a:	ed93 6b00 	vldr	d6, [r3]
 800121e:	4b58      	ldr	r3, [pc, #352]	; (8001380 <_ZN5NEOM89parse_ggaEPh+0x770>)
 8001220:	78db      	ldrb	r3, [r3, #3]
 8001222:	ee07 3a90 	vmov	s15, r3
 8001226:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800122a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 8001234:	ed83 7b00 	vstr	d7, [r3]

	if (longitudeEW == 'W'){
 8001238:	4b52      	ldr	r3, [pc, #328]	; (8001384 <_ZN5NEOM89parse_ggaEPh+0x774>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b57      	cmp	r3, #87	; 0x57
 800123e:	d10b      	bne.n	8001258 <_ZN5NEOM89parse_ggaEPh+0x648>
		gpsData.longitude *= -1;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 8001246:	ed93 7b00 	vldr	d7, [r3]
 800124a:	eeb1 7b47 	vneg.f64	d7, d7
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 8001254:	ed83 7b00 	vstr	d7, [r3]
	}

	//calculate satellites
	if (rawSatellites[2] == 10) gpsData.numSatellites = rawSatellites[1];
 8001258:	4b4b      	ldr	r3, [pc, #300]	; (8001388 <_ZN5NEOM89parse_ggaEPh+0x778>)
 800125a:	789b      	ldrb	r3, [r3, #2]
 800125c:	2b0a      	cmp	r3, #10
 800125e:	d105      	bne.n	800126c <_ZN5NEOM89parse_ggaEPh+0x65c>
 8001260:	4b49      	ldr	r3, [pc, #292]	; (8001388 <_ZN5NEOM89parse_ggaEPh+0x778>)
 8001262:	785a      	ldrb	r2, [r3, #1]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f883 2fc6 	strb.w	r2, [r3, #4038]	; 0xfc6
 800126a:	e00d      	b.n	8001288 <_ZN5NEOM89parse_ggaEPh+0x678>
	else gpsData.numSatellites = rawSatellites[1]*10 + rawSatellites[2];
 800126c:	4b46      	ldr	r3, [pc, #280]	; (8001388 <_ZN5NEOM89parse_ggaEPh+0x778>)
 800126e:	785b      	ldrb	r3, [r3, #1]
 8001270:	461a      	mov	r2, r3
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	4413      	add	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b43      	ldr	r3, [pc, #268]	; (8001388 <_ZN5NEOM89parse_ggaEPh+0x778>)
 800127c:	789b      	ldrb	r3, [r3, #2]
 800127e:	4413      	add	r3, r2
 8001280:	b2da      	uxtb	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f883 2fc6 	strb.w	r2, [r3, #4038]	; 0xfc6

	//calculate altitude - tricky because of unknown 1-3 digits preceeding the decimal
	i = 1;
 8001288:	2301      	movs	r3, #1
 800128a:	623b      	str	r3, [r7, #32]
	long int multiplier = 10;
 800128c:	230a      	movs	r3, #10
 800128e:	61bb      	str	r3, [r7, #24]
	int decimalPoint = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
	gpsData.altitude = 0;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f8c3 2fc0 	str.w	r2, [r3, #4032]	; 0xfc0
	float tAltitude = 0;
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
	for (i = 1; i < 8; i++) //this code first generates an 6 digit decimal number
 80012a2:	2301      	movs	r3, #1
 80012a4:	623b      	str	r3, [r7, #32]
 80012a6:	6a3b      	ldr	r3, [r7, #32]
 80012a8:	2b07      	cmp	r3, #7
 80012aa:	dc27      	bgt.n	80012fc <_ZN5NEOM89parse_ggaEPh+0x6ec>
	{
		if (rawAltitude[i] == 0x10) //check for decimal point
 80012ac:	4a37      	ldr	r2, [pc, #220]	; (800138c <_ZN5NEOM89parse_ggaEPh+0x77c>)
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	4413      	add	r3, r2
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b10      	cmp	r3, #16
 80012b6:	d102      	bne.n	80012be <_ZN5NEOM89parse_ggaEPh+0x6ae>
		{
			decimalPoint = i;
 80012b8:	6a3b      	ldr	r3, [r7, #32]
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	e01a      	b.n	80012f4 <_ZN5NEOM89parse_ggaEPh+0x6e4>
		} else {
			tAltitude += (float) (rawAltitude[i]*1000000 / multiplier);
 80012be:	4a33      	ldr	r2, [pc, #204]	; (800138c <_ZN5NEOM89parse_ggaEPh+0x77c>)
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	4413      	add	r3, r2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b31      	ldr	r3, [pc, #196]	; (8001390 <_ZN5NEOM89parse_ggaEPh+0x780>)
 80012ca:	fb03 f202 	mul.w	r2, r3, r2
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80012d4:	ee07 3a90 	vmov	s15, r3
 80012d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80012e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012e4:	edc7 7a04 	vstr	s15, [r7, #16]
			multiplier *= 10;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	61bb      	str	r3, [r7, #24]
	for (i = 1; i < 8; i++) //this code first generates an 6 digit decimal number
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	3301      	adds	r3, #1
 80012f8:	623b      	str	r3, [r7, #32]
 80012fa:	e7d4      	b.n	80012a6 <_ZN5NEOM89parse_ggaEPh+0x696>
		}
	}
	decimalPoint = decimalPoint - 2;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3b02      	subs	r3, #2
 8001300:	617b      	str	r3, [r7, #20]
	multiplier = 100000;
 8001302:	4b24      	ldr	r3, [pc, #144]	; (8001394 <_ZN5NEOM89parse_ggaEPh+0x784>)
 8001304:	61bb      	str	r3, [r7, #24]
	while (decimalPoint > 0) //then divides it according to the placement of the decimal
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	2b00      	cmp	r3, #0
 800130a:	dd0b      	ble.n	8001324 <_ZN5NEOM89parse_ggaEPh+0x714>
	{
		multiplier = multiplier / 10;
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	4a22      	ldr	r2, [pc, #136]	; (8001398 <_ZN5NEOM89parse_ggaEPh+0x788>)
 8001310:	fb82 1203 	smull	r1, r2, r2, r3
 8001314:	1092      	asrs	r2, r2, #2
 8001316:	17db      	asrs	r3, r3, #31
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	61bb      	str	r3, [r7, #24]
		decimalPoint--;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	3b01      	subs	r3, #1
 8001320:	617b      	str	r3, [r7, #20]
	while (decimalPoint > 0) //then divides it according to the placement of the decimal
 8001322:	e7f0      	b.n	8001306 <_ZN5NEOM89parse_ggaEPh+0x6f6>
	}
	gpsData.altitude = (int)(tAltitude / multiplier);
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	ee07 3a90 	vmov	s15, r3
 800132a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800132e:	edd7 6a04 	vldr	s13, [r7, #16]
 8001332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001336:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800133a:	ee17 2a90 	vmov	r2, s15
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f8c3 2fc0 	str.w	r2, [r3, #4032]	; 0xfc0
}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	f3af 8000 	nop.w
 8001350:	9999999a 	.word	0x9999999a
 8001354:	3fb99999 	.word	0x3fb99999
 8001358:	47ae147b 	.word	0x47ae147b
 800135c:	3f847ae1 	.word	0x3f847ae1
 8001360:	d2f1a9fc 	.word	0xd2f1a9fc
 8001364:	3f50624d 	.word	0x3f50624d
 8001368:	eb1c432d 	.word	0xeb1c432d
 800136c:	3f1a36e2 	.word	0x3f1a36e2
 8001370:	00000000 	.word	0x00000000
 8001374:	404e0000 	.word	0x404e0000
 8001378:	00000000 	.word	0x00000000
 800137c:	40590000 	.word	0x40590000
 8001380:	200000c4 	.word	0x200000c4
 8001384:	200000d9 	.word	0x200000d9
 8001388:	20000000 	.word	0x20000000
 800138c:	200000d0 	.word	0x200000d0
 8001390:	000f4240 	.word	0x000f4240
 8001394:	000186a0 	.word	0x000186a0
 8001398:	66666667 	.word	0x66666667

0800139c <_ZN5NEOM89GetResultEP9GpsData_t>:

void NEOM8::GetResult(GpsData_t * Data) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]

	if (newData) {
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3fa4 	ldrb.w	r3, [r3, #4004]	; 0xfa4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d006      	beq.n	80013be <_ZN5NEOM89GetResultEP9GpsData_t+0x22>
		parse_gpsData();
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff f9f9 	bl	80007a8 <_ZN5NEOM813parse_gpsDataEv>
		newData = false;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2fa4 	strb.w	r2, [r3, #4004]	; 0xfa4
	}

	if (dataAvailable) {
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3fa5 	ldrb.w	r3, [r3, #4005]	; 0xfa5
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d061      	beq.n	800148c <_ZN5NEOM89GetResultEP9GpsData_t+0xf0>
		Data->dataIsNew = gpsData.dataIsNew;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 2fc9 	ldrb.w	r2, [r3, #4041]	; 0xfc9
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		Data->ggaDataIsNew = gpsData.ggaDataIsNew;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 2fcb 	ldrb.w	r2, [r3, #4043]	; 0xfcb
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		Data->vtgDataIsNew = gpsData.vtgDataIsNew;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 2fcc 	ldrb.w	r2, [r3, #4044]	; 0xfcc
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		Data->latitude = gpsData.latitude;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f603 73a8 	addw	r3, r3, #4008	; 0xfa8
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	6839      	ldr	r1, [r7, #0]
 80013f8:	e9c1 2300 	strd	r2, r3, [r1]
		Data->longitude = gpsData.longitude;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f503 637b 	add.w	r3, r3, #4016	; 0xfb0
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	6839      	ldr	r1, [r7, #0]
 8001408:	e9c1 2302 	strd	r2, r3, [r1, #8]
		Data->utcTime = gpsData.utcTime;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f603 73b8 	addw	r3, r3, #4024	; 0xfb8
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	611a      	str	r2, [r3, #16]
		Data->groundSpeed = gpsData.groundSpeed;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f603 73bc 	addw	r3, r3, #4028	; 0xfbc
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	615a      	str	r2, [r3, #20]
		Data->altitude = gpsData.altitude;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f8d3 2fc0 	ldr.w	r2, [r3, #4032]	; 0xfc0
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	619a      	str	r2, [r3, #24]
		Data->heading = gpsData.heading;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f9b3 2fc4 	ldrsh.w	r2, [r3, #4036]	; 0xfc4
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	839a      	strh	r2, [r3, #28]
		Data->numSatellites = gpsData.numSatellites;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 2fc6 	ldrb.w	r2, [r3, #4038]	; 0xfc6
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	779a      	strb	r2, [r3, #30]
		Data->fixStatus = gpsData.fixStatus;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 2fc7 	ldrb.w	r2, [r3, #4039]	; 0xfc7
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	77da      	strb	r2, [r3, #31]
		Data->sensorStatus = gpsData.sensorStatus;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 2fc8 	ldrb.w	r2, [r3, #4040]	; 0xfc8
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	f883 2020 	strb.w	r2, [r3, #32]
		Data->timeIsNew = gpsData.timeIsNew;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 2fca 	ldrb.w	r2, [r3, #4042]	; 0xfca
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

		gpsData.vtgDataIsNew = false;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2fcc 	strb.w	r2, [r3, #4044]	; 0xfcc
		gpsData.ggaDataIsNew = false;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2fcb 	strb.w	r2, [r3, #4043]	; 0xfcb
		gpsData.dataIsNew = false;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2fc9 	strb.w	r2, [r3, #4041]	; 0xfc9
		gpsData.timeIsNew = false;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2fca 	strb.w	r2, [r3, #4042]	; 0xfca
		dataAvailable = false;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2fa5 	strb.w	r2, [r3, #4005]	; 0xfa5
	}
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08c      	sub	sp, #48	; 0x30
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800149a:	f000 fb66 	bl	8001b6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800149e:	f000 f835 	bl	800150c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a2:	f000 f921 	bl	80016e8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80014a6:	f000 f8f9 	bl	800169c <_ZL11MX_DMA_Initv>
  MX_UART4_Init();
 80014aa:	f000 f8b9 	bl	8001620 <_ZL13MX_UART4_Initv>
  /* USER CODE BEGIN 2 */


  NEOM8 * gps = NEOM8::GetInstance();
 80014ae:	f7ff f83f 	bl	8000530 <_ZN5NEOM811GetInstanceEv>
 80014b2:	62f8      	str	r0, [r7, #44]	; 0x2c

  GpsData_t gpsdata;
  gpsdata.dataIsNew = false;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  gpsdata.ggaDataIsNew = false;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  gpsdata.vtgDataIsNew = false;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_7);
 80014c6:	2180      	movs	r1, #128	; 0x80
 80014c8:	480f      	ldr	r0, [pc, #60]	; (8001508 <main+0x74>)
 80014ca:	f001 fa8c 	bl	80029e6 <HAL_GPIO_TogglePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	gps->GetResult(&gpsdata);
 80014ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	463a      	mov	r2, r7
 80014d6:	4611      	mov	r1, r2
 80014d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014da:	4798      	blx	r3

	if (gpsdata.ggaDataIsNew && gpsdata.vtgDataIsNew) {
 80014dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f4      	beq.n	80014ce <main+0x3a>
 80014e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <main+0x3a>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_7);
 80014ec:	2180      	movs	r1, #128	; 0x80
 80014ee:	4806      	ldr	r0, [pc, #24]	; (8001508 <main+0x74>)
 80014f0:	f001 fa79 	bl	80029e6 <HAL_GPIO_TogglePin>
		gpsdata.dataIsNew = false;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		gpsdata.ggaDataIsNew = false;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		gpsdata.vtgDataIsNew = false;
 8001500:	2300      	movs	r3, #0
 8001502:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	gps->GetResult(&gpsdata);
 8001506:	e7e2      	b.n	80014ce <main+0x3a>
 8001508:	40021000 	.word	0x40021000

0800150c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b0b8      	sub	sp, #224	; 0xe0
 8001510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001512:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001516:	2234      	movs	r2, #52	; 0x34
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f003 fb76 	bl	8004c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001520:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	2290      	movs	r2, #144	; 0x90
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f003 fb67 	bl	8004c0c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	4b36      	ldr	r3, [pc, #216]	; (8001618 <_Z18SystemClock_Configv+0x10c>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a35      	ldr	r2, [pc, #212]	; (8001618 <_Z18SystemClock_Configv+0x10c>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b33      	ldr	r3, [pc, #204]	; (8001618 <_Z18SystemClock_Configv+0x10c>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001556:	4b31      	ldr	r3, [pc, #196]	; (800161c <_Z18SystemClock_Configv+0x110>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800155e:	4a2f      	ldr	r2, [pc, #188]	; (800161c <_Z18SystemClock_Configv+0x110>)
 8001560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	4b2d      	ldr	r3, [pc, #180]	; (800161c <_Z18SystemClock_Configv+0x110>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001572:	2302      	movs	r3, #2
 8001574:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001578:	2301      	movs	r3, #1
 800157a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800157e:	2310      	movs	r3, #16
 8001580:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001584:	2300      	movs	r3, #0
 8001586:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800158a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800158e:	4618      	mov	r0, r3
 8001590:	f001 fa44 	bl	8002a1c <HAL_RCC_OscConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	bf14      	ite	ne
 800159a:	2301      	movne	r3, #1
 800159c:	2300      	moveq	r3, #0
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 80015a4:	f000 f90c 	bl	80017c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a8:	230f      	movs	r3, #15
 80015aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f001 fcd3 	bl	8002f78 <HAL_RCC_ClockConfig>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	bf14      	ite	ne
 80015d8:	2301      	movne	r3, #1
 80015da:	2300      	moveq	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 80015e2:	f000 f8ed 	bl	80017c0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80015e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015ea:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	4618      	mov	r0, r3
 80015f6:	f001 fe95 	bl	8003324 <HAL_RCCEx_PeriphCLKConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf14      	ite	ne
 8001600:	2301      	movne	r3, #1
 8001602:	2300      	moveq	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <_Z18SystemClock_Configv+0x102>
  {
    Error_Handler();
 800160a:	f000 f8d9 	bl	80017c0 <Error_Handler>
  }
}
 800160e:	bf00      	nop
 8001610:	37e0      	adds	r7, #224	; 0xe0
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40007000 	.word	0x40007000

08001620 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <_ZL13MX_UART4_Initv+0x74>)
 8001626:	4a1c      	ldr	r2, [pc, #112]	; (8001698 <_ZL13MX_UART4_Initv+0x78>)
 8001628:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800162a:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <_ZL13MX_UART4_Initv+0x74>)
 800162c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001630:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001632:	4b18      	ldr	r3, [pc, #96]	; (8001694 <_ZL13MX_UART4_Initv+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <_ZL13MX_UART4_Initv+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <_ZL13MX_UART4_Initv+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <_ZL13MX_UART4_Initv+0x74>)
 8001646:	220c      	movs	r2, #12
 8001648:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <_ZL13MX_UART4_Initv+0x74>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_8;
 8001650:	4b10      	ldr	r3, [pc, #64]	; (8001694 <_ZL13MX_UART4_Initv+0x74>)
 8001652:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001656:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <_ZL13MX_UART4_Initv+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <_ZL13MX_UART4_Initv+0x74>)
 8001660:	2230      	movs	r2, #48	; 0x30
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <_ZL13MX_UART4_Initv+0x74>)
 8001666:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800166a:	639a      	str	r2, [r3, #56]	; 0x38
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <_ZL13MX_UART4_Initv+0x74>)
 800166e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001672:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001674:	4807      	ldr	r0, [pc, #28]	; (8001694 <_ZL13MX_UART4_Initv+0x74>)
 8001676:	f002 fa45 	bl	8003b04 <HAL_UART_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	bf14      	ite	ne
 8001680:	2301      	movne	r3, #1
 8001682:	2300      	moveq	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <_ZL13MX_UART4_Initv+0x6e>
  {
    Error_Handler();
 800168a:	f000 f899 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200000dc 	.word	0x200000dc
 8001698:	40004c00 	.word	0x40004c00

0800169c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <_ZL11MX_DMA_Initv+0x48>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <_ZL11MX_DMA_Initv+0x48>)
 80016a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <_ZL11MX_DMA_Initv+0x48>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	200d      	movs	r0, #13
 80016c0:	f000 fb8b 	bl	8001dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80016c4:	200d      	movs	r0, #13
 80016c6:	f000 fba4 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2100      	movs	r1, #0
 80016ce:	200f      	movs	r0, #15
 80016d0:	f000 fb83 	bl	8001dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80016d4:	200f      	movs	r0, #15
 80016d6:	f000 fb9c 	bl	8001e12 <HAL_NVIC_EnableIRQ>

}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800

080016e8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	; 0x28
 80016ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016fe:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <_ZL12MX_GPIO_Initv+0xcc>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a2c      	ldr	r2, [pc, #176]	; (80017b4 <_ZL12MX_GPIO_Initv+0xcc>)
 8001704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <_ZL12MX_GPIO_Initv+0xcc>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001716:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <_ZL12MX_GPIO_Initv+0xcc>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a26      	ldr	r2, [pc, #152]	; (80017b4 <_ZL12MX_GPIO_Initv+0xcc>)
 800171c:	f043 0310 	orr.w	r3, r3, #16
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <_ZL12MX_GPIO_Initv+0xcc>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <_ZL12MX_GPIO_Initv+0xcc>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a20      	ldr	r2, [pc, #128]	; (80017b4 <_ZL12MX_GPIO_Initv+0xcc>)
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <_ZL12MX_GPIO_Initv+0xcc>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001746:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <_ZL12MX_GPIO_Initv+0xcc>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a1a      	ldr	r2, [pc, #104]	; (80017b4 <_ZL12MX_GPIO_Initv+0xcc>)
 800174c:	f043 0308 	orr.w	r3, r3, #8
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <_ZL12MX_GPIO_Initv+0xcc>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2102      	movs	r1, #2
 8001762:	4815      	ldr	r0, [pc, #84]	; (80017b8 <_ZL12MX_GPIO_Initv+0xd0>)
 8001764:	f001 f926 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001768:	2200      	movs	r2, #0
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	4813      	ldr	r0, [pc, #76]	; (80017bc <_ZL12MX_GPIO_Initv+0xd4>)
 800176e:	f001 f921 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001772:	2302      	movs	r3, #2
 8001774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001776:	2301      	movs	r3, #1
 8001778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	480b      	ldr	r0, [pc, #44]	; (80017b8 <_ZL12MX_GPIO_Initv+0xd0>)
 800178a:	f000 ff67 	bl	800265c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001792:	2301      	movs	r3, #1
 8001794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	4619      	mov	r1, r3
 80017a4:	4805      	ldr	r0, [pc, #20]	; (80017bc <_ZL12MX_GPIO_Initv+0xd4>)
 80017a6:	f000 ff59 	bl	800265c <HAL_GPIO_Init>

}
 80017aa:	bf00      	nop
 80017ac:	3728      	adds	r7, #40	; 0x28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40021800 	.word	0x40021800
 80017bc:	40021000 	.word	0x40021000

080017c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c4:	b672      	cpsid	i
}
 80017c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <Error_Handler+0x8>
	...

080017cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <HAL_MspInit+0x44>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <HAL_MspInit+0x44>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <HAL_MspInit+0x44>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_MspInit+0x44>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	4a08      	ldr	r2, [pc, #32]	; (8001810 <HAL_MspInit+0x44>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f4:	6453      	str	r3, [r2, #68]	; 0x44
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_MspInit+0x44>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40023800 	.word	0x40023800

08001814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a58      	ldr	r2, [pc, #352]	; (8001994 <HAL_UART_MspInit+0x180>)
 8001832:	4293      	cmp	r3, r2
 8001834:	f040 80a9 	bne.w	800198a <HAL_UART_MspInit+0x176>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001838:	4b57      	ldr	r3, [pc, #348]	; (8001998 <HAL_UART_MspInit+0x184>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	4a56      	ldr	r2, [pc, #344]	; (8001998 <HAL_UART_MspInit+0x184>)
 800183e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001842:	6413      	str	r3, [r2, #64]	; 0x40
 8001844:	4b54      	ldr	r3, [pc, #336]	; (8001998 <HAL_UART_MspInit+0x184>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001850:	4b51      	ldr	r3, [pc, #324]	; (8001998 <HAL_UART_MspInit+0x184>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	4a50      	ldr	r2, [pc, #320]	; (8001998 <HAL_UART_MspInit+0x184>)
 8001856:	f043 0302 	orr.w	r3, r3, #2
 800185a:	6313      	str	r3, [r2, #48]	; 0x30
 800185c:	4b4e      	ldr	r3, [pc, #312]	; (8001998 <HAL_UART_MspInit+0x184>)
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001868:	4b4b      	ldr	r3, [pc, #300]	; (8001998 <HAL_UART_MspInit+0x184>)
 800186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186c:	4a4a      	ldr	r2, [pc, #296]	; (8001998 <HAL_UART_MspInit+0x184>)
 800186e:	f043 0308 	orr.w	r3, r3, #8
 8001872:	6313      	str	r3, [r2, #48]	; 0x30
 8001874:	4b48      	ldr	r3, [pc, #288]	; (8001998 <HAL_UART_MspInit+0x184>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
    PB14     ------> UART4_RTS
    PB15     ------> UART4_CTS
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001880:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001892:	2308      	movs	r3, #8
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	483f      	ldr	r0, [pc, #252]	; (800199c <HAL_UART_MspInit+0x188>)
 800189e:	f000 fedd 	bl	800265c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018a2:	2303      	movs	r3, #3
 80018a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ae:	2303      	movs	r3, #3
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018b2:	2308      	movs	r3, #8
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	4838      	ldr	r0, [pc, #224]	; (80019a0 <HAL_UART_MspInit+0x18c>)
 80018be:	f000 fecd 	bl	800265c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80018c2:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <HAL_UART_MspInit+0x190>)
 80018c4:	4a38      	ldr	r2, [pc, #224]	; (80019a8 <HAL_UART_MspInit+0x194>)
 80018c6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80018c8:	4b36      	ldr	r3, [pc, #216]	; (80019a4 <HAL_UART_MspInit+0x190>)
 80018ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ce:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018d0:	4b34      	ldr	r3, [pc, #208]	; (80019a4 <HAL_UART_MspInit+0x190>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d6:	4b33      	ldr	r3, [pc, #204]	; (80019a4 <HAL_UART_MspInit+0x190>)
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018dc:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <HAL_UART_MspInit+0x190>)
 80018de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018e2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <HAL_UART_MspInit+0x190>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ea:	4b2e      	ldr	r3, [pc, #184]	; (80019a4 <HAL_UART_MspInit+0x190>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80018f0:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <HAL_UART_MspInit+0x190>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018f6:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <HAL_UART_MspInit+0x190>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018fc:	4b29      	ldr	r3, [pc, #164]	; (80019a4 <HAL_UART_MspInit+0x190>)
 80018fe:	2200      	movs	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001902:	4828      	ldr	r0, [pc, #160]	; (80019a4 <HAL_UART_MspInit+0x190>)
 8001904:	f000 faa0 	bl	8001e48 <HAL_DMA_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 800190e:	f7ff ff57 	bl	80017c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a23      	ldr	r2, [pc, #140]	; (80019a4 <HAL_UART_MspInit+0x190>)
 8001916:	671a      	str	r2, [r3, #112]	; 0x70
 8001918:	4a22      	ldr	r2, [pc, #136]	; (80019a4 <HAL_UART_MspInit+0x190>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800191e:	4b23      	ldr	r3, [pc, #140]	; (80019ac <HAL_UART_MspInit+0x198>)
 8001920:	4a23      	ldr	r2, [pc, #140]	; (80019b0 <HAL_UART_MspInit+0x19c>)
 8001922:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001924:	4b21      	ldr	r3, [pc, #132]	; (80019ac <HAL_UART_MspInit+0x198>)
 8001926:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800192a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800192c:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <HAL_UART_MspInit+0x198>)
 800192e:	2240      	movs	r2, #64	; 0x40
 8001930:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <HAL_UART_MspInit+0x198>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001938:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <HAL_UART_MspInit+0x198>)
 800193a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800193e:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <HAL_UART_MspInit+0x198>)
 8001942:	2200      	movs	r2, #0
 8001944:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <HAL_UART_MspInit+0x198>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800194c:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_UART_MspInit+0x198>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001952:	4b16      	ldr	r3, [pc, #88]	; (80019ac <HAL_UART_MspInit+0x198>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_UART_MspInit+0x198>)
 800195a:	2200      	movs	r2, #0
 800195c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800195e:	4813      	ldr	r0, [pc, #76]	; (80019ac <HAL_UART_MspInit+0x198>)
 8001960:	f000 fa72 	bl	8001e48 <HAL_DMA_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_UART_MspInit+0x15a>
    {
      Error_Handler();
 800196a:	f7ff ff29 	bl	80017c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <HAL_UART_MspInit+0x198>)
 8001972:	66da      	str	r2, [r3, #108]	; 0x6c
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <HAL_UART_MspInit+0x198>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	2034      	movs	r0, #52	; 0x34
 8001980:	f000 fa2b 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001984:	2034      	movs	r0, #52	; 0x34
 8001986:	f000 fa44 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	; 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40004c00 	.word	0x40004c00
 8001998:	40023800 	.word	0x40023800
 800199c:	40020400 	.word	0x40020400
 80019a0:	40020c00 	.word	0x40020c00
 80019a4:	20000160 	.word	0x20000160
 80019a8:	40026040 	.word	0x40026040
 80019ac:	200001c0 	.word	0x200001c0
 80019b0:	40026070 	.word	0x40026070

080019b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <NMI_Handler+0x4>

080019ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019be:	e7fe      	b.n	80019be <HardFault_Handler+0x4>

080019c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <MemManage_Handler+0x4>

080019c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ca:	e7fe      	b.n	80019ca <BusFault_Handler+0x4>

080019cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <UsageFault_Handler+0x4>

080019d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a00:	f000 f8f0 	bl	8001be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <DMA1_Stream2_IRQHandler+0x10>)
 8001a0e:	f000 fbbb 	bl	8002188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000160 	.word	0x20000160

08001a1c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <DMA1_Stream4_IRQHandler+0x10>)
 8001a22:	f000 fbb1 	bl	8002188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200001c0 	.word	0x200001c0

08001a30 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <UART4_IRQHandler+0x10>)
 8001a36:	f002 f8f1 	bl	8003c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200000dc 	.word	0x200000dc

08001a44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
	return 1;
 8001a48:	2301      	movs	r3, #1
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <_kill>:

int _kill(int pid, int sig)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a5e:	f003 f895 	bl	8004b8c <__errno>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2216      	movs	r2, #22
 8001a66:	601a      	str	r2, [r3, #0]
	return -1;
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_exit>:

void _exit (int status)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ffe7 	bl	8001a54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a86:	e7fe      	b.n	8001a86 <_exit+0x12>

08001a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a90:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <_sbrk+0x5c>)
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <_sbrk+0x60>)
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <_sbrk+0x64>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <_sbrk+0x68>)
 8001aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d207      	bcs.n	8001ac8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab8:	f003 f868 	bl	8004b8c <__errno>
 8001abc:	4603      	mov	r3, r0
 8001abe:	220c      	movs	r2, #12
 8001ac0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ac6:	e009      	b.n	8001adc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4a05      	ldr	r2, [pc, #20]	; (8001aec <_sbrk+0x64>)
 8001ad8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ada:	68fb      	ldr	r3, [r7, #12]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20080000 	.word	0x20080000
 8001ae8:	00000400 	.word	0x00000400
 8001aec:	20000220 	.word	0x20000220
 8001af0:	20000248 	.word	0x20000248

08001af4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <SystemInit+0x20>)
 8001afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001afe:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <SystemInit+0x20>)
 8001b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b1c:	480d      	ldr	r0, [pc, #52]	; (8001b54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b1e:	490e      	ldr	r1, [pc, #56]	; (8001b58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b20:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b24:	e002      	b.n	8001b2c <LoopCopyDataInit>

08001b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2a:	3304      	adds	r3, #4

08001b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b30:	d3f9      	bcc.n	8001b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b32:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b34:	4c0b      	ldr	r4, [pc, #44]	; (8001b64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b38:	e001      	b.n	8001b3e <LoopFillZerobss>

08001b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b3c:	3204      	adds	r2, #4

08001b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b40:	d3fb      	bcc.n	8001b3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b42:	f7ff ffd7 	bl	8001af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b46:	f003 f827 	bl	8004b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4a:	f7ff fca3 	bl	8001494 <main>
  bx  lr    
 8001b4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b50:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b58:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001b5c:	08004e28 	.word	0x08004e28
  ldr r2, =_sbss
 8001b60:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001b64:	20000244 	.word	0x20000244

08001b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <ADC_IRQHandler>

08001b6a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6e:	2003      	movs	r0, #3
 8001b70:	f000 f928 	bl	8001dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b74:	2000      	movs	r0, #0
 8001b76:	f000 f805 	bl	8001b84 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001b7a:	f7ff fe27 	bl	80017cc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_InitTick+0x54>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_InitTick+0x58>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 f943 	bl	8001e2e <HAL_SYSTICK_Config>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00e      	b.n	8001bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b0f      	cmp	r3, #15
 8001bb6:	d80a      	bhi.n	8001bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bc0:	f000 f90b 	bl	8001dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc4:	4a06      	ldr	r2, [pc, #24]	; (8001be0 <HAL_InitTick+0x5c>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000004 	.word	0x20000004
 8001bdc:	2000000c 	.word	0x2000000c
 8001be0:	20000008 	.word	0x20000008

08001be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_IncTick+0x20>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	2000000c 	.word	0x2000000c
 8001c08:	20000230 	.word	0x20000230

08001c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_GetTick+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000230 	.word	0x20000230

08001c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <__NVIC_SetPriorityGrouping+0x40>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c40:	4013      	ands	r3, r2
 8001c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c52:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <__NVIC_SetPriorityGrouping+0x40>)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	60d3      	str	r3, [r2, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00
 8001c68:	05fa0000 	.word	0x05fa0000

08001c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <__NVIC_GetPriorityGrouping+0x18>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	f003 0307 	and.w	r3, r3, #7
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	db0b      	blt.n	8001cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	f003 021f 	and.w	r2, r3, #31
 8001ca0:	4907      	ldr	r1, [pc, #28]	; (8001cc0 <__NVIC_EnableIRQ+0x38>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	2001      	movs	r0, #1
 8001caa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000e100 	.word	0xe000e100

08001cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	db0a      	blt.n	8001cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	490c      	ldr	r1, [pc, #48]	; (8001d10 <__NVIC_SetPriority+0x4c>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	0112      	lsls	r2, r2, #4
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cec:	e00a      	b.n	8001d04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4908      	ldr	r1, [pc, #32]	; (8001d14 <__NVIC_SetPriority+0x50>)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	3b04      	subs	r3, #4
 8001cfc:	0112      	lsls	r2, r2, #4
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	440b      	add	r3, r1
 8001d02:	761a      	strb	r2, [r3, #24]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000e100 	.word	0xe000e100
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f1c3 0307 	rsb	r3, r3, #7
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	bf28      	it	cs
 8001d36:	2304      	movcs	r3, #4
 8001d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d902      	bls.n	8001d48 <NVIC_EncodePriority+0x30>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3b03      	subs	r3, #3
 8001d46:	e000      	b.n	8001d4a <NVIC_EncodePriority+0x32>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43d9      	mvns	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	4313      	orrs	r3, r2
         );
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3724      	adds	r7, #36	; 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d90:	d301      	bcc.n	8001d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00f      	b.n	8001db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <SysTick_Config+0x40>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9e:	210f      	movs	r1, #15
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001da4:	f7ff ff8e 	bl	8001cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <SysTick_Config+0x40>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <SysTick_Config+0x40>)
 8001db0:	2207      	movs	r2, #7
 8001db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	e000e010 	.word	0xe000e010

08001dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ff29 	bl	8001c24 <__NVIC_SetPriorityGrouping>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dec:	f7ff ff3e 	bl	8001c6c <__NVIC_GetPriorityGrouping>
 8001df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68b9      	ldr	r1, [r7, #8]
 8001df6:	6978      	ldr	r0, [r7, #20]
 8001df8:	f7ff ff8e 	bl	8001d18 <NVIC_EncodePriority>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff5d 	bl	8001cc4 <__NVIC_SetPriority>
}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff31 	bl	8001c88 <__NVIC_EnableIRQ>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ffa2 	bl	8001d80 <SysTick_Config>
 8001e3c:	4603      	mov	r3, r0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff feda 	bl	8001c0c <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e099      	b.n	8001f98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e84:	e00f      	b.n	8001ea6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e86:	f7ff fec1 	bl	8001c0c <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b05      	cmp	r3, #5
 8001e92:	d908      	bls.n	8001ea6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2220      	movs	r2, #32
 8001e98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e078      	b.n	8001f98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1e8      	bne.n	8001e86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	4b38      	ldr	r3, [pc, #224]	; (8001fa0 <HAL_DMA_Init+0x158>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d107      	bne.n	8001f10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f023 0307 	bic.w	r3, r3, #7
 8001f26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d117      	bne.n	8001f6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00e      	beq.n	8001f6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 fb09 	bl	8002564 <DMA_CheckFifoParam>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2240      	movs	r2, #64	; 0x40
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f66:	2301      	movs	r3, #1
 8001f68:	e016      	b.n	8001f98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 fac0 	bl	80024f8 <DMA_CalcBaseAndBitshift>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f80:	223f      	movs	r2, #63	; 0x3f
 8001f82:	409a      	lsls	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	e010803f 	.word	0xe010803f

08001fa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_DMA_Start_IT+0x26>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e048      	b.n	800205c <HAL_DMA_Start_IT+0xb8>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d137      	bne.n	800204e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 fa52 	bl	800249c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffc:	223f      	movs	r2, #63	; 0x3f
 8001ffe:	409a      	lsls	r2, r3
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0216 	orr.w	r2, r2, #22
 8002012:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002022:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0208 	orr.w	r2, r2, #8
 800203a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	e005      	b.n	800205a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002056:	2302      	movs	r3, #2
 8002058:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800205a:	7dfb      	ldrb	r3, [r7, #23]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002070:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002072:	f7ff fdcb 	bl	8001c0c <HAL_GetTick>
 8002076:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d008      	beq.n	8002096 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2280      	movs	r2, #128	; 0x80
 8002088:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e052      	b.n	800213c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0216 	bic.w	r2, r2, #22
 80020a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	695a      	ldr	r2, [r3, #20]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d103      	bne.n	80020c6 <HAL_DMA_Abort+0x62>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d007      	beq.n	80020d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0208 	bic.w	r2, r2, #8
 80020d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0201 	bic.w	r2, r2, #1
 80020e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020e6:	e013      	b.n	8002110 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020e8:	f7ff fd90 	bl	8001c0c <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b05      	cmp	r3, #5
 80020f4:	d90c      	bls.n	8002110 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2220      	movs	r2, #32
 80020fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2203      	movs	r2, #3
 8002108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e015      	b.n	800213c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1e4      	bne.n	80020e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002122:	223f      	movs	r2, #63	; 0x3f
 8002124:	409a      	lsls	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d004      	beq.n	8002162 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2280      	movs	r2, #128	; 0x80
 800215c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e00c      	b.n	800217c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2205      	movs	r2, #5
 8002166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0201 	bic.w	r2, r2, #1
 8002178:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002194:	4b92      	ldr	r3, [pc, #584]	; (80023e0 <HAL_DMA_IRQHandler+0x258>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a92      	ldr	r2, [pc, #584]	; (80023e4 <HAL_DMA_IRQHandler+0x25c>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	0a9b      	lsrs	r3, r3, #10
 80021a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b2:	2208      	movs	r2, #8
 80021b4:	409a      	lsls	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d01a      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d013      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0204 	bic.w	r2, r2, #4
 80021da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e0:	2208      	movs	r2, #8
 80021e2:	409a      	lsls	r2, r3
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	f043 0201 	orr.w	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f8:	2201      	movs	r2, #1
 80021fa:	409a      	lsls	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d012      	beq.n	800222a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00b      	beq.n	800222a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002216:	2201      	movs	r2, #1
 8002218:	409a      	lsls	r2, r3
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002222:	f043 0202 	orr.w	r2, r3, #2
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222e:	2204      	movs	r2, #4
 8002230:	409a      	lsls	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4013      	ands	r3, r2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d012      	beq.n	8002260 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00b      	beq.n	8002260 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224c:	2204      	movs	r2, #4
 800224e:	409a      	lsls	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002258:	f043 0204 	orr.w	r2, r3, #4
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002264:	2210      	movs	r2, #16
 8002266:	409a      	lsls	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d043      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d03c      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002282:	2210      	movs	r2, #16
 8002284:	409a      	lsls	r2, r3
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d018      	beq.n	80022ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d108      	bne.n	80022b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d024      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	4798      	blx	r3
 80022b6:	e01f      	b.n	80022f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d01b      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	4798      	blx	r3
 80022c8:	e016      	b.n	80022f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d107      	bne.n	80022e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0208 	bic.w	r2, r2, #8
 80022e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fc:	2220      	movs	r2, #32
 80022fe:	409a      	lsls	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4013      	ands	r3, r2
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 808e 	beq.w	8002426 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 8086 	beq.w	8002426 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231e:	2220      	movs	r2, #32
 8002320:	409a      	lsls	r2, r3
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b05      	cmp	r3, #5
 8002330:	d136      	bne.n	80023a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0216 	bic.w	r2, r2, #22
 8002340:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002350:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	2b00      	cmp	r3, #0
 8002358:	d103      	bne.n	8002362 <HAL_DMA_IRQHandler+0x1da>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0208 	bic.w	r2, r2, #8
 8002370:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002376:	223f      	movs	r2, #63	; 0x3f
 8002378:	409a      	lsls	r2, r3
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002392:	2b00      	cmp	r3, #0
 8002394:	d07d      	beq.n	8002492 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	4798      	blx	r3
        }
        return;
 800239e:	e078      	b.n	8002492 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d01c      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d108      	bne.n	80023ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d030      	beq.n	8002426 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	4798      	blx	r3
 80023cc:	e02b      	b.n	8002426 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d027      	beq.n	8002426 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	4798      	blx	r3
 80023de:	e022      	b.n	8002426 <HAL_DMA_IRQHandler+0x29e>
 80023e0:	20000004 	.word	0x20000004
 80023e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10f      	bne.n	8002416 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0210 	bic.w	r2, r2, #16
 8002404:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	2b00      	cmp	r3, #0
 800242c:	d032      	beq.n	8002494 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d022      	beq.n	8002480 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2205      	movs	r2, #5
 800243e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0201 	bic.w	r2, r2, #1
 8002450:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	3301      	adds	r3, #1
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	429a      	cmp	r2, r3
 800245c:	d307      	bcc.n	800246e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f2      	bne.n	8002452 <HAL_DMA_IRQHandler+0x2ca>
 800246c:	e000      	b.n	8002470 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800246e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	4798      	blx	r3
 8002490:	e000      	b.n	8002494 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002492:	bf00      	nop
    }
  }
}
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop

0800249c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b40      	cmp	r3, #64	; 0x40
 80024c8:	d108      	bne.n	80024dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024da:	e007      	b.n	80024ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	60da      	str	r2, [r3, #12]
}
 80024ec:	bf00      	nop
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	3b10      	subs	r3, #16
 8002508:	4a13      	ldr	r2, [pc, #76]	; (8002558 <DMA_CalcBaseAndBitshift+0x60>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	091b      	lsrs	r3, r3, #4
 8002510:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002512:	4a12      	ldr	r2, [pc, #72]	; (800255c <DMA_CalcBaseAndBitshift+0x64>)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2b03      	cmp	r3, #3
 8002524:	d908      	bls.n	8002538 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <DMA_CalcBaseAndBitshift+0x68>)
 800252e:	4013      	ands	r3, r2
 8002530:	1d1a      	adds	r2, r3, #4
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	659a      	str	r2, [r3, #88]	; 0x58
 8002536:	e006      	b.n	8002546 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	4b08      	ldr	r3, [pc, #32]	; (8002560 <DMA_CalcBaseAndBitshift+0x68>)
 8002540:	4013      	ands	r3, r2
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	aaaaaaab 	.word	0xaaaaaaab
 800255c:	08004e10 	.word	0x08004e10
 8002560:	fffffc00 	.word	0xfffffc00

08002564 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d11f      	bne.n	80025be <DMA_CheckFifoParam+0x5a>
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b03      	cmp	r3, #3
 8002582:	d856      	bhi.n	8002632 <DMA_CheckFifoParam+0xce>
 8002584:	a201      	add	r2, pc, #4	; (adr r2, 800258c <DMA_CheckFifoParam+0x28>)
 8002586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258a:	bf00      	nop
 800258c:	0800259d 	.word	0x0800259d
 8002590:	080025af 	.word	0x080025af
 8002594:	0800259d 	.word	0x0800259d
 8002598:	08002633 	.word	0x08002633
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d046      	beq.n	8002636 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ac:	e043      	b.n	8002636 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025b6:	d140      	bne.n	800263a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025bc:	e03d      	b.n	800263a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c6:	d121      	bne.n	800260c <DMA_CheckFifoParam+0xa8>
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	d837      	bhi.n	800263e <DMA_CheckFifoParam+0xda>
 80025ce:	a201      	add	r2, pc, #4	; (adr r2, 80025d4 <DMA_CheckFifoParam+0x70>)
 80025d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d4:	080025e5 	.word	0x080025e5
 80025d8:	080025eb 	.word	0x080025eb
 80025dc:	080025e5 	.word	0x080025e5
 80025e0:	080025fd 	.word	0x080025fd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
      break;
 80025e8:	e030      	b.n	800264c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d025      	beq.n	8002642 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025fa:	e022      	b.n	8002642 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002604:	d11f      	bne.n	8002646 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800260a:	e01c      	b.n	8002646 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d903      	bls.n	800261a <DMA_CheckFifoParam+0xb6>
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b03      	cmp	r3, #3
 8002616:	d003      	beq.n	8002620 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002618:	e018      	b.n	800264c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	73fb      	strb	r3, [r7, #15]
      break;
 800261e:	e015      	b.n	800264c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00e      	beq.n	800264a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	73fb      	strb	r3, [r7, #15]
      break;
 8002630:	e00b      	b.n	800264a <DMA_CheckFifoParam+0xe6>
      break;
 8002632:	bf00      	nop
 8002634:	e00a      	b.n	800264c <DMA_CheckFifoParam+0xe8>
      break;
 8002636:	bf00      	nop
 8002638:	e008      	b.n	800264c <DMA_CheckFifoParam+0xe8>
      break;
 800263a:	bf00      	nop
 800263c:	e006      	b.n	800264c <DMA_CheckFifoParam+0xe8>
      break;
 800263e:	bf00      	nop
 8002640:	e004      	b.n	800264c <DMA_CheckFifoParam+0xe8>
      break;
 8002642:	bf00      	nop
 8002644:	e002      	b.n	800264c <DMA_CheckFifoParam+0xe8>
      break;   
 8002646:	bf00      	nop
 8002648:	e000      	b.n	800264c <DMA_CheckFifoParam+0xe8>
      break;
 800264a:	bf00      	nop
    }
  } 
  
  return status; 
 800264c:	7bfb      	ldrb	r3, [r7, #15]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop

0800265c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800265c:	b480      	push	{r7}
 800265e:	b089      	sub	sp, #36	; 0x24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	e175      	b.n	8002968 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800267c:	2201      	movs	r2, #1
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	429a      	cmp	r2, r3
 8002696:	f040 8164 	bne.w	8002962 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d00b      	beq.n	80026ba <HAL_GPIO_Init+0x5e>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d007      	beq.n	80026ba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026ae:	2b11      	cmp	r3, #17
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b12      	cmp	r3, #18
 80026b8:	d130      	bne.n	800271c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	2203      	movs	r2, #3
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026f0:	2201      	movs	r2, #1
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	f003 0201 	and.w	r2, r3, #1
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	2203      	movs	r2, #3
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d003      	beq.n	800275c <HAL_GPIO_Init+0x100>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b12      	cmp	r3, #18
 800275a:	d123      	bne.n	80027a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	08da      	lsrs	r2, r3, #3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3208      	adds	r2, #8
 8002764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	220f      	movs	r2, #15
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	08da      	lsrs	r2, r3, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3208      	adds	r2, #8
 800279e:	69b9      	ldr	r1, [r7, #24]
 80027a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0203 	and.w	r2, r3, #3
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80be 	beq.w	8002962 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e6:	4b66      	ldr	r3, [pc, #408]	; (8002980 <HAL_GPIO_Init+0x324>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	4a65      	ldr	r2, [pc, #404]	; (8002980 <HAL_GPIO_Init+0x324>)
 80027ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f0:	6453      	str	r3, [r2, #68]	; 0x44
 80027f2:	4b63      	ldr	r3, [pc, #396]	; (8002980 <HAL_GPIO_Init+0x324>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027fe:	4a61      	ldr	r2, [pc, #388]	; (8002984 <HAL_GPIO_Init+0x328>)
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	089b      	lsrs	r3, r3, #2
 8002804:	3302      	adds	r3, #2
 8002806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	220f      	movs	r2, #15
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a58      	ldr	r2, [pc, #352]	; (8002988 <HAL_GPIO_Init+0x32c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d037      	beq.n	800289a <HAL_GPIO_Init+0x23e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a57      	ldr	r2, [pc, #348]	; (800298c <HAL_GPIO_Init+0x330>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d031      	beq.n	8002896 <HAL_GPIO_Init+0x23a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a56      	ldr	r2, [pc, #344]	; (8002990 <HAL_GPIO_Init+0x334>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d02b      	beq.n	8002892 <HAL_GPIO_Init+0x236>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a55      	ldr	r2, [pc, #340]	; (8002994 <HAL_GPIO_Init+0x338>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d025      	beq.n	800288e <HAL_GPIO_Init+0x232>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a54      	ldr	r2, [pc, #336]	; (8002998 <HAL_GPIO_Init+0x33c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d01f      	beq.n	800288a <HAL_GPIO_Init+0x22e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a53      	ldr	r2, [pc, #332]	; (800299c <HAL_GPIO_Init+0x340>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d019      	beq.n	8002886 <HAL_GPIO_Init+0x22a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a52      	ldr	r2, [pc, #328]	; (80029a0 <HAL_GPIO_Init+0x344>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d013      	beq.n	8002882 <HAL_GPIO_Init+0x226>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a51      	ldr	r2, [pc, #324]	; (80029a4 <HAL_GPIO_Init+0x348>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d00d      	beq.n	800287e <HAL_GPIO_Init+0x222>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a50      	ldr	r2, [pc, #320]	; (80029a8 <HAL_GPIO_Init+0x34c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d007      	beq.n	800287a <HAL_GPIO_Init+0x21e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4f      	ldr	r2, [pc, #316]	; (80029ac <HAL_GPIO_Init+0x350>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d101      	bne.n	8002876 <HAL_GPIO_Init+0x21a>
 8002872:	2309      	movs	r3, #9
 8002874:	e012      	b.n	800289c <HAL_GPIO_Init+0x240>
 8002876:	230a      	movs	r3, #10
 8002878:	e010      	b.n	800289c <HAL_GPIO_Init+0x240>
 800287a:	2308      	movs	r3, #8
 800287c:	e00e      	b.n	800289c <HAL_GPIO_Init+0x240>
 800287e:	2307      	movs	r3, #7
 8002880:	e00c      	b.n	800289c <HAL_GPIO_Init+0x240>
 8002882:	2306      	movs	r3, #6
 8002884:	e00a      	b.n	800289c <HAL_GPIO_Init+0x240>
 8002886:	2305      	movs	r3, #5
 8002888:	e008      	b.n	800289c <HAL_GPIO_Init+0x240>
 800288a:	2304      	movs	r3, #4
 800288c:	e006      	b.n	800289c <HAL_GPIO_Init+0x240>
 800288e:	2303      	movs	r3, #3
 8002890:	e004      	b.n	800289c <HAL_GPIO_Init+0x240>
 8002892:	2302      	movs	r3, #2
 8002894:	e002      	b.n	800289c <HAL_GPIO_Init+0x240>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_GPIO_Init+0x240>
 800289a:	2300      	movs	r3, #0
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	f002 0203 	and.w	r2, r2, #3
 80028a2:	0092      	lsls	r2, r2, #2
 80028a4:	4093      	lsls	r3, r2
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028ac:	4935      	ldr	r1, [pc, #212]	; (8002984 <HAL_GPIO_Init+0x328>)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	3302      	adds	r3, #2
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ba:	4b3d      	ldr	r3, [pc, #244]	; (80029b0 <HAL_GPIO_Init+0x354>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028de:	4a34      	ldr	r2, [pc, #208]	; (80029b0 <HAL_GPIO_Init+0x354>)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028e4:	4b32      	ldr	r3, [pc, #200]	; (80029b0 <HAL_GPIO_Init+0x354>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002908:	4a29      	ldr	r2, [pc, #164]	; (80029b0 <HAL_GPIO_Init+0x354>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800290e:	4b28      	ldr	r3, [pc, #160]	; (80029b0 <HAL_GPIO_Init+0x354>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002932:	4a1f      	ldr	r2, [pc, #124]	; (80029b0 <HAL_GPIO_Init+0x354>)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002938:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <HAL_GPIO_Init+0x354>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800295c:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <HAL_GPIO_Init+0x354>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3301      	adds	r3, #1
 8002966:	61fb      	str	r3, [r7, #28]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	2b0f      	cmp	r3, #15
 800296c:	f67f ae86 	bls.w	800267c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3724      	adds	r7, #36	; 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800
 8002984:	40013800 	.word	0x40013800
 8002988:	40020000 	.word	0x40020000
 800298c:	40020400 	.word	0x40020400
 8002990:	40020800 	.word	0x40020800
 8002994:	40020c00 	.word	0x40020c00
 8002998:	40021000 	.word	0x40021000
 800299c:	40021400 	.word	0x40021400
 80029a0:	40021800 	.word	0x40021800
 80029a4:	40021c00 	.word	0x40021c00
 80029a8:	40022000 	.word	0x40022000
 80029ac:	40022400 	.word	0x40022400
 80029b0:	40013c00 	.word	0x40013c00

080029b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	807b      	strh	r3, [r7, #2]
 80029c0:	4613      	mov	r3, r2
 80029c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029c4:	787b      	ldrb	r3, [r7, #1]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ca:	887a      	ldrh	r2, [r7, #2]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029d0:	e003      	b.n	80029da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029d2:	887b      	ldrh	r3, [r7, #2]
 80029d4:	041a      	lsls	r2, r3, #16
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	619a      	str	r2, [r3, #24]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b085      	sub	sp, #20
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	460b      	mov	r3, r1
 80029f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029f8:	887a      	ldrh	r2, [r7, #2]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4013      	ands	r3, r2
 80029fe:	041a      	lsls	r2, r3, #16
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	43d9      	mvns	r1, r3
 8002a04:	887b      	ldrh	r3, [r7, #2]
 8002a06:	400b      	ands	r3, r1
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	619a      	str	r2, [r3, #24]
}
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a24:	2300      	movs	r3, #0
 8002a26:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e29b      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8087 	beq.w	8002b4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a40:	4b96      	ldr	r3, [pc, #600]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d00c      	beq.n	8002a66 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a4c:	4b93      	ldr	r3, [pc, #588]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d112      	bne.n	8002a7e <HAL_RCC_OscConfig+0x62>
 8002a58:	4b90      	ldr	r3, [pc, #576]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a64:	d10b      	bne.n	8002a7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a66:	4b8d      	ldr	r3, [pc, #564]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d06c      	beq.n	8002b4c <HAL_RCC_OscConfig+0x130>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d168      	bne.n	8002b4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e275      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a86:	d106      	bne.n	8002a96 <HAL_RCC_OscConfig+0x7a>
 8002a88:	4b84      	ldr	r3, [pc, #528]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a83      	ldr	r2, [pc, #524]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	e02e      	b.n	8002af4 <HAL_RCC_OscConfig+0xd8>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x9c>
 8002a9e:	4b7f      	ldr	r3, [pc, #508]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a7e      	ldr	r2, [pc, #504]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	4b7c      	ldr	r3, [pc, #496]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a7b      	ldr	r2, [pc, #492]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e01d      	b.n	8002af4 <HAL_RCC_OscConfig+0xd8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ac0:	d10c      	bne.n	8002adc <HAL_RCC_OscConfig+0xc0>
 8002ac2:	4b76      	ldr	r3, [pc, #472]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a75      	ldr	r2, [pc, #468]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	4b73      	ldr	r3, [pc, #460]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a72      	ldr	r2, [pc, #456]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e00b      	b.n	8002af4 <HAL_RCC_OscConfig+0xd8>
 8002adc:	4b6f      	ldr	r3, [pc, #444]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a6e      	ldr	r2, [pc, #440]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	4b6c      	ldr	r3, [pc, #432]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a6b      	ldr	r2, [pc, #428]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d013      	beq.n	8002b24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7ff f886 	bl	8001c0c <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b04:	f7ff f882 	bl	8001c0c <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	; 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e229      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b16:	4b61      	ldr	r3, [pc, #388]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0xe8>
 8002b22:	e014      	b.n	8002b4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7ff f872 	bl	8001c0c <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b2c:	f7ff f86e 	bl	8001c0c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	; 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e215      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3e:	4b57      	ldr	r3, [pc, #348]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x110>
 8002b4a:	e000      	b.n	8002b4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d069      	beq.n	8002c2e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b5a:	4b50      	ldr	r3, [pc, #320]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00b      	beq.n	8002b7e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b66:	4b4d      	ldr	r3, [pc, #308]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d11c      	bne.n	8002bac <HAL_RCC_OscConfig+0x190>
 8002b72:	4b4a      	ldr	r3, [pc, #296]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d116      	bne.n	8002bac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7e:	4b47      	ldr	r3, [pc, #284]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <HAL_RCC_OscConfig+0x17a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d001      	beq.n	8002b96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e1e9      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b96:	4b41      	ldr	r3, [pc, #260]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	493d      	ldr	r1, [pc, #244]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002baa:	e040      	b.n	8002c2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d023      	beq.n	8002bfc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb4:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a38      	ldr	r2, [pc, #224]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7ff f824 	bl	8001c0c <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc8:	f7ff f820 	bl	8001c0c <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e1c7      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bda:	4b30      	ldr	r3, [pc, #192]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be6:	4b2d      	ldr	r3, [pc, #180]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4929      	ldr	r1, [pc, #164]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]
 8002bfa:	e018      	b.n	8002c2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfc:	4b27      	ldr	r3, [pc, #156]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a26      	ldr	r2, [pc, #152]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002c02:	f023 0301 	bic.w	r3, r3, #1
 8002c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7ff f800 	bl	8001c0c <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c10:	f7fe fffc 	bl	8001c0c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e1a3      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c22:	4b1e      	ldr	r3, [pc, #120]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d038      	beq.n	8002cac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d019      	beq.n	8002c76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c42:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c46:	4a15      	ldr	r2, [pc, #84]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4e:	f7fe ffdd 	bl	8001c0c <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c56:	f7fe ffd9 	bl	8001c0c <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e180      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c68:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCC_OscConfig+0x23a>
 8002c74:	e01a      	b.n	8002cac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c76:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7a:	4a08      	ldr	r2, [pc, #32]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002c7c:	f023 0301 	bic.w	r3, r3, #1
 8002c80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c82:	f7fe ffc3 	bl	8001c0c <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c88:	e00a      	b.n	8002ca0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c8a:	f7fe ffbf 	bl	8001c0c <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d903      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e166      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
 8002c9c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca0:	4b92      	ldr	r3, [pc, #584]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1ee      	bne.n	8002c8a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80a4 	beq.w	8002e02 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b8c      	ldr	r3, [pc, #560]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10d      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	4b89      	ldr	r3, [pc, #548]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	4a88      	ldr	r2, [pc, #544]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd2:	4b86      	ldr	r3, [pc, #536]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ce2:	4b83      	ldr	r3, [pc, #524]	; (8002ef0 <HAL_RCC_OscConfig+0x4d4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d118      	bne.n	8002d20 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002cee:	4b80      	ldr	r3, [pc, #512]	; (8002ef0 <HAL_RCC_OscConfig+0x4d4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a7f      	ldr	r2, [pc, #508]	; (8002ef0 <HAL_RCC_OscConfig+0x4d4>)
 8002cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfa:	f7fe ff87 	bl	8001c0c <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d02:	f7fe ff83 	bl	8001c0c <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b64      	cmp	r3, #100	; 0x64
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e12a      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d14:	4b76      	ldr	r3, [pc, #472]	; (8002ef0 <HAL_RCC_OscConfig+0x4d4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d106      	bne.n	8002d36 <HAL_RCC_OscConfig+0x31a>
 8002d28:	4b70      	ldr	r3, [pc, #448]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2c:	4a6f      	ldr	r2, [pc, #444]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6713      	str	r3, [r2, #112]	; 0x70
 8002d34:	e02d      	b.n	8002d92 <HAL_RCC_OscConfig+0x376>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x33c>
 8002d3e:	4b6b      	ldr	r3, [pc, #428]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	4a6a      	ldr	r2, [pc, #424]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4a:	4b68      	ldr	r3, [pc, #416]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	4a67      	ldr	r2, [pc, #412]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d50:	f023 0304 	bic.w	r3, r3, #4
 8002d54:	6713      	str	r3, [r2, #112]	; 0x70
 8002d56:	e01c      	b.n	8002d92 <HAL_RCC_OscConfig+0x376>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b05      	cmp	r3, #5
 8002d5e:	d10c      	bne.n	8002d7a <HAL_RCC_OscConfig+0x35e>
 8002d60:	4b62      	ldr	r3, [pc, #392]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d64:	4a61      	ldr	r2, [pc, #388]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d66:	f043 0304 	orr.w	r3, r3, #4
 8002d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6c:	4b5f      	ldr	r3, [pc, #380]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d70:	4a5e      	ldr	r2, [pc, #376]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6713      	str	r3, [r2, #112]	; 0x70
 8002d78:	e00b      	b.n	8002d92 <HAL_RCC_OscConfig+0x376>
 8002d7a:	4b5c      	ldr	r3, [pc, #368]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	4a5b      	ldr	r2, [pc, #364]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	6713      	str	r3, [r2, #112]	; 0x70
 8002d86:	4b59      	ldr	r3, [pc, #356]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8a:	4a58      	ldr	r2, [pc, #352]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d8c:	f023 0304 	bic.w	r3, r3, #4
 8002d90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d015      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9a:	f7fe ff37 	bl	8001c0c <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da2:	f7fe ff33 	bl	8001c0c <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0d8      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db8:	4b4c      	ldr	r3, [pc, #304]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0ee      	beq.n	8002da2 <HAL_RCC_OscConfig+0x386>
 8002dc4:	e014      	b.n	8002df0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc6:	f7fe ff21 	bl	8001c0c <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7fe ff1d 	bl	8001c0c <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e0c2      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de4:	4b41      	ldr	r3, [pc, #260]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1ee      	bne.n	8002dce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d105      	bne.n	8002e02 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df6:	4b3d      	ldr	r3, [pc, #244]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	4a3c      	ldr	r2, [pc, #240]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 80ae 	beq.w	8002f68 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e0c:	4b37      	ldr	r3, [pc, #220]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 030c 	and.w	r3, r3, #12
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d06d      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d14b      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e20:	4b32      	ldr	r3, [pc, #200]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a31      	ldr	r2, [pc, #196]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe feee 	bl	8001c0c <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e34:	f7fe feea 	bl	8001c0c <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e091      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e46:	4b29      	ldr	r3, [pc, #164]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69da      	ldr	r2, [r3, #28]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	019b      	lsls	r3, r3, #6
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	085b      	lsrs	r3, r3, #1
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	041b      	lsls	r3, r3, #16
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	061b      	lsls	r3, r3, #24
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	071b      	lsls	r3, r3, #28
 8002e7e:	491b      	ldr	r1, [pc, #108]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e84:	4b19      	ldr	r3, [pc, #100]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a18      	ldr	r2, [pc, #96]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7fe febc 	bl	8001c0c <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e98:	f7fe feb8 	bl	8001c0c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e05f      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eaa:	4b10      	ldr	r3, [pc, #64]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x47c>
 8002eb6:	e057      	b.n	8002f68 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0b      	ldr	r2, [pc, #44]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec4:	f7fe fea2 	bl	8001c0c <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7fe fe9e 	bl	8001c0c <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e045      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ede:	4b03      	ldr	r3, [pc, #12]	; (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x4b0>
 8002eea:	e03d      	b.n	8002f68 <HAL_RCC_OscConfig+0x54c>
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ef4:	4b1f      	ldr	r3, [pc, #124]	; (8002f74 <HAL_RCC_OscConfig+0x558>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d030      	beq.n	8002f64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d129      	bne.n	8002f64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d122      	bne.n	8002f64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f24:	4013      	ands	r3, r2
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f2a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d119      	bne.n	8002f64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	085b      	lsrs	r3, r3, #1
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d10f      	bne.n	8002f64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d107      	bne.n	8002f64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40023800 	.word	0x40023800

08002f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0d0      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f90:	4b6a      	ldr	r3, [pc, #424]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d910      	bls.n	8002fc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9e:	4b67      	ldr	r3, [pc, #412]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 020f 	bic.w	r2, r3, #15
 8002fa6:	4965      	ldr	r1, [pc, #404]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fae:	4b63      	ldr	r3, [pc, #396]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0b8      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d020      	beq.n	800300e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd8:	4b59      	ldr	r3, [pc, #356]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4a58      	ldr	r2, [pc, #352]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8002fde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fe2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ff0:	4b53      	ldr	r3, [pc, #332]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a52      	ldr	r2, [pc, #328]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ffa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ffc:	4b50      	ldr	r3, [pc, #320]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	494d      	ldr	r1, [pc, #308]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 800300a:	4313      	orrs	r3, r2
 800300c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d040      	beq.n	800309c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	4b47      	ldr	r3, [pc, #284]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d115      	bne.n	800305a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e07f      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d107      	bne.n	800304a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303a:	4b41      	ldr	r3, [pc, #260]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e073      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304a:	4b3d      	ldr	r3, [pc, #244]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e06b      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800305a:	4b39      	ldr	r3, [pc, #228]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f023 0203 	bic.w	r2, r3, #3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4936      	ldr	r1, [pc, #216]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8003068:	4313      	orrs	r3, r2
 800306a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800306c:	f7fe fdce 	bl	8001c0c <HAL_GetTick>
 8003070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	e00a      	b.n	800308a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003074:	f7fe fdca 	bl	8001c0c <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e053      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308a:	4b2d      	ldr	r3, [pc, #180]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 020c 	and.w	r2, r3, #12
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	429a      	cmp	r2, r3
 800309a:	d1eb      	bne.n	8003074 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800309c:	4b27      	ldr	r3, [pc, #156]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d210      	bcs.n	80030cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b24      	ldr	r3, [pc, #144]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 020f 	bic.w	r2, r3, #15
 80030b2:	4922      	ldr	r1, [pc, #136]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b20      	ldr	r3, [pc, #128]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e032      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d8:	4b19      	ldr	r3, [pc, #100]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4916      	ldr	r1, [pc, #88]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d009      	beq.n	800310a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030f6:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	490e      	ldr	r1, [pc, #56]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8003106:	4313      	orrs	r3, r2
 8003108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800310a:	f000 f821 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 800310e:	4602      	mov	r2, r0
 8003110:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	490a      	ldr	r1, [pc, #40]	; (8003144 <HAL_RCC_ClockConfig+0x1cc>)
 800311c:	5ccb      	ldrb	r3, [r1, r3]
 800311e:	fa22 f303 	lsr.w	r3, r2, r3
 8003122:	4a09      	ldr	r2, [pc, #36]	; (8003148 <HAL_RCC_ClockConfig+0x1d0>)
 8003124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003126:	4b09      	ldr	r3, [pc, #36]	; (800314c <HAL_RCC_ClockConfig+0x1d4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7fe fd2a 	bl	8001b84 <HAL_InitTick>

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40023c00 	.word	0x40023c00
 8003140:	40023800 	.word	0x40023800
 8003144:	08004df8 	.word	0x08004df8
 8003148:	20000004 	.word	0x20000004
 800314c:	20000008 	.word	0x20000008

08003150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003150:	b5b0      	push	{r4, r5, r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003156:	2100      	movs	r1, #0
 8003158:	6079      	str	r1, [r7, #4]
 800315a:	2100      	movs	r1, #0
 800315c:	60f9      	str	r1, [r7, #12]
 800315e:	2100      	movs	r1, #0
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003162:	2100      	movs	r1, #0
 8003164:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003166:	4952      	ldr	r1, [pc, #328]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003168:	6889      	ldr	r1, [r1, #8]
 800316a:	f001 010c 	and.w	r1, r1, #12
 800316e:	2908      	cmp	r1, #8
 8003170:	d00d      	beq.n	800318e <HAL_RCC_GetSysClockFreq+0x3e>
 8003172:	2908      	cmp	r1, #8
 8003174:	f200 8094 	bhi.w	80032a0 <HAL_RCC_GetSysClockFreq+0x150>
 8003178:	2900      	cmp	r1, #0
 800317a:	d002      	beq.n	8003182 <HAL_RCC_GetSysClockFreq+0x32>
 800317c:	2904      	cmp	r1, #4
 800317e:	d003      	beq.n	8003188 <HAL_RCC_GetSysClockFreq+0x38>
 8003180:	e08e      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003182:	4b4c      	ldr	r3, [pc, #304]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003184:	60bb      	str	r3, [r7, #8]
      break;
 8003186:	e08e      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003188:	4b4b      	ldr	r3, [pc, #300]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x168>)
 800318a:	60bb      	str	r3, [r7, #8]
      break;
 800318c:	e08b      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800318e:	4948      	ldr	r1, [pc, #288]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003190:	6849      	ldr	r1, [r1, #4]
 8003192:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003196:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003198:	4945      	ldr	r1, [pc, #276]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x160>)
 800319a:	6849      	ldr	r1, [r1, #4]
 800319c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80031a0:	2900      	cmp	r1, #0
 80031a2:	d024      	beq.n	80031ee <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a4:	4942      	ldr	r1, [pc, #264]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80031a6:	6849      	ldr	r1, [r1, #4]
 80031a8:	0989      	lsrs	r1, r1, #6
 80031aa:	4608      	mov	r0, r1
 80031ac:	f04f 0100 	mov.w	r1, #0
 80031b0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80031b4:	f04f 0500 	mov.w	r5, #0
 80031b8:	ea00 0204 	and.w	r2, r0, r4
 80031bc:	ea01 0305 	and.w	r3, r1, r5
 80031c0:	493d      	ldr	r1, [pc, #244]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x168>)
 80031c2:	fb01 f003 	mul.w	r0, r1, r3
 80031c6:	2100      	movs	r1, #0
 80031c8:	fb01 f102 	mul.w	r1, r1, r2
 80031cc:	1844      	adds	r4, r0, r1
 80031ce:	493a      	ldr	r1, [pc, #232]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x168>)
 80031d0:	fba2 0101 	umull	r0, r1, r2, r1
 80031d4:	1863      	adds	r3, r4, r1
 80031d6:	4619      	mov	r1, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	461a      	mov	r2, r3
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	f7fd f82a 	bl	8000238 <__aeabi_uldivmod>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4613      	mov	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	e04a      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ee:	4b30      	ldr	r3, [pc, #192]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	099b      	lsrs	r3, r3, #6
 80031f4:	461a      	mov	r2, r3
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031fe:	f04f 0100 	mov.w	r1, #0
 8003202:	ea02 0400 	and.w	r4, r2, r0
 8003206:	ea03 0501 	and.w	r5, r3, r1
 800320a:	4620      	mov	r0, r4
 800320c:	4629      	mov	r1, r5
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	014b      	lsls	r3, r1, #5
 8003218:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800321c:	0142      	lsls	r2, r0, #5
 800321e:	4610      	mov	r0, r2
 8003220:	4619      	mov	r1, r3
 8003222:	1b00      	subs	r0, r0, r4
 8003224:	eb61 0105 	sbc.w	r1, r1, r5
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	018b      	lsls	r3, r1, #6
 8003232:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003236:	0182      	lsls	r2, r0, #6
 8003238:	1a12      	subs	r2, r2, r0
 800323a:	eb63 0301 	sbc.w	r3, r3, r1
 800323e:	f04f 0000 	mov.w	r0, #0
 8003242:	f04f 0100 	mov.w	r1, #0
 8003246:	00d9      	lsls	r1, r3, #3
 8003248:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800324c:	00d0      	lsls	r0, r2, #3
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	1912      	adds	r2, r2, r4
 8003254:	eb45 0303 	adc.w	r3, r5, r3
 8003258:	f04f 0000 	mov.w	r0, #0
 800325c:	f04f 0100 	mov.w	r1, #0
 8003260:	0299      	lsls	r1, r3, #10
 8003262:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003266:	0290      	lsls	r0, r2, #10
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	461a      	mov	r2, r3
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	f7fc ffde 	bl	8000238 <__aeabi_uldivmod>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4613      	mov	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003284:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	0c1b      	lsrs	r3, r3, #16
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	3301      	adds	r3, #1
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	fbb2 f3f3 	udiv	r3, r2, r3
 800329c:	60bb      	str	r3, [r7, #8]
      break;
 800329e:	e002      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032a0:	4b04      	ldr	r3, [pc, #16]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x164>)
 80032a2:	60bb      	str	r3, [r7, #8]
      break;
 80032a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032a6:	68bb      	ldr	r3, [r7, #8]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bdb0      	pop	{r4, r5, r7, pc}
 80032b0:	40023800 	.word	0x40023800
 80032b4:	00f42400 	.word	0x00f42400
 80032b8:	017d7840 	.word	0x017d7840

080032bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c0:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032c2:	681b      	ldr	r3, [r3, #0]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	20000004 	.word	0x20000004

080032d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032d8:	f7ff fff0 	bl	80032bc <HAL_RCC_GetHCLKFreq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	0a9b      	lsrs	r3, r3, #10
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	4903      	ldr	r1, [pc, #12]	; (80032f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40023800 	.word	0x40023800
 80032f8:	08004e08 	.word	0x08004e08

080032fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003300:	f7ff ffdc 	bl	80032bc <HAL_RCC_GetHCLKFreq>
 8003304:	4602      	mov	r2, r0
 8003306:	4b05      	ldr	r3, [pc, #20]	; (800331c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	0b5b      	lsrs	r3, r3, #13
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	4903      	ldr	r1, [pc, #12]	; (8003320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003312:	5ccb      	ldrb	r3, [r1, r3]
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003318:	4618      	mov	r0, r3
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40023800 	.word	0x40023800
 8003320:	08004e08 	.word	0x08004e08

08003324 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d012      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800334c:	4b69      	ldr	r3, [pc, #420]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	4a68      	ldr	r2, [pc, #416]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003352:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003356:	6093      	str	r3, [r2, #8]
 8003358:	4b66      	ldr	r3, [pc, #408]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003360:	4964      	ldr	r1, [pc, #400]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800336e:	2301      	movs	r3, #1
 8003370:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d017      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800337e:	4b5d      	ldr	r3, [pc, #372]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003384:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338c:	4959      	ldr	r1, [pc, #356]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800339c:	d101      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800339e:	2301      	movs	r3, #1
 80033a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80033aa:	2301      	movs	r3, #1
 80033ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d017      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033ba:	4b4e      	ldr	r3, [pc, #312]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	494a      	ldr	r1, [pc, #296]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033d8:	d101      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80033da:	2301      	movs	r3, #1
 80033dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80033e6:	2301      	movs	r3, #1
 80033e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80033f6:	2301      	movs	r3, #1
 80033f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0320 	and.w	r3, r3, #32
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 808b 	beq.w	800351e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003408:	4b3a      	ldr	r3, [pc, #232]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	4a39      	ldr	r2, [pc, #228]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003412:	6413      	str	r3, [r2, #64]	; 0x40
 8003414:	4b37      	ldr	r3, [pc, #220]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003420:	4b35      	ldr	r3, [pc, #212]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a34      	ldr	r2, [pc, #208]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800342c:	f7fe fbee 	bl	8001c0c <HAL_GetTick>
 8003430:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003434:	f7fe fbea 	bl	8001c0c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e358      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003446:	4b2c      	ldr	r3, [pc, #176]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003452:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d035      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	429a      	cmp	r2, r3
 800346e:	d02e      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003470:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003478:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800347a:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347e:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003484:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003486:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	4a1a      	ldr	r2, [pc, #104]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003490:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003492:	4a18      	ldr	r2, [pc, #96]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003498:	4b16      	ldr	r3, [pc, #88]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d114      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fe fbb2 	bl	8001c0c <HAL_GetTick>
 80034a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034aa:	e00a      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ac:	f7fe fbae 	bl	8001c0c <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e31a      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c2:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0ee      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034da:	d111      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034e8:	4b04      	ldr	r3, [pc, #16]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034ea:	400b      	ands	r3, r1
 80034ec:	4901      	ldr	r1, [pc, #4]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	608b      	str	r3, [r1, #8]
 80034f2:	e00b      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40007000 	.word	0x40007000
 80034fc:	0ffffcff 	.word	0x0ffffcff
 8003500:	4bb1      	ldr	r3, [pc, #708]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4ab0      	ldr	r2, [pc, #704]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003506:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800350a:	6093      	str	r3, [r2, #8]
 800350c:	4bae      	ldr	r3, [pc, #696]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800350e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003518:	49ab      	ldr	r1, [pc, #684]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800351a:	4313      	orrs	r3, r2
 800351c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b00      	cmp	r3, #0
 8003528:	d010      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800352a:	4ba7      	ldr	r3, [pc, #668]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800352c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003530:	4aa5      	ldr	r2, [pc, #660]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003536:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800353a:	4ba3      	ldr	r3, [pc, #652]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800353c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003544:	49a0      	ldr	r1, [pc, #640]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003558:	4b9b      	ldr	r3, [pc, #620]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800355a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003566:	4998      	ldr	r1, [pc, #608]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800357a:	4b93      	ldr	r3, [pc, #588]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800357c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003580:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003588:	498f      	ldr	r1, [pc, #572]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00a      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800359c:	4b8a      	ldr	r3, [pc, #552]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035aa:	4987      	ldr	r1, [pc, #540]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035be:	4b82      	ldr	r3, [pc, #520]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035cc:	497e      	ldr	r1, [pc, #504]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035e0:	4b79      	ldr	r3, [pc, #484]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e6:	f023 0203 	bic.w	r2, r3, #3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	4976      	ldr	r1, [pc, #472]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003602:	4b71      	ldr	r3, [pc, #452]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003608:	f023 020c 	bic.w	r2, r3, #12
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003610:	496d      	ldr	r1, [pc, #436]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003624:	4b68      	ldr	r3, [pc, #416]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003632:	4965      	ldr	r1, [pc, #404]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003646:	4b60      	ldr	r3, [pc, #384]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003654:	495c      	ldr	r1, [pc, #368]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003668:	4b57      	ldr	r3, [pc, #348]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003676:	4954      	ldr	r1, [pc, #336]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800368a:	4b4f      	ldr	r3, [pc, #316]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800368c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003690:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003698:	494b      	ldr	r1, [pc, #300]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036ac:	4b46      	ldr	r3, [pc, #280]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ba:	4943      	ldr	r1, [pc, #268]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80036ce:	4b3e      	ldr	r3, [pc, #248]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036dc:	493a      	ldr	r1, [pc, #232]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036f0:	4b35      	ldr	r3, [pc, #212]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036fe:	4932      	ldr	r1, [pc, #200]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d011      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003712:	4b2d      	ldr	r3, [pc, #180]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003718:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003720:	4929      	ldr	r1, [pc, #164]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800372c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003730:	d101      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003732:	2301      	movs	r3, #1
 8003734:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003742:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003748:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003750:	491d      	ldr	r1, [pc, #116]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00b      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003764:	4b18      	ldr	r3, [pc, #96]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003774:	4914      	ldr	r1, [pc, #80]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00b      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003788:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003798:	490b      	ldr	r1, [pc, #44]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00f      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037ac:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037bc:	4902      	ldr	r1, [pc, #8]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 80037c4:	e002      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80037c6:	bf00      	nop
 80037c8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00b      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80037d8:	4b81      	ldr	r3, [pc, #516]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80037da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e8:	497d      	ldr	r1, [pc, #500]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d006      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 80d6 	beq.w	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003804:	4b76      	ldr	r3, [pc, #472]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a75      	ldr	r2, [pc, #468]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800380a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800380e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003810:	f7fe f9fc 	bl	8001c0c <HAL_GetTick>
 8003814:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003816:	e008      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x506>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003818:	f7fe f9f8 	bl	8001c0c <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b64      	cmp	r3, #100	; 0x64
 8003824:	d901      	bls.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x506>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e166      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800382a:	4b6d      	ldr	r3, [pc, #436]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f0      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x4f4>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d021      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003846:	2b00      	cmp	r3, #0
 8003848:	d11d      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800384a:	4b65      	ldr	r3, [pc, #404]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800384c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003850:	0c1b      	lsrs	r3, r3, #16
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003858:	4b61      	ldr	r3, [pc, #388]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800385a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800385e:	0e1b      	lsrs	r3, r3, #24
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	019a      	lsls	r2, r3, #6
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	041b      	lsls	r3, r3, #16
 8003870:	431a      	orrs	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	061b      	lsls	r3, r3, #24
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	071b      	lsls	r3, r3, #28
 800387e:	4958      	ldr	r1, [pc, #352]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d004      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x578>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800389a:	d00a      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x58e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d02e      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038b0:	d129      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038b2:	4b4b      	ldr	r3, [pc, #300]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80038b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038b8:	0c1b      	lsrs	r3, r3, #16
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038c0:	4b47      	ldr	r3, [pc, #284]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80038c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038c6:	0f1b      	lsrs	r3, r3, #28
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	019a      	lsls	r2, r3, #6
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	041b      	lsls	r3, r3, #16
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	061b      	lsls	r3, r3, #24
 80038e0:	431a      	orrs	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	071b      	lsls	r3, r3, #28
 80038e6:	493e      	ldr	r1, [pc, #248]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80038ee:	4b3c      	ldr	r3, [pc, #240]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80038f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f4:	f023 021f 	bic.w	r2, r3, #31
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	3b01      	subs	r3, #1
 80038fe:	4938      	ldr	r1, [pc, #224]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d01d      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003912:	4b33      	ldr	r3, [pc, #204]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003918:	0e1b      	lsrs	r3, r3, #24
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003920:	4b2f      	ldr	r3, [pc, #188]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003926:	0f1b      	lsrs	r3, r3, #28
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	019a      	lsls	r2, r3, #6
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	041b      	lsls	r3, r3, #16
 800393a:	431a      	orrs	r2, r3
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	061b      	lsls	r3, r3, #24
 8003940:	431a      	orrs	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	071b      	lsls	r3, r3, #28
 8003946:	4926      	ldr	r1, [pc, #152]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d011      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x65a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	019a      	lsls	r2, r3, #6
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	041b      	lsls	r3, r3, #16
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	061b      	lsls	r3, r3, #24
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	071b      	lsls	r3, r3, #28
 8003976:	491a      	ldr	r1, [pc, #104]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800397e:	4b18      	ldr	r3, [pc, #96]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a17      	ldr	r2, [pc, #92]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003984:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800398a:	f7fe f93f 	bl	8001c0c <HAL_GetTick>
 800398e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003992:	f7fe f93b 	bl	8001c0c <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b64      	cmp	r3, #100	; 0x64
 800399e:	d901      	bls.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e0a9      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039a4:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	f040 809f 	bne.w	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039b8:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a08      	ldr	r2, [pc, #32]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80039be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c4:	f7fe f922 	bl	8001c0c <HAL_GetTick>
 80039c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039ca:	e00b      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039cc:	f7fe f91e 	bl	8001c0c <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b64      	cmp	r3, #100	; 0x64
 80039d8:	d904      	bls.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e08c      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039e4:	4b46      	ldr	r3, [pc, #280]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f0:	d0ec      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x6a8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d009      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d02e      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x74c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d12a      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a1a:	4b39      	ldr	r3, [pc, #228]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a20:	0c1b      	lsrs	r3, r3, #16
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a28:	4b35      	ldr	r3, [pc, #212]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	0f1b      	lsrs	r3, r3, #28
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	019a      	lsls	r2, r3, #6
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	041b      	lsls	r3, r3, #16
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	061b      	lsls	r3, r3, #24
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	071b      	lsls	r3, r3, #28
 8003a4e:	492c      	ldr	r1, [pc, #176]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a56:	4b2a      	ldr	r3, [pc, #168]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	3b01      	subs	r3, #1
 8003a66:	021b      	lsls	r3, r3, #8
 8003a68:	4925      	ldr	r1, [pc, #148]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d022      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a84:	d11d      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a86:	4b1e      	ldr	r3, [pc, #120]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8c:	0e1b      	lsrs	r3, r3, #24
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a94:	4b1a      	ldr	r3, [pc, #104]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9a:	0f1b      	lsrs	r3, r3, #28
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	019a      	lsls	r2, r3, #6
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	041b      	lsls	r3, r3, #16
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	061b      	lsls	r3, r3, #24
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	071b      	lsls	r3, r3, #28
 8003aba:	4911      	ldr	r1, [pc, #68]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ac2:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a0e      	ldr	r2, [pc, #56]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ace:	f7fe f89d 	bl	8001c0c <HAL_GetTick>
 8003ad2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ad6:	f7fe f899 	bl	8001c0c <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b64      	cmp	r3, #100	; 0x64
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e007      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003af4:	d1ef      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
      }
    }
  }
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3720      	adds	r7, #32
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40023800 	.word	0x40023800

08003b04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e040      	b.n	8003b98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fd fe74 	bl	8001814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2224      	movs	r2, #36	; 0x24
 8003b30:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0201 	bic.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fa9e 	bl	8004084 <UART_SetConfig>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e022      	b.n	8003b98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fcf4 	bl	8004548 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fd7b 	bl	800468c <UART_CheckIdleState>
 8003b96:	4603      	mov	r3, r0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	4613      	mov	r3, r2
 8003bac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d12c      	bne.n	8003c10 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <HAL_UART_Receive_DMA+0x22>
 8003bbc:	88fb      	ldrh	r3, [r7, #6]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e025      	b.n	8003c12 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_UART_Receive_DMA+0x34>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e01e      	b.n	8003c12 <HAL_UART_Receive_DMA+0x72>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d007      	beq.n	8003c00 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003bfe:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	461a      	mov	r2, r3
 8003c04:	68b9      	ldr	r1, [r7, #8]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 fe06 	bl	8004818 <UART_Start_Receive_DMA>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	e000      	b.n	8003c12 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003c10:	2302      	movs	r3, #2
  }
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c3c:	69fa      	ldr	r2, [r7, #28]
 8003c3e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d113      	bne.n	8003c74 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00e      	beq.n	8003c74 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d009      	beq.n	8003c74 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 81cc 	beq.w	8004002 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
      }
      return;
 8003c72:	e1c6      	b.n	8004002 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 80e3 	beq.w	8003e42 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d105      	bne.n	8003c92 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4ba5      	ldr	r3, [pc, #660]	; (8003f20 <HAL_UART_IRQHandler+0x304>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80d8 	beq.w	8003e42 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d010      	beq.n	8003cbe <HAL_UART_IRQHandler+0xa2>
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2201      	movs	r2, #1
 8003cac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cb4:	f043 0201 	orr.w	r2, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d010      	beq.n	8003cea <HAL_UART_IRQHandler+0xce>
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ce0:	f043 0204 	orr.w	r2, r3, #4
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d010      	beq.n	8003d16 <HAL_UART_IRQHandler+0xfa>
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00b      	beq.n	8003d16 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2204      	movs	r2, #4
 8003d04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d0c:	f043 0202 	orr.w	r2, r3, #2
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f003 0308 	and.w	r3, r3, #8
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d015      	beq.n	8003d4c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d104      	bne.n	8003d34 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00b      	beq.n	8003d4c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2208      	movs	r2, #8
 8003d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d42:	f043 0208 	orr.w	r2, r3, #8
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d011      	beq.n	8003d7a <HAL_UART_IRQHandler+0x15e>
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00c      	beq.n	8003d7a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d70:	f043 0220 	orr.w	r2, r3, #32
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 8140 	beq.w	8004006 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	f003 0320 	and.w	r3, r3, #32
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00c      	beq.n	8003daa <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d007      	beq.n	8003daa <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003db0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbc:	2b40      	cmp	r3, #64	; 0x40
 8003dbe:	d004      	beq.n	8003dca <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d031      	beq.n	8003e2e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fda5 	bl	800491a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dda:	2b40      	cmp	r3, #64	; 0x40
 8003ddc:	d123      	bne.n	8003e26 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dec:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d013      	beq.n	8003e1e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	4a4a      	ldr	r2, [pc, #296]	; (8003f24 <HAL_UART_IRQHandler+0x308>)
 8003dfc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fe f99e 	bl	8002144 <HAL_DMA_Abort_IT>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d017      	beq.n	8003e3e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003e18:	4610      	mov	r0, r2
 8003e1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e1c:	e00f      	b.n	8003e3e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f910 	bl	8004044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e24:	e00b      	b.n	8003e3e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f90c 	bl	8004044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2c:	e007      	b.n	8003e3e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f908 	bl	8004044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003e3c:	e0e3      	b.n	8004006 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e3e:	bf00      	nop
    return;
 8003e40:	e0e1      	b.n	8004006 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	f040 80a7 	bne.w	8003f9a <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f003 0310 	and.w	r3, r3, #16
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 80a1 	beq.w	8003f9a <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 809b 	beq.w	8003f9a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2210      	movs	r2, #16
 8003e6a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e76:	2b40      	cmp	r3, #64	; 0x40
 8003e78:	d156      	bne.n	8003f28 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8003e84:	893b      	ldrh	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 80bf 	beq.w	800400a <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e92:	893a      	ldrh	r2, [r7, #8]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	f080 80b8 	bcs.w	800400a <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	893a      	ldrh	r2, [r7, #8]
 8003e9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eac:	d02a      	beq.n	8003f04 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ebc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0201 	bic.w	r2, r2, #1
 8003ecc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003edc:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0210 	bic.w	r2, r2, #16
 8003ef8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fe f8b0 	bl	8002064 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	4619      	mov	r1, r3
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f89d 	bl	8004058 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f1e:	e074      	b.n	800400a <HAL_UART_IRQHandler+0x3ee>
 8003f20:	04000120 	.word	0x04000120
 8003f24:	08004ac1 	.word	0x08004ac1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d063      	beq.n	800400e <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8003f46:	897b      	ldrh	r3, [r7, #10]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d060      	beq.n	800400e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f5a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0201 	bic.w	r2, r2, #1
 8003f6a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0210 	bic.w	r2, r2, #16
 8003f8c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f8e:	897b      	ldrh	r3, [r7, #10]
 8003f90:	4619      	mov	r1, r3
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f860 	bl	8004058 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f98:	e039      	b.n	800400e <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00d      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x3a4>
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d008      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003fb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f859 	bl	8004070 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003fbe:	e029      	b.n	8004014 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00d      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01a      	beq.n	8004012 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	4798      	blx	r3
    }
    return;
 8003fe4:	e015      	b.n	8004012 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d011      	beq.n	8004014 <HAL_UART_IRQHandler+0x3f8>
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00c      	beq.n	8004014 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fd76 	bl	8004aec <UART_EndTransmit_IT>
    return;
 8004000:	e008      	b.n	8004014 <HAL_UART_IRQHandler+0x3f8>
      return;
 8004002:	bf00      	nop
 8004004:	e006      	b.n	8004014 <HAL_UART_IRQHandler+0x3f8>
    return;
 8004006:	bf00      	nop
 8004008:	e004      	b.n	8004014 <HAL_UART_IRQHandler+0x3f8>
      return;
 800400a:	bf00      	nop
 800400c:	e002      	b.n	8004014 <HAL_UART_IRQHandler+0x3f8>
      return;
 800400e:	bf00      	nop
 8004010:	e000      	b.n	8004014 <HAL_UART_IRQHandler+0x3f8>
    return;
 8004012:	bf00      	nop
  }

}
 8004014:	3720      	adds	r7, #32
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop

0800401c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4ba7      	ldr	r3, [pc, #668]	; (800434c <UART_SetConfig+0x2c8>)
 80040b0:	4013      	ands	r3, r2
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	6979      	ldr	r1, [r7, #20]
 80040b8:	430b      	orrs	r3, r1
 80040ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	4313      	orrs	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a95      	ldr	r2, [pc, #596]	; (8004350 <UART_SetConfig+0x2cc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d120      	bne.n	8004142 <UART_SetConfig+0xbe>
 8004100:	4b94      	ldr	r3, [pc, #592]	; (8004354 <UART_SetConfig+0x2d0>)
 8004102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	2b03      	cmp	r3, #3
 800410c:	d816      	bhi.n	800413c <UART_SetConfig+0xb8>
 800410e:	a201      	add	r2, pc, #4	; (adr r2, 8004114 <UART_SetConfig+0x90>)
 8004110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004114:	08004125 	.word	0x08004125
 8004118:	08004131 	.word	0x08004131
 800411c:	0800412b 	.word	0x0800412b
 8004120:	08004137 	.word	0x08004137
 8004124:	2301      	movs	r3, #1
 8004126:	77fb      	strb	r3, [r7, #31]
 8004128:	e14f      	b.n	80043ca <UART_SetConfig+0x346>
 800412a:	2302      	movs	r3, #2
 800412c:	77fb      	strb	r3, [r7, #31]
 800412e:	e14c      	b.n	80043ca <UART_SetConfig+0x346>
 8004130:	2304      	movs	r3, #4
 8004132:	77fb      	strb	r3, [r7, #31]
 8004134:	e149      	b.n	80043ca <UART_SetConfig+0x346>
 8004136:	2308      	movs	r3, #8
 8004138:	77fb      	strb	r3, [r7, #31]
 800413a:	e146      	b.n	80043ca <UART_SetConfig+0x346>
 800413c:	2310      	movs	r3, #16
 800413e:	77fb      	strb	r3, [r7, #31]
 8004140:	e143      	b.n	80043ca <UART_SetConfig+0x346>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a84      	ldr	r2, [pc, #528]	; (8004358 <UART_SetConfig+0x2d4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d132      	bne.n	80041b2 <UART_SetConfig+0x12e>
 800414c:	4b81      	ldr	r3, [pc, #516]	; (8004354 <UART_SetConfig+0x2d0>)
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	2b0c      	cmp	r3, #12
 8004158:	d828      	bhi.n	80041ac <UART_SetConfig+0x128>
 800415a:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <UART_SetConfig+0xdc>)
 800415c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004160:	08004195 	.word	0x08004195
 8004164:	080041ad 	.word	0x080041ad
 8004168:	080041ad 	.word	0x080041ad
 800416c:	080041ad 	.word	0x080041ad
 8004170:	080041a1 	.word	0x080041a1
 8004174:	080041ad 	.word	0x080041ad
 8004178:	080041ad 	.word	0x080041ad
 800417c:	080041ad 	.word	0x080041ad
 8004180:	0800419b 	.word	0x0800419b
 8004184:	080041ad 	.word	0x080041ad
 8004188:	080041ad 	.word	0x080041ad
 800418c:	080041ad 	.word	0x080041ad
 8004190:	080041a7 	.word	0x080041a7
 8004194:	2300      	movs	r3, #0
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e117      	b.n	80043ca <UART_SetConfig+0x346>
 800419a:	2302      	movs	r3, #2
 800419c:	77fb      	strb	r3, [r7, #31]
 800419e:	e114      	b.n	80043ca <UART_SetConfig+0x346>
 80041a0:	2304      	movs	r3, #4
 80041a2:	77fb      	strb	r3, [r7, #31]
 80041a4:	e111      	b.n	80043ca <UART_SetConfig+0x346>
 80041a6:	2308      	movs	r3, #8
 80041a8:	77fb      	strb	r3, [r7, #31]
 80041aa:	e10e      	b.n	80043ca <UART_SetConfig+0x346>
 80041ac:	2310      	movs	r3, #16
 80041ae:	77fb      	strb	r3, [r7, #31]
 80041b0:	e10b      	b.n	80043ca <UART_SetConfig+0x346>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a69      	ldr	r2, [pc, #420]	; (800435c <UART_SetConfig+0x2d8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d120      	bne.n	80041fe <UART_SetConfig+0x17a>
 80041bc:	4b65      	ldr	r3, [pc, #404]	; (8004354 <UART_SetConfig+0x2d0>)
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041c6:	2b30      	cmp	r3, #48	; 0x30
 80041c8:	d013      	beq.n	80041f2 <UART_SetConfig+0x16e>
 80041ca:	2b30      	cmp	r3, #48	; 0x30
 80041cc:	d814      	bhi.n	80041f8 <UART_SetConfig+0x174>
 80041ce:	2b20      	cmp	r3, #32
 80041d0:	d009      	beq.n	80041e6 <UART_SetConfig+0x162>
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	d810      	bhi.n	80041f8 <UART_SetConfig+0x174>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <UART_SetConfig+0x15c>
 80041da:	2b10      	cmp	r3, #16
 80041dc:	d006      	beq.n	80041ec <UART_SetConfig+0x168>
 80041de:	e00b      	b.n	80041f8 <UART_SetConfig+0x174>
 80041e0:	2300      	movs	r3, #0
 80041e2:	77fb      	strb	r3, [r7, #31]
 80041e4:	e0f1      	b.n	80043ca <UART_SetConfig+0x346>
 80041e6:	2302      	movs	r3, #2
 80041e8:	77fb      	strb	r3, [r7, #31]
 80041ea:	e0ee      	b.n	80043ca <UART_SetConfig+0x346>
 80041ec:	2304      	movs	r3, #4
 80041ee:	77fb      	strb	r3, [r7, #31]
 80041f0:	e0eb      	b.n	80043ca <UART_SetConfig+0x346>
 80041f2:	2308      	movs	r3, #8
 80041f4:	77fb      	strb	r3, [r7, #31]
 80041f6:	e0e8      	b.n	80043ca <UART_SetConfig+0x346>
 80041f8:	2310      	movs	r3, #16
 80041fa:	77fb      	strb	r3, [r7, #31]
 80041fc:	e0e5      	b.n	80043ca <UART_SetConfig+0x346>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a57      	ldr	r2, [pc, #348]	; (8004360 <UART_SetConfig+0x2dc>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d120      	bne.n	800424a <UART_SetConfig+0x1c6>
 8004208:	4b52      	ldr	r3, [pc, #328]	; (8004354 <UART_SetConfig+0x2d0>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004212:	2bc0      	cmp	r3, #192	; 0xc0
 8004214:	d013      	beq.n	800423e <UART_SetConfig+0x1ba>
 8004216:	2bc0      	cmp	r3, #192	; 0xc0
 8004218:	d814      	bhi.n	8004244 <UART_SetConfig+0x1c0>
 800421a:	2b80      	cmp	r3, #128	; 0x80
 800421c:	d009      	beq.n	8004232 <UART_SetConfig+0x1ae>
 800421e:	2b80      	cmp	r3, #128	; 0x80
 8004220:	d810      	bhi.n	8004244 <UART_SetConfig+0x1c0>
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <UART_SetConfig+0x1a8>
 8004226:	2b40      	cmp	r3, #64	; 0x40
 8004228:	d006      	beq.n	8004238 <UART_SetConfig+0x1b4>
 800422a:	e00b      	b.n	8004244 <UART_SetConfig+0x1c0>
 800422c:	2300      	movs	r3, #0
 800422e:	77fb      	strb	r3, [r7, #31]
 8004230:	e0cb      	b.n	80043ca <UART_SetConfig+0x346>
 8004232:	2302      	movs	r3, #2
 8004234:	77fb      	strb	r3, [r7, #31]
 8004236:	e0c8      	b.n	80043ca <UART_SetConfig+0x346>
 8004238:	2304      	movs	r3, #4
 800423a:	77fb      	strb	r3, [r7, #31]
 800423c:	e0c5      	b.n	80043ca <UART_SetConfig+0x346>
 800423e:	2308      	movs	r3, #8
 8004240:	77fb      	strb	r3, [r7, #31]
 8004242:	e0c2      	b.n	80043ca <UART_SetConfig+0x346>
 8004244:	2310      	movs	r3, #16
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e0bf      	b.n	80043ca <UART_SetConfig+0x346>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a45      	ldr	r2, [pc, #276]	; (8004364 <UART_SetConfig+0x2e0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d125      	bne.n	80042a0 <UART_SetConfig+0x21c>
 8004254:	4b3f      	ldr	r3, [pc, #252]	; (8004354 <UART_SetConfig+0x2d0>)
 8004256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800425e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004262:	d017      	beq.n	8004294 <UART_SetConfig+0x210>
 8004264:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004268:	d817      	bhi.n	800429a <UART_SetConfig+0x216>
 800426a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800426e:	d00b      	beq.n	8004288 <UART_SetConfig+0x204>
 8004270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004274:	d811      	bhi.n	800429a <UART_SetConfig+0x216>
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <UART_SetConfig+0x1fe>
 800427a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800427e:	d006      	beq.n	800428e <UART_SetConfig+0x20a>
 8004280:	e00b      	b.n	800429a <UART_SetConfig+0x216>
 8004282:	2300      	movs	r3, #0
 8004284:	77fb      	strb	r3, [r7, #31]
 8004286:	e0a0      	b.n	80043ca <UART_SetConfig+0x346>
 8004288:	2302      	movs	r3, #2
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e09d      	b.n	80043ca <UART_SetConfig+0x346>
 800428e:	2304      	movs	r3, #4
 8004290:	77fb      	strb	r3, [r7, #31]
 8004292:	e09a      	b.n	80043ca <UART_SetConfig+0x346>
 8004294:	2308      	movs	r3, #8
 8004296:	77fb      	strb	r3, [r7, #31]
 8004298:	e097      	b.n	80043ca <UART_SetConfig+0x346>
 800429a:	2310      	movs	r3, #16
 800429c:	77fb      	strb	r3, [r7, #31]
 800429e:	e094      	b.n	80043ca <UART_SetConfig+0x346>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a30      	ldr	r2, [pc, #192]	; (8004368 <UART_SetConfig+0x2e4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d125      	bne.n	80042f6 <UART_SetConfig+0x272>
 80042aa:	4b2a      	ldr	r3, [pc, #168]	; (8004354 <UART_SetConfig+0x2d0>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042b8:	d017      	beq.n	80042ea <UART_SetConfig+0x266>
 80042ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042be:	d817      	bhi.n	80042f0 <UART_SetConfig+0x26c>
 80042c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c4:	d00b      	beq.n	80042de <UART_SetConfig+0x25a>
 80042c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ca:	d811      	bhi.n	80042f0 <UART_SetConfig+0x26c>
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <UART_SetConfig+0x254>
 80042d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d4:	d006      	beq.n	80042e4 <UART_SetConfig+0x260>
 80042d6:	e00b      	b.n	80042f0 <UART_SetConfig+0x26c>
 80042d8:	2301      	movs	r3, #1
 80042da:	77fb      	strb	r3, [r7, #31]
 80042dc:	e075      	b.n	80043ca <UART_SetConfig+0x346>
 80042de:	2302      	movs	r3, #2
 80042e0:	77fb      	strb	r3, [r7, #31]
 80042e2:	e072      	b.n	80043ca <UART_SetConfig+0x346>
 80042e4:	2304      	movs	r3, #4
 80042e6:	77fb      	strb	r3, [r7, #31]
 80042e8:	e06f      	b.n	80043ca <UART_SetConfig+0x346>
 80042ea:	2308      	movs	r3, #8
 80042ec:	77fb      	strb	r3, [r7, #31]
 80042ee:	e06c      	b.n	80043ca <UART_SetConfig+0x346>
 80042f0:	2310      	movs	r3, #16
 80042f2:	77fb      	strb	r3, [r7, #31]
 80042f4:	e069      	b.n	80043ca <UART_SetConfig+0x346>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a1c      	ldr	r2, [pc, #112]	; (800436c <UART_SetConfig+0x2e8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d137      	bne.n	8004370 <UART_SetConfig+0x2ec>
 8004300:	4b14      	ldr	r3, [pc, #80]	; (8004354 <UART_SetConfig+0x2d0>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004306:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800430a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800430e:	d017      	beq.n	8004340 <UART_SetConfig+0x2bc>
 8004310:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004314:	d817      	bhi.n	8004346 <UART_SetConfig+0x2c2>
 8004316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800431a:	d00b      	beq.n	8004334 <UART_SetConfig+0x2b0>
 800431c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004320:	d811      	bhi.n	8004346 <UART_SetConfig+0x2c2>
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <UART_SetConfig+0x2aa>
 8004326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432a:	d006      	beq.n	800433a <UART_SetConfig+0x2b6>
 800432c:	e00b      	b.n	8004346 <UART_SetConfig+0x2c2>
 800432e:	2300      	movs	r3, #0
 8004330:	77fb      	strb	r3, [r7, #31]
 8004332:	e04a      	b.n	80043ca <UART_SetConfig+0x346>
 8004334:	2302      	movs	r3, #2
 8004336:	77fb      	strb	r3, [r7, #31]
 8004338:	e047      	b.n	80043ca <UART_SetConfig+0x346>
 800433a:	2304      	movs	r3, #4
 800433c:	77fb      	strb	r3, [r7, #31]
 800433e:	e044      	b.n	80043ca <UART_SetConfig+0x346>
 8004340:	2308      	movs	r3, #8
 8004342:	77fb      	strb	r3, [r7, #31]
 8004344:	e041      	b.n	80043ca <UART_SetConfig+0x346>
 8004346:	2310      	movs	r3, #16
 8004348:	77fb      	strb	r3, [r7, #31]
 800434a:	e03e      	b.n	80043ca <UART_SetConfig+0x346>
 800434c:	efff69f3 	.word	0xefff69f3
 8004350:	40011000 	.word	0x40011000
 8004354:	40023800 	.word	0x40023800
 8004358:	40004400 	.word	0x40004400
 800435c:	40004800 	.word	0x40004800
 8004360:	40004c00 	.word	0x40004c00
 8004364:	40005000 	.word	0x40005000
 8004368:	40011400 	.word	0x40011400
 800436c:	40007800 	.word	0x40007800
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a71      	ldr	r2, [pc, #452]	; (800453c <UART_SetConfig+0x4b8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d125      	bne.n	80043c6 <UART_SetConfig+0x342>
 800437a:	4b71      	ldr	r3, [pc, #452]	; (8004540 <UART_SetConfig+0x4bc>)
 800437c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004380:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004384:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004388:	d017      	beq.n	80043ba <UART_SetConfig+0x336>
 800438a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800438e:	d817      	bhi.n	80043c0 <UART_SetConfig+0x33c>
 8004390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004394:	d00b      	beq.n	80043ae <UART_SetConfig+0x32a>
 8004396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800439a:	d811      	bhi.n	80043c0 <UART_SetConfig+0x33c>
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <UART_SetConfig+0x324>
 80043a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043a4:	d006      	beq.n	80043b4 <UART_SetConfig+0x330>
 80043a6:	e00b      	b.n	80043c0 <UART_SetConfig+0x33c>
 80043a8:	2300      	movs	r3, #0
 80043aa:	77fb      	strb	r3, [r7, #31]
 80043ac:	e00d      	b.n	80043ca <UART_SetConfig+0x346>
 80043ae:	2302      	movs	r3, #2
 80043b0:	77fb      	strb	r3, [r7, #31]
 80043b2:	e00a      	b.n	80043ca <UART_SetConfig+0x346>
 80043b4:	2304      	movs	r3, #4
 80043b6:	77fb      	strb	r3, [r7, #31]
 80043b8:	e007      	b.n	80043ca <UART_SetConfig+0x346>
 80043ba:	2308      	movs	r3, #8
 80043bc:	77fb      	strb	r3, [r7, #31]
 80043be:	e004      	b.n	80043ca <UART_SetConfig+0x346>
 80043c0:	2310      	movs	r3, #16
 80043c2:	77fb      	strb	r3, [r7, #31]
 80043c4:	e001      	b.n	80043ca <UART_SetConfig+0x346>
 80043c6:	2310      	movs	r3, #16
 80043c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d2:	d15b      	bne.n	800448c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80043d4:	7ffb      	ldrb	r3, [r7, #31]
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d827      	bhi.n	800442a <UART_SetConfig+0x3a6>
 80043da:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <UART_SetConfig+0x35c>)
 80043dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e0:	08004405 	.word	0x08004405
 80043e4:	0800440d 	.word	0x0800440d
 80043e8:	08004415 	.word	0x08004415
 80043ec:	0800442b 	.word	0x0800442b
 80043f0:	0800441b 	.word	0x0800441b
 80043f4:	0800442b 	.word	0x0800442b
 80043f8:	0800442b 	.word	0x0800442b
 80043fc:	0800442b 	.word	0x0800442b
 8004400:	08004423 	.word	0x08004423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004404:	f7fe ff66 	bl	80032d4 <HAL_RCC_GetPCLK1Freq>
 8004408:	61b8      	str	r0, [r7, #24]
        break;
 800440a:	e013      	b.n	8004434 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800440c:	f7fe ff76 	bl	80032fc <HAL_RCC_GetPCLK2Freq>
 8004410:	61b8      	str	r0, [r7, #24]
        break;
 8004412:	e00f      	b.n	8004434 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004414:	4b4b      	ldr	r3, [pc, #300]	; (8004544 <UART_SetConfig+0x4c0>)
 8004416:	61bb      	str	r3, [r7, #24]
        break;
 8004418:	e00c      	b.n	8004434 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800441a:	f7fe fe99 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 800441e:	61b8      	str	r0, [r7, #24]
        break;
 8004420:	e008      	b.n	8004434 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004426:	61bb      	str	r3, [r7, #24]
        break;
 8004428:	e004      	b.n	8004434 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	77bb      	strb	r3, [r7, #30]
        break;
 8004432:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d074      	beq.n	8004524 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	005a      	lsls	r2, r3, #1
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	085b      	lsrs	r3, r3, #1
 8004444:	441a      	add	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	fbb2 f3f3 	udiv	r3, r2, r3
 800444e:	b29b      	uxth	r3, r3
 8004450:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	2b0f      	cmp	r3, #15
 8004456:	d916      	bls.n	8004486 <UART_SetConfig+0x402>
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445e:	d212      	bcs.n	8004486 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	b29b      	uxth	r3, r3
 8004464:	f023 030f 	bic.w	r3, r3, #15
 8004468:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	085b      	lsrs	r3, r3, #1
 800446e:	b29b      	uxth	r3, r3
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	b29a      	uxth	r2, r3
 8004476:	89fb      	ldrh	r3, [r7, #14]
 8004478:	4313      	orrs	r3, r2
 800447a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	89fa      	ldrh	r2, [r7, #14]
 8004482:	60da      	str	r2, [r3, #12]
 8004484:	e04e      	b.n	8004524 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	77bb      	strb	r3, [r7, #30]
 800448a:	e04b      	b.n	8004524 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800448c:	7ffb      	ldrb	r3, [r7, #31]
 800448e:	2b08      	cmp	r3, #8
 8004490:	d827      	bhi.n	80044e2 <UART_SetConfig+0x45e>
 8004492:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <UART_SetConfig+0x414>)
 8004494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004498:	080044bd 	.word	0x080044bd
 800449c:	080044c5 	.word	0x080044c5
 80044a0:	080044cd 	.word	0x080044cd
 80044a4:	080044e3 	.word	0x080044e3
 80044a8:	080044d3 	.word	0x080044d3
 80044ac:	080044e3 	.word	0x080044e3
 80044b0:	080044e3 	.word	0x080044e3
 80044b4:	080044e3 	.word	0x080044e3
 80044b8:	080044db 	.word	0x080044db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044bc:	f7fe ff0a 	bl	80032d4 <HAL_RCC_GetPCLK1Freq>
 80044c0:	61b8      	str	r0, [r7, #24]
        break;
 80044c2:	e013      	b.n	80044ec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044c4:	f7fe ff1a 	bl	80032fc <HAL_RCC_GetPCLK2Freq>
 80044c8:	61b8      	str	r0, [r7, #24]
        break;
 80044ca:	e00f      	b.n	80044ec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044cc:	4b1d      	ldr	r3, [pc, #116]	; (8004544 <UART_SetConfig+0x4c0>)
 80044ce:	61bb      	str	r3, [r7, #24]
        break;
 80044d0:	e00c      	b.n	80044ec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044d2:	f7fe fe3d 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 80044d6:	61b8      	str	r0, [r7, #24]
        break;
 80044d8:	e008      	b.n	80044ec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044de:	61bb      	str	r3, [r7, #24]
        break;
 80044e0:	e004      	b.n	80044ec <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	77bb      	strb	r3, [r7, #30]
        break;
 80044ea:	bf00      	nop
    }

    if (pclk != 0U)
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d018      	beq.n	8004524 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	085a      	lsrs	r2, r3, #1
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	441a      	add	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	fbb2 f3f3 	udiv	r3, r2, r3
 8004504:	b29b      	uxth	r3, r3
 8004506:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	2b0f      	cmp	r3, #15
 800450c:	d908      	bls.n	8004520 <UART_SetConfig+0x49c>
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004514:	d204      	bcs.n	8004520 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	60da      	str	r2, [r3, #12]
 800451e:	e001      	b.n	8004524 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004530:	7fbb      	ldrb	r3, [r7, #30]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3720      	adds	r7, #32
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40007c00 	.word	0x40007c00
 8004540:	40023800 	.word	0x40023800
 8004544:	00f42400 	.word	0x00f42400

08004548 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01a      	beq.n	800465e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004646:	d10a      	bne.n	800465e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	605a      	str	r2, [r3, #4]
  }
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af02      	add	r7, sp, #8
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800469c:	f7fd fab6 	bl	8001c0c <HAL_GetTick>
 80046a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d10e      	bne.n	80046ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f82d 	bl	800471e <UART_WaitOnFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e023      	b.n	8004716 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d10e      	bne.n	80046fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f817 	bl	800471e <UART_WaitOnFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e00d      	b.n	8004716 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2220      	movs	r2, #32
 80046fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b084      	sub	sp, #16
 8004722:	af00      	add	r7, sp, #0
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	603b      	str	r3, [r7, #0]
 800472a:	4613      	mov	r3, r2
 800472c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800472e:	e05e      	b.n	80047ee <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004736:	d05a      	beq.n	80047ee <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004738:	f7fd fa68 	bl	8001c0c <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	429a      	cmp	r2, r3
 8004746:	d302      	bcc.n	800474e <UART_WaitOnFlagUntilTimeout+0x30>
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d11b      	bne.n	8004786 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800475c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0201 	bic.w	r2, r2, #1
 800476c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2220      	movs	r2, #32
 8004772:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2220      	movs	r2, #32
 8004778:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e043      	b.n	800480e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d02c      	beq.n	80047ee <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800479e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a2:	d124      	bne.n	80047ee <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047bc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0201 	bic.w	r2, r2, #1
 80047cc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2220      	movs	r2, #32
 80047d2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2220      	movs	r2, #32
 80047d8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e00f      	b.n	800480e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69da      	ldr	r2, [r3, #28]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4013      	ands	r3, r2
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	bf0c      	ite	eq
 80047fe:	2301      	moveq	r3, #1
 8004800:	2300      	movne	r3, #0
 8004802:	b2db      	uxtb	r3, r3
 8004804:	461a      	mov	r2, r3
 8004806:	79fb      	ldrb	r3, [r7, #7]
 8004808:	429a      	cmp	r2, r3
 800480a:	d091      	beq.n	8004730 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	4613      	mov	r3, r2
 8004824:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	88fa      	ldrh	r2, [r7, #6]
 8004830:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2222      	movs	r2, #34	; 0x22
 8004840:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004846:	2b00      	cmp	r3, #0
 8004848:	d02b      	beq.n	80048a2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484e:	4a25      	ldr	r2, [pc, #148]	; (80048e4 <UART_Start_Receive_DMA+0xcc>)
 8004850:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004856:	4a24      	ldr	r2, [pc, #144]	; (80048e8 <UART_Start_Receive_DMA+0xd0>)
 8004858:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485e:	4a23      	ldr	r2, [pc, #140]	; (80048ec <UART_Start_Receive_DMA+0xd4>)
 8004860:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004866:	2200      	movs	r2, #0
 8004868:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3324      	adds	r3, #36	; 0x24
 8004874:	4619      	mov	r1, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487a:	461a      	mov	r2, r3
 800487c:	88fb      	ldrh	r3, [r7, #6]
 800487e:	f7fd fb91 	bl	8001fa4 <HAL_DMA_Start_IT>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00c      	beq.n	80048a2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2210      	movs	r2, #16
 800488c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e01c      	b.n	80048dc <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b8:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f042 0201 	orr.w	r2, r2, #1
 80048c8:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048d8:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	08004979 	.word	0x08004979
 80048e8:	08004a0d 	.word	0x08004a0d
 80048ec:	08004a45 	.word	0x08004a45

080048f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004906:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2220      	movs	r2, #32
 800490c:	679a      	str	r2, [r3, #120]	; 0x78
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004930:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0201 	bic.w	r2, r2, #1
 8004940:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004946:	2b01      	cmp	r3, #1
 8004948:	d107      	bne.n	800495a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0210 	bic.w	r2, r2, #16
 8004958:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004984:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800498e:	d02a      	beq.n	80049e6 <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049a6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0201 	bic.w	r2, r2, #1
 80049b6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d107      	bne.n	80049e6 <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0210 	bic.w	r2, r2, #16
 80049e4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d107      	bne.n	80049fe <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80049f4:	4619      	mov	r1, r3
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f7ff fb2e 	bl	8004058 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049fc:	e002      	b.n	8004a04 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f7fb fdf4 	bl	80005ec <HAL_UART_RxCpltCallback>
}
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d109      	bne.n	8004a36 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a28:	085b      	lsrs	r3, r3, #1
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7ff fb12 	bl	8004058 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a34:	e002      	b.n	8004a3c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f7ff fafa 	bl	8004030 <HAL_UART_RxHalfCpltCallback>
}
 8004a3c:	bf00      	nop
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a50:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a56:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a68:	2b80      	cmp	r3, #128	; 0x80
 8004a6a:	d109      	bne.n	8004a80 <UART_DMAError+0x3c>
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2b21      	cmp	r3, #33	; 0x21
 8004a70:	d106      	bne.n	8004a80 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004a7a:	6978      	ldr	r0, [r7, #20]
 8004a7c:	f7ff ff38 	bl	80048f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8a:	2b40      	cmp	r3, #64	; 0x40
 8004a8c:	d109      	bne.n	8004aa2 <UART_DMAError+0x5e>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b22      	cmp	r3, #34	; 0x22
 8004a92:	d106      	bne.n	8004aa2 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004a9c:	6978      	ldr	r0, [r7, #20]
 8004a9e:	f7ff ff3c 	bl	800491a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aa8:	f043 0210 	orr.w	r2, r3, #16
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ab2:	6978      	ldr	r0, [r7, #20]
 8004ab4:	f7ff fac6 	bl	8004044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ab8:	bf00      	nop
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f7ff fab0 	bl	8004044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ae4:	bf00      	nop
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b02:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff fa83 	bl	800401c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <_Znwj>:
 8004b1e:	2801      	cmp	r0, #1
 8004b20:	bf38      	it	cc
 8004b22:	2001      	movcc	r0, #1
 8004b24:	b510      	push	{r4, lr}
 8004b26:	4604      	mov	r4, r0
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f000 f859 	bl	8004be0 <malloc>
 8004b2e:	b930      	cbnz	r0, 8004b3e <_Znwj+0x20>
 8004b30:	f000 f81c 	bl	8004b6c <_ZSt15get_new_handlerv>
 8004b34:	b908      	cbnz	r0, 8004b3a <_Znwj+0x1c>
 8004b36:	f000 f821 	bl	8004b7c <abort>
 8004b3a:	4780      	blx	r0
 8004b3c:	e7f4      	b.n	8004b28 <_Znwj+0xa>
 8004b3e:	bd10      	pop	{r4, pc}

08004b40 <__cxa_pure_virtual>:
 8004b40:	b508      	push	{r3, lr}
 8004b42:	f000 f80d 	bl	8004b60 <_ZSt9terminatev>

08004b46 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004b46:	b508      	push	{r3, lr}
 8004b48:	4780      	blx	r0
 8004b4a:	f000 f817 	bl	8004b7c <abort>
	...

08004b50 <_ZSt13get_terminatev>:
 8004b50:	4b02      	ldr	r3, [pc, #8]	; (8004b5c <_ZSt13get_terminatev+0xc>)
 8004b52:	6818      	ldr	r0, [r3, #0]
 8004b54:	f3bf 8f5b 	dmb	ish
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	20000010 	.word	0x20000010

08004b60 <_ZSt9terminatev>:
 8004b60:	b508      	push	{r3, lr}
 8004b62:	f7ff fff5 	bl	8004b50 <_ZSt13get_terminatev>
 8004b66:	f7ff ffee 	bl	8004b46 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08004b6c <_ZSt15get_new_handlerv>:
 8004b6c:	4b02      	ldr	r3, [pc, #8]	; (8004b78 <_ZSt15get_new_handlerv+0xc>)
 8004b6e:	6818      	ldr	r0, [r3, #0]
 8004b70:	f3bf 8f5b 	dmb	ish
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	20000224 	.word	0x20000224

08004b7c <abort>:
 8004b7c:	b508      	push	{r3, lr}
 8004b7e:	2006      	movs	r0, #6
 8004b80:	f000 f8de 	bl	8004d40 <raise>
 8004b84:	2001      	movs	r0, #1
 8004b86:	f7fc ff75 	bl	8001a74 <_exit>
	...

08004b8c <__errno>:
 8004b8c:	4b01      	ldr	r3, [pc, #4]	; (8004b94 <__errno+0x8>)
 8004b8e:	6818      	ldr	r0, [r3, #0]
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	20000014 	.word	0x20000014

08004b98 <__libc_init_array>:
 8004b98:	b570      	push	{r4, r5, r6, lr}
 8004b9a:	4d0d      	ldr	r5, [pc, #52]	; (8004bd0 <__libc_init_array+0x38>)
 8004b9c:	4c0d      	ldr	r4, [pc, #52]	; (8004bd4 <__libc_init_array+0x3c>)
 8004b9e:	1b64      	subs	r4, r4, r5
 8004ba0:	10a4      	asrs	r4, r4, #2
 8004ba2:	2600      	movs	r6, #0
 8004ba4:	42a6      	cmp	r6, r4
 8004ba6:	d109      	bne.n	8004bbc <__libc_init_array+0x24>
 8004ba8:	4d0b      	ldr	r5, [pc, #44]	; (8004bd8 <__libc_init_array+0x40>)
 8004baa:	4c0c      	ldr	r4, [pc, #48]	; (8004bdc <__libc_init_array+0x44>)
 8004bac:	f000 f904 	bl	8004db8 <_init>
 8004bb0:	1b64      	subs	r4, r4, r5
 8004bb2:	10a4      	asrs	r4, r4, #2
 8004bb4:	2600      	movs	r6, #0
 8004bb6:	42a6      	cmp	r6, r4
 8004bb8:	d105      	bne.n	8004bc6 <__libc_init_array+0x2e>
 8004bba:	bd70      	pop	{r4, r5, r6, pc}
 8004bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bc0:	4798      	blx	r3
 8004bc2:	3601      	adds	r6, #1
 8004bc4:	e7ee      	b.n	8004ba4 <__libc_init_array+0xc>
 8004bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bca:	4798      	blx	r3
 8004bcc:	3601      	adds	r6, #1
 8004bce:	e7f2      	b.n	8004bb6 <__libc_init_array+0x1e>
 8004bd0:	08004e20 	.word	0x08004e20
 8004bd4:	08004e20 	.word	0x08004e20
 8004bd8:	08004e20 	.word	0x08004e20
 8004bdc:	08004e24 	.word	0x08004e24

08004be0 <malloc>:
 8004be0:	4b02      	ldr	r3, [pc, #8]	; (8004bec <malloc+0xc>)
 8004be2:	4601      	mov	r1, r0
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	f000 b819 	b.w	8004c1c <_malloc_r>
 8004bea:	bf00      	nop
 8004bec:	20000014 	.word	0x20000014

08004bf0 <memcpy>:
 8004bf0:	440a      	add	r2, r1
 8004bf2:	4291      	cmp	r1, r2
 8004bf4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004bf8:	d100      	bne.n	8004bfc <memcpy+0xc>
 8004bfa:	4770      	bx	lr
 8004bfc:	b510      	push	{r4, lr}
 8004bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c06:	4291      	cmp	r1, r2
 8004c08:	d1f9      	bne.n	8004bfe <memcpy+0xe>
 8004c0a:	bd10      	pop	{r4, pc}

08004c0c <memset>:
 8004c0c:	4402      	add	r2, r0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d100      	bne.n	8004c16 <memset+0xa>
 8004c14:	4770      	bx	lr
 8004c16:	f803 1b01 	strb.w	r1, [r3], #1
 8004c1a:	e7f9      	b.n	8004c10 <memset+0x4>

08004c1c <_malloc_r>:
 8004c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1e:	1ccd      	adds	r5, r1, #3
 8004c20:	f025 0503 	bic.w	r5, r5, #3
 8004c24:	3508      	adds	r5, #8
 8004c26:	2d0c      	cmp	r5, #12
 8004c28:	bf38      	it	cc
 8004c2a:	250c      	movcc	r5, #12
 8004c2c:	2d00      	cmp	r5, #0
 8004c2e:	4606      	mov	r6, r0
 8004c30:	db01      	blt.n	8004c36 <_malloc_r+0x1a>
 8004c32:	42a9      	cmp	r1, r5
 8004c34:	d903      	bls.n	8004c3e <_malloc_r+0x22>
 8004c36:	230c      	movs	r3, #12
 8004c38:	6033      	str	r3, [r6, #0]
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c3e:	f000 f8ad 	bl	8004d9c <__malloc_lock>
 8004c42:	4921      	ldr	r1, [pc, #132]	; (8004cc8 <_malloc_r+0xac>)
 8004c44:	680a      	ldr	r2, [r1, #0]
 8004c46:	4614      	mov	r4, r2
 8004c48:	b99c      	cbnz	r4, 8004c72 <_malloc_r+0x56>
 8004c4a:	4f20      	ldr	r7, [pc, #128]	; (8004ccc <_malloc_r+0xb0>)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	b923      	cbnz	r3, 8004c5a <_malloc_r+0x3e>
 8004c50:	4621      	mov	r1, r4
 8004c52:	4630      	mov	r0, r6
 8004c54:	f000 f83c 	bl	8004cd0 <_sbrk_r>
 8004c58:	6038      	str	r0, [r7, #0]
 8004c5a:	4629      	mov	r1, r5
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	f000 f837 	bl	8004cd0 <_sbrk_r>
 8004c62:	1c43      	adds	r3, r0, #1
 8004c64:	d123      	bne.n	8004cae <_malloc_r+0x92>
 8004c66:	230c      	movs	r3, #12
 8004c68:	6033      	str	r3, [r6, #0]
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	f000 f89c 	bl	8004da8 <__malloc_unlock>
 8004c70:	e7e3      	b.n	8004c3a <_malloc_r+0x1e>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	1b5b      	subs	r3, r3, r5
 8004c76:	d417      	bmi.n	8004ca8 <_malloc_r+0x8c>
 8004c78:	2b0b      	cmp	r3, #11
 8004c7a:	d903      	bls.n	8004c84 <_malloc_r+0x68>
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	441c      	add	r4, r3
 8004c80:	6025      	str	r5, [r4, #0]
 8004c82:	e004      	b.n	8004c8e <_malloc_r+0x72>
 8004c84:	6863      	ldr	r3, [r4, #4]
 8004c86:	42a2      	cmp	r2, r4
 8004c88:	bf0c      	ite	eq
 8004c8a:	600b      	streq	r3, [r1, #0]
 8004c8c:	6053      	strne	r3, [r2, #4]
 8004c8e:	4630      	mov	r0, r6
 8004c90:	f000 f88a 	bl	8004da8 <__malloc_unlock>
 8004c94:	f104 000b 	add.w	r0, r4, #11
 8004c98:	1d23      	adds	r3, r4, #4
 8004c9a:	f020 0007 	bic.w	r0, r0, #7
 8004c9e:	1ac2      	subs	r2, r0, r3
 8004ca0:	d0cc      	beq.n	8004c3c <_malloc_r+0x20>
 8004ca2:	1a1b      	subs	r3, r3, r0
 8004ca4:	50a3      	str	r3, [r4, r2]
 8004ca6:	e7c9      	b.n	8004c3c <_malloc_r+0x20>
 8004ca8:	4622      	mov	r2, r4
 8004caa:	6864      	ldr	r4, [r4, #4]
 8004cac:	e7cc      	b.n	8004c48 <_malloc_r+0x2c>
 8004cae:	1cc4      	adds	r4, r0, #3
 8004cb0:	f024 0403 	bic.w	r4, r4, #3
 8004cb4:	42a0      	cmp	r0, r4
 8004cb6:	d0e3      	beq.n	8004c80 <_malloc_r+0x64>
 8004cb8:	1a21      	subs	r1, r4, r0
 8004cba:	4630      	mov	r0, r6
 8004cbc:	f000 f808 	bl	8004cd0 <_sbrk_r>
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d1dd      	bne.n	8004c80 <_malloc_r+0x64>
 8004cc4:	e7cf      	b.n	8004c66 <_malloc_r+0x4a>
 8004cc6:	bf00      	nop
 8004cc8:	20000228 	.word	0x20000228
 8004ccc:	2000022c 	.word	0x2000022c

08004cd0 <_sbrk_r>:
 8004cd0:	b538      	push	{r3, r4, r5, lr}
 8004cd2:	4d06      	ldr	r5, [pc, #24]	; (8004cec <_sbrk_r+0x1c>)
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	4608      	mov	r0, r1
 8004cda:	602b      	str	r3, [r5, #0]
 8004cdc:	f7fc fed4 	bl	8001a88 <_sbrk>
 8004ce0:	1c43      	adds	r3, r0, #1
 8004ce2:	d102      	bne.n	8004cea <_sbrk_r+0x1a>
 8004ce4:	682b      	ldr	r3, [r5, #0]
 8004ce6:	b103      	cbz	r3, 8004cea <_sbrk_r+0x1a>
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	bd38      	pop	{r3, r4, r5, pc}
 8004cec:	20000234 	.word	0x20000234

08004cf0 <_raise_r>:
 8004cf0:	291f      	cmp	r1, #31
 8004cf2:	b538      	push	{r3, r4, r5, lr}
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	460d      	mov	r5, r1
 8004cf8:	d904      	bls.n	8004d04 <_raise_r+0x14>
 8004cfa:	2316      	movs	r3, #22
 8004cfc:	6003      	str	r3, [r0, #0]
 8004cfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d02:	bd38      	pop	{r3, r4, r5, pc}
 8004d04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004d06:	b112      	cbz	r2, 8004d0e <_raise_r+0x1e>
 8004d08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004d0c:	b94b      	cbnz	r3, 8004d22 <_raise_r+0x32>
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f000 f830 	bl	8004d74 <_getpid_r>
 8004d14:	462a      	mov	r2, r5
 8004d16:	4601      	mov	r1, r0
 8004d18:	4620      	mov	r0, r4
 8004d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d1e:	f000 b817 	b.w	8004d50 <_kill_r>
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d00a      	beq.n	8004d3c <_raise_r+0x4c>
 8004d26:	1c59      	adds	r1, r3, #1
 8004d28:	d103      	bne.n	8004d32 <_raise_r+0x42>
 8004d2a:	2316      	movs	r3, #22
 8004d2c:	6003      	str	r3, [r0, #0]
 8004d2e:	2001      	movs	r0, #1
 8004d30:	e7e7      	b.n	8004d02 <_raise_r+0x12>
 8004d32:	2400      	movs	r4, #0
 8004d34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004d38:	4628      	mov	r0, r5
 8004d3a:	4798      	blx	r3
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	e7e0      	b.n	8004d02 <_raise_r+0x12>

08004d40 <raise>:
 8004d40:	4b02      	ldr	r3, [pc, #8]	; (8004d4c <raise+0xc>)
 8004d42:	4601      	mov	r1, r0
 8004d44:	6818      	ldr	r0, [r3, #0]
 8004d46:	f7ff bfd3 	b.w	8004cf0 <_raise_r>
 8004d4a:	bf00      	nop
 8004d4c:	20000014 	.word	0x20000014

08004d50 <_kill_r>:
 8004d50:	b538      	push	{r3, r4, r5, lr}
 8004d52:	4d07      	ldr	r5, [pc, #28]	; (8004d70 <_kill_r+0x20>)
 8004d54:	2300      	movs	r3, #0
 8004d56:	4604      	mov	r4, r0
 8004d58:	4608      	mov	r0, r1
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	602b      	str	r3, [r5, #0]
 8004d5e:	f7fc fe79 	bl	8001a54 <_kill>
 8004d62:	1c43      	adds	r3, r0, #1
 8004d64:	d102      	bne.n	8004d6c <_kill_r+0x1c>
 8004d66:	682b      	ldr	r3, [r5, #0]
 8004d68:	b103      	cbz	r3, 8004d6c <_kill_r+0x1c>
 8004d6a:	6023      	str	r3, [r4, #0]
 8004d6c:	bd38      	pop	{r3, r4, r5, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000234 	.word	0x20000234

08004d74 <_getpid_r>:
 8004d74:	f7fc be66 	b.w	8001a44 <_getpid>

08004d78 <strncmp>:
 8004d78:	b510      	push	{r4, lr}
 8004d7a:	b16a      	cbz	r2, 8004d98 <strncmp+0x20>
 8004d7c:	3901      	subs	r1, #1
 8004d7e:	1884      	adds	r4, r0, r2
 8004d80:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004d84:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d103      	bne.n	8004d94 <strncmp+0x1c>
 8004d8c:	42a0      	cmp	r0, r4
 8004d8e:	d001      	beq.n	8004d94 <strncmp+0x1c>
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1f5      	bne.n	8004d80 <strncmp+0x8>
 8004d94:	1a98      	subs	r0, r3, r2
 8004d96:	bd10      	pop	{r4, pc}
 8004d98:	4610      	mov	r0, r2
 8004d9a:	e7fc      	b.n	8004d96 <strncmp+0x1e>

08004d9c <__malloc_lock>:
 8004d9c:	4801      	ldr	r0, [pc, #4]	; (8004da4 <__malloc_lock+0x8>)
 8004d9e:	f000 b809 	b.w	8004db4 <__retarget_lock_acquire_recursive>
 8004da2:	bf00      	nop
 8004da4:	2000023c 	.word	0x2000023c

08004da8 <__malloc_unlock>:
 8004da8:	4801      	ldr	r0, [pc, #4]	; (8004db0 <__malloc_unlock+0x8>)
 8004daa:	f000 b804 	b.w	8004db6 <__retarget_lock_release_recursive>
 8004dae:	bf00      	nop
 8004db0:	2000023c 	.word	0x2000023c

08004db4 <__retarget_lock_acquire_recursive>:
 8004db4:	4770      	bx	lr

08004db6 <__retarget_lock_release_recursive>:
 8004db6:	4770      	bx	lr

08004db8 <_init>:
 8004db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dba:	bf00      	nop
 8004dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dbe:	bc08      	pop	{r3}
 8004dc0:	469e      	mov	lr, r3
 8004dc2:	4770      	bx	lr

08004dc4 <_fini>:
 8004dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc6:	bf00      	nop
 8004dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dca:	bc08      	pop	{r3}
 8004dcc:	469e      	mov	lr, r3
 8004dce:	4770      	bx	lr
